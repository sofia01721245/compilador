Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
Rule 2     main_marker -> KEYWORD_MAIN
Rule 3     vars_opt -> KEYWORD_VAR var_lines
Rule 4     vars_opt -> empty
Rule 5     var_lines -> var_lines var_list SEMICOLON
Rule 6     var_lines -> var_list SEMICOLON
Rule 7     var_list -> ID id_list COLON type
Rule 8     id_list -> COMMA ID id_list
Rule 9     id_list -> empty
Rule 10    type -> KEYWORD_INT
Rule 11    type -> KEYWORD_FLOAT
Rule 12    type -> KEYWORD_STRING
Rule 13    funcs_opt -> funcs_opt FUNCS
Rule 14    funcs_opt -> FUNCS
Rule 15    funcs_opt -> empty
Rule 16    FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON
Rule 17    func_start -> <empty>
Rule 18    func_end -> <empty>
Rule 19    parametros_opt -> parametros
Rule 20    parametros_opt -> empty
Rule 21    parametros -> parametros COMMA ID COLON type
Rule 22    parametros -> ID COLON type
Rule 23    body -> statement_list
Rule 24    statement_list -> statement statement_list
Rule 25    statement_list -> statement
Rule 26    statement_list -> empty
Rule 27    statement -> assign
Rule 28    statement -> condition
Rule 29    statement -> cycle
Rule 30    statement -> f_call
Rule 31    statement -> print
Rule 32    assign -> ID ASSIGN_SIGN expresion SEMICOLON
Rule 33    print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON
Rule 34    print_items -> print_items COMMA print_item
Rule 35    print_items -> print_item
Rule 36    print_item -> expresion
Rule 37    print_item -> CTE_STRING
Rule 38    cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
Rule 39    cuadr_do -> <empty>
Rule 40    condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
Rule 41    cuadr_if -> <empty>
Rule 42    else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE
Rule 43    cuadr_else -> <empty>
Rule 44    else_arg -> empty
Rule 45    f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON
Rule 46    expresion_list_opt -> expresion_list
Rule 47    expresion_list_opt -> empty
Rule 48    expresion_list -> expresion_list COMMA expresion
Rule 49    expresion_list -> expresion
Rule 50    expresion -> exp comparador exp
Rule 51    expresion -> exp
Rule 52    comparador -> LESS
Rule 53    comparador -> GREATER
Rule 54    comparador -> NOT_EQUAL
Rule 55    comparador -> EQUAL
Rule 56    comparador -> GREATER_EQUAL
Rule 57    comparador -> LESS_EQUAL
Rule 58    exp -> exp OP_SUM termino
Rule 59    exp -> exp OP_SUB termino
Rule 60    exp -> termino
Rule 61    termino -> termino OP_MUL factor
Rule 62    termino -> termino OP_DIV factor
Rule 63    termino -> factor
Rule 64    factor -> LPAREN expresion RPAREN
Rule 65    factor -> OP_SUM varcte
Rule 66    factor -> OP_SUB varcte
Rule 67    factor -> varcte
Rule 68    varcte -> ID
Rule 69    varcte -> CTE_INT
Rule 70    varcte -> CTE_FLOAT
Rule 71    empty -> <empty>

Terminals, with rules where they appear

ASSIGN_SIGN          : 32
COLON                : 7 21 22
COMMA                : 8 21 34 48
CTE_FLOAT            : 70
CTE_INT              : 69
CTE_STRING           : 37
EQUAL                : 55
GREATER              : 53
GREATER_EQUAL        : 56
ID                   : 1 7 8 16 21 22 32 45 68
KEYWORD_DO           : 38
KEYWORD_ELSE         : 42
KEYWORD_END          : 1
KEYWORD_FLOAT        : 11
KEYWORD_IF           : 40
KEYWORD_INT          : 10
KEYWORD_MAIN         : 2
KEYWORD_PRINT        : 33
KEYWORD_PROGRAM      : 1
KEYWORD_STRING       : 12
KEYWORD_VAR          : 3
KEYWORD_VOID         : 16
KEYWORD_WHILE        : 38
LBRACE               : 1 38 40 42
LBRACKET             : 16
LESS                 : 52
LESS_EQUAL           : 57
LPAREN               : 16 33 38 40 45 64
NOT_EQUAL            : 54
OP_DIV               : 62
OP_MUL               : 61
OP_SUB               : 59 66
OP_SUM               : 58 65
RBRACE               : 1 38 40 42
RBRACKET             : 16
RPAREN               : 16 33 38 40 45 64
SEMICOLON            : 1 1 5 6 16 32 33 38 40 45
error                : 

Nonterminals, with rules where they appear

FUNCS                : 13 14
Programa             : 0
assign               : 27
body                 : 1 16 38 40 42
comparador           : 50
condition            : 28
cuadr_do             : 38
cuadr_else           : 42
cuadr_if             : 40
cycle                : 29
else_arg             : 40
empty                : 4 9 15 20 26 44 47
exp                  : 50 50 51 58 59
expresion            : 32 36 38 40 48 49 64
expresion_list       : 46 48
expresion_list_opt   : 45
f_call               : 30
factor               : 61 62 63
func_end             : 16
func_start           : 16
funcs_opt            : 1 13
id_list              : 7 8
main_marker          : 1
parametros           : 19 21
parametros_opt       : 16
print                : 31
print_item           : 34 35
print_items          : 33 34
statement            : 24 25
statement_list       : 23 24
termino              : 58 59 60 61 62
type                 : 7 21 22
var_lines            : 3 5
var_list             : 5 6
varcte               : 65 66 67
vars_opt             : 1 16

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON

    KEYWORD_PROGRAM shift and go to state 2

    Programa                       shift and go to state 1

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> KEYWORD_PROGRAM . ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) Programa -> KEYWORD_PROGRAM ID . SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON . vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
    (3) vars_opt -> . KEYWORD_VAR var_lines
    (4) vars_opt -> . empty
    (71) empty -> .

    KEYWORD_VAR     shift and go to state 6
    KEYWORD_VOID    reduce using rule 71 (empty -> .)
    KEYWORD_MAIN    reduce using rule 71 (empty -> .)

    vars_opt                       shift and go to state 5
    empty                          shift and go to state 7

state 5

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt . funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
    (13) funcs_opt -> . funcs_opt FUNCS
    (14) funcs_opt -> . FUNCS
    (15) funcs_opt -> . empty
    (16) FUNCS -> . KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON
    (71) empty -> .

  ! shift/reduce conflict for KEYWORD_VOID resolved as shift
    KEYWORD_VOID    shift and go to state 11
    KEYWORD_MAIN    reduce using rule 71 (empty -> .)

  ! KEYWORD_VOID    [ reduce using rule 71 (empty -> .) ]

    funcs_opt                      shift and go to state 8
    FUNCS                          shift and go to state 9
    empty                          shift and go to state 10

state 6

    (3) vars_opt -> KEYWORD_VAR . var_lines
    (5) var_lines -> . var_lines var_list SEMICOLON
    (6) var_lines -> . var_list SEMICOLON
    (7) var_list -> . ID id_list COLON type

    ID              shift and go to state 14

    var_lines                      shift and go to state 12
    var_list                       shift and go to state 13

state 7

    (4) vars_opt -> empty .

    KEYWORD_VOID    reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_MAIN    reduce using rule 4 (vars_opt -> empty .)
    ID              reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_IF      reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_DO      reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_PRINT   reduce using rule 4 (vars_opt -> empty .)
    RBRACKET        reduce using rule 4 (vars_opt -> empty .)


state 8

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt . main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
    (13) funcs_opt -> funcs_opt . FUNCS
    (2) main_marker -> . KEYWORD_MAIN
    (16) FUNCS -> . KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON

    KEYWORD_MAIN    shift and go to state 17
    KEYWORD_VOID    shift and go to state 11

    main_marker                    shift and go to state 15
    FUNCS                          shift and go to state 16

state 9

    (14) funcs_opt -> FUNCS .

    KEYWORD_MAIN    reduce using rule 14 (funcs_opt -> FUNCS .)
    KEYWORD_VOID    reduce using rule 14 (funcs_opt -> FUNCS .)


state 10

    (15) funcs_opt -> empty .

    KEYWORD_MAIN    reduce using rule 15 (funcs_opt -> empty .)
    KEYWORD_VOID    reduce using rule 15 (funcs_opt -> empty .)


state 11

    (16) FUNCS -> KEYWORD_VOID . ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON

    ID              shift and go to state 18


state 12

    (3) vars_opt -> KEYWORD_VAR var_lines .
    (5) var_lines -> var_lines . var_list SEMICOLON
    (7) var_list -> . ID id_list COLON type

  ! shift/reduce conflict for ID resolved as shift
    KEYWORD_VOID    reduce using rule 3 (vars_opt -> KEYWORD_VAR var_lines .)
    KEYWORD_MAIN    reduce using rule 3 (vars_opt -> KEYWORD_VAR var_lines .)
    KEYWORD_IF      reduce using rule 3 (vars_opt -> KEYWORD_VAR var_lines .)
    KEYWORD_DO      reduce using rule 3 (vars_opt -> KEYWORD_VAR var_lines .)
    KEYWORD_PRINT   reduce using rule 3 (vars_opt -> KEYWORD_VAR var_lines .)
    RBRACKET        reduce using rule 3 (vars_opt -> KEYWORD_VAR var_lines .)
    ID              shift and go to state 14

  ! ID              [ reduce using rule 3 (vars_opt -> KEYWORD_VAR var_lines .) ]

    var_list                       shift and go to state 19

state 13

    (6) var_lines -> var_list . SEMICOLON

    SEMICOLON       shift and go to state 20


state 14

    (7) var_list -> ID . id_list COLON type
    (8) id_list -> . COMMA ID id_list
    (9) id_list -> . empty
    (71) empty -> .

    COMMA           shift and go to state 22
    COLON           reduce using rule 71 (empty -> .)

    id_list                        shift and go to state 21
    empty                          shift and go to state 23

state 15

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker . LBRACE body RBRACE KEYWORD_END SEMICOLON

    LBRACE          shift and go to state 24


state 16

    (13) funcs_opt -> funcs_opt FUNCS .

    KEYWORD_MAIN    reduce using rule 13 (funcs_opt -> funcs_opt FUNCS .)
    KEYWORD_VOID    reduce using rule 13 (funcs_opt -> funcs_opt FUNCS .)


state 17

    (2) main_marker -> KEYWORD_MAIN .

    LBRACE          reduce using rule 2 (main_marker -> KEYWORD_MAIN .)


state 18

    (16) FUNCS -> KEYWORD_VOID ID . func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON
    (17) func_start -> .

    LPAREN          reduce using rule 17 (func_start -> .)

    func_start                     shift and go to state 25

state 19

    (5) var_lines -> var_lines var_list . SEMICOLON

    SEMICOLON       shift and go to state 26


state 20

    (6) var_lines -> var_list SEMICOLON .

    ID              reduce using rule 6 (var_lines -> var_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 6 (var_lines -> var_list SEMICOLON .)
    KEYWORD_MAIN    reduce using rule 6 (var_lines -> var_list SEMICOLON .)
    KEYWORD_IF      reduce using rule 6 (var_lines -> var_list SEMICOLON .)
    KEYWORD_DO      reduce using rule 6 (var_lines -> var_list SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 6 (var_lines -> var_list SEMICOLON .)
    RBRACKET        reduce using rule 6 (var_lines -> var_list SEMICOLON .)


state 21

    (7) var_list -> ID id_list . COLON type

    COLON           shift and go to state 27


state 22

    (8) id_list -> COMMA . ID id_list

    ID              shift and go to state 28


state 23

    (9) id_list -> empty .

    COLON           reduce using rule 9 (id_list -> empty .)


state 24

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE . body RBRACE KEYWORD_END SEMICOLON
    (23) body -> . statement_list
    (24) statement_list -> . statement statement_list
    (25) statement_list -> . statement
    (26) statement_list -> . empty
    (27) statement -> . assign
    (28) statement -> . condition
    (29) statement -> . cycle
    (30) statement -> . f_call
    (31) statement -> . print
    (71) empty -> .
    (32) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (40) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (38) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (45) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (33) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 71 (empty -> .)
    ID              shift and go to state 29
    KEYWORD_IF      shift and go to state 39
    KEYWORD_DO      shift and go to state 40
    KEYWORD_PRINT   shift and go to state 41

    body                           shift and go to state 30
    statement_list                 shift and go to state 31
    statement                      shift and go to state 32
    empty                          shift and go to state 33
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 25

    (16) FUNCS -> KEYWORD_VOID ID func_start . LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON

    LPAREN          shift and go to state 42


state 26

    (5) var_lines -> var_lines var_list SEMICOLON .

    ID              reduce using rule 5 (var_lines -> var_lines var_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 5 (var_lines -> var_lines var_list SEMICOLON .)
    KEYWORD_MAIN    reduce using rule 5 (var_lines -> var_lines var_list SEMICOLON .)
    KEYWORD_IF      reduce using rule 5 (var_lines -> var_lines var_list SEMICOLON .)
    KEYWORD_DO      reduce using rule 5 (var_lines -> var_lines var_list SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 5 (var_lines -> var_lines var_list SEMICOLON .)
    RBRACKET        reduce using rule 5 (var_lines -> var_lines var_list SEMICOLON .)


state 27

    (7) var_list -> ID id_list COLON . type
    (10) type -> . KEYWORD_INT
    (11) type -> . KEYWORD_FLOAT
    (12) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 44
    KEYWORD_FLOAT   shift and go to state 45
    KEYWORD_STRING  shift and go to state 46

    type                           shift and go to state 43

state 28

    (8) id_list -> COMMA ID . id_list
    (8) id_list -> . COMMA ID id_list
    (9) id_list -> . empty
    (71) empty -> .

    COMMA           shift and go to state 22
    COLON           reduce using rule 71 (empty -> .)

    id_list                        shift and go to state 47
    empty                          shift and go to state 23

state 29

    (32) assign -> ID . ASSIGN_SIGN expresion SEMICOLON
    (45) f_call -> ID . LPAREN expresion_list_opt RPAREN SEMICOLON

    ASSIGN_SIGN     shift and go to state 48
    LPAREN          shift and go to state 49


state 30

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body . RBRACE KEYWORD_END SEMICOLON

    RBRACE          shift and go to state 50


state 31

    (23) body -> statement_list .

    RBRACE          reduce using rule 23 (body -> statement_list .)
    RBRACKET        reduce using rule 23 (body -> statement_list .)


state 32

    (24) statement_list -> statement . statement_list
    (25) statement_list -> statement .
    (24) statement_list -> . statement statement_list
    (25) statement_list -> . statement
    (26) statement_list -> . empty
    (27) statement -> . assign
    (28) statement -> . condition
    (29) statement -> . cycle
    (30) statement -> . f_call
    (31) statement -> . print
    (71) empty -> .
    (32) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (40) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (38) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (45) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (33) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

  ! reduce/reduce conflict for RBRACE resolved using rule 25 (statement_list -> statement .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 25 (statement_list -> statement .)
    RBRACE          reduce using rule 25 (statement_list -> statement .)
    RBRACKET        reduce using rule 25 (statement_list -> statement .)
    ID              shift and go to state 29
    KEYWORD_IF      shift and go to state 39
    KEYWORD_DO      shift and go to state 40
    KEYWORD_PRINT   shift and go to state 41

  ! RBRACE          [ reduce using rule 71 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 71 (empty -> .) ]

    statement                      shift and go to state 32
    statement_list                 shift and go to state 51
    empty                          shift and go to state 33
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 33

    (26) statement_list -> empty .

    RBRACE          reduce using rule 26 (statement_list -> empty .)
    RBRACKET        reduce using rule 26 (statement_list -> empty .)


state 34

    (27) statement -> assign .

    ID              reduce using rule 27 (statement -> assign .)
    KEYWORD_IF      reduce using rule 27 (statement -> assign .)
    KEYWORD_DO      reduce using rule 27 (statement -> assign .)
    KEYWORD_PRINT   reduce using rule 27 (statement -> assign .)
    RBRACE          reduce using rule 27 (statement -> assign .)
    RBRACKET        reduce using rule 27 (statement -> assign .)


state 35

    (28) statement -> condition .

    ID              reduce using rule 28 (statement -> condition .)
    KEYWORD_IF      reduce using rule 28 (statement -> condition .)
    KEYWORD_DO      reduce using rule 28 (statement -> condition .)
    KEYWORD_PRINT   reduce using rule 28 (statement -> condition .)
    RBRACE          reduce using rule 28 (statement -> condition .)
    RBRACKET        reduce using rule 28 (statement -> condition .)


state 36

    (29) statement -> cycle .

    ID              reduce using rule 29 (statement -> cycle .)
    KEYWORD_IF      reduce using rule 29 (statement -> cycle .)
    KEYWORD_DO      reduce using rule 29 (statement -> cycle .)
    KEYWORD_PRINT   reduce using rule 29 (statement -> cycle .)
    RBRACE          reduce using rule 29 (statement -> cycle .)
    RBRACKET        reduce using rule 29 (statement -> cycle .)


state 37

    (30) statement -> f_call .

    ID              reduce using rule 30 (statement -> f_call .)
    KEYWORD_IF      reduce using rule 30 (statement -> f_call .)
    KEYWORD_DO      reduce using rule 30 (statement -> f_call .)
    KEYWORD_PRINT   reduce using rule 30 (statement -> f_call .)
    RBRACE          reduce using rule 30 (statement -> f_call .)
    RBRACKET        reduce using rule 30 (statement -> f_call .)


state 38

    (31) statement -> print .

    ID              reduce using rule 31 (statement -> print .)
    KEYWORD_IF      reduce using rule 31 (statement -> print .)
    KEYWORD_DO      reduce using rule 31 (statement -> print .)
    KEYWORD_PRINT   reduce using rule 31 (statement -> print .)
    RBRACE          reduce using rule 31 (statement -> print .)
    RBRACKET        reduce using rule 31 (statement -> print .)


state 39

    (40) condition -> KEYWORD_IF . LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON

    LPAREN          shift and go to state 52


state 40

    (38) cycle -> KEYWORD_DO . cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (39) cuadr_do -> .

    LBRACE          reduce using rule 39 (cuadr_do -> .)

    cuadr_do                       shift and go to state 53

state 41

    (33) print -> KEYWORD_PRINT . LPAREN print_items RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 42

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN . parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON
    (19) parametros_opt -> . parametros
    (20) parametros_opt -> . empty
    (21) parametros -> . parametros COMMA ID COLON type
    (22) parametros -> . ID COLON type
    (71) empty -> .

    ID              shift and go to state 55
    RPAREN          reduce using rule 71 (empty -> .)

    parametros_opt                 shift and go to state 56
    parametros                     shift and go to state 57
    empty                          shift and go to state 58

state 43

    (7) var_list -> ID id_list COLON type .

    SEMICOLON       reduce using rule 7 (var_list -> ID id_list COLON type .)


state 44

    (10) type -> KEYWORD_INT .

    SEMICOLON       reduce using rule 10 (type -> KEYWORD_INT .)
    COMMA           reduce using rule 10 (type -> KEYWORD_INT .)
    RPAREN          reduce using rule 10 (type -> KEYWORD_INT .)


state 45

    (11) type -> KEYWORD_FLOAT .

    SEMICOLON       reduce using rule 11 (type -> KEYWORD_FLOAT .)
    COMMA           reduce using rule 11 (type -> KEYWORD_FLOAT .)
    RPAREN          reduce using rule 11 (type -> KEYWORD_FLOAT .)


state 46

    (12) type -> KEYWORD_STRING .

    SEMICOLON       reduce using rule 12 (type -> KEYWORD_STRING .)
    COMMA           reduce using rule 12 (type -> KEYWORD_STRING .)
    RPAREN          reduce using rule 12 (type -> KEYWORD_STRING .)


state 47

    (8) id_list -> COMMA ID id_list .

    COLON           reduce using rule 8 (id_list -> COMMA ID id_list .)


state 48

    (32) assign -> ID ASSIGN_SIGN . expresion SEMICOLON
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expresion                      shift and go to state 60
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 49

    (45) f_call -> ID LPAREN . expresion_list_opt RPAREN SEMICOLON
    (46) expresion_list_opt -> . expresion_list
    (47) expresion_list_opt -> . empty
    (48) expresion_list -> . expresion_list COMMA expresion
    (49) expresion_list -> . expresion
    (71) empty -> .
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    RPAREN          reduce using rule 71 (empty -> .)
    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expresion_list_opt             shift and go to state 70
    expresion_list                 shift and go to state 71
    empty                          shift and go to state 72
    expresion                      shift and go to state 73
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 50

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE . KEYWORD_END SEMICOLON

    KEYWORD_END     shift and go to state 74


state 51

    (24) statement_list -> statement statement_list .

    RBRACE          reduce using rule 24 (statement_list -> statement statement_list .)
    RBRACKET        reduce using rule 24 (statement_list -> statement statement_list .)


state 52

    (40) condition -> KEYWORD_IF LPAREN . expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expresion                      shift and go to state 75
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 53

    (38) cycle -> KEYWORD_DO cuadr_do . LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    LBRACE          shift and go to state 76


state 54

    (33) print -> KEYWORD_PRINT LPAREN . print_items RPAREN SEMICOLON
    (34) print_items -> . print_items COMMA print_item
    (35) print_items -> . print_item
    (36) print_item -> . expresion
    (37) print_item -> . CTE_STRING
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 80
    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    print_items                    shift and go to state 77
    print_item                     shift and go to state 78
    expresion                      shift and go to state 79
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 55

    (22) parametros -> ID . COLON type

    COLON           shift and go to state 81


state 56

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt . RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON

    RPAREN          shift and go to state 82


state 57

    (19) parametros_opt -> parametros .
    (21) parametros -> parametros . COMMA ID COLON type

    RPAREN          reduce using rule 19 (parametros_opt -> parametros .)
    COMMA           shift and go to state 83


state 58

    (20) parametros_opt -> empty .

    RPAREN          reduce using rule 20 (parametros_opt -> empty .)


state 59

    (68) varcte -> ID .

    OP_MUL          reduce using rule 68 (varcte -> ID .)
    OP_DIV          reduce using rule 68 (varcte -> ID .)
    OP_SUM          reduce using rule 68 (varcte -> ID .)
    OP_SUB          reduce using rule 68 (varcte -> ID .)
    LESS            reduce using rule 68 (varcte -> ID .)
    GREATER         reduce using rule 68 (varcte -> ID .)
    NOT_EQUAL       reduce using rule 68 (varcte -> ID .)
    EQUAL           reduce using rule 68 (varcte -> ID .)
    GREATER_EQUAL   reduce using rule 68 (varcte -> ID .)
    LESS_EQUAL      reduce using rule 68 (varcte -> ID .)
    SEMICOLON       reduce using rule 68 (varcte -> ID .)
    COMMA           reduce using rule 68 (varcte -> ID .)
    RPAREN          reduce using rule 68 (varcte -> ID .)


state 60

    (32) assign -> ID ASSIGN_SIGN expresion . SEMICOLON

    SEMICOLON       shift and go to state 84


state 61

    (50) expresion -> exp . comparador exp
    (51) expresion -> exp .
    (58) exp -> exp . OP_SUM termino
    (59) exp -> exp . OP_SUB termino
    (52) comparador -> . LESS
    (53) comparador -> . GREATER
    (54) comparador -> . NOT_EQUAL
    (55) comparador -> . EQUAL
    (56) comparador -> . GREATER_EQUAL
    (57) comparador -> . LESS_EQUAL

    SEMICOLON       reduce using rule 51 (expresion -> exp .)
    COMMA           reduce using rule 51 (expresion -> exp .)
    RPAREN          reduce using rule 51 (expresion -> exp .)
    OP_SUM          shift and go to state 86
    OP_SUB          shift and go to state 87
    LESS            shift and go to state 88
    GREATER         shift and go to state 89
    NOT_EQUAL       shift and go to state 90
    EQUAL           shift and go to state 91
    GREATER_EQUAL   shift and go to state 92
    LESS_EQUAL      shift and go to state 93

    comparador                     shift and go to state 85

state 62

    (65) factor -> OP_SUM . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    varcte                         shift and go to state 94

state 63

    (60) exp -> termino .
    (61) termino -> termino . OP_MUL factor
    (62) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 60 (exp -> termino .)
    OP_SUB          reduce using rule 60 (exp -> termino .)
    LESS            reduce using rule 60 (exp -> termino .)
    GREATER         reduce using rule 60 (exp -> termino .)
    NOT_EQUAL       reduce using rule 60 (exp -> termino .)
    EQUAL           reduce using rule 60 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 60 (exp -> termino .)
    LESS_EQUAL      reduce using rule 60 (exp -> termino .)
    SEMICOLON       reduce using rule 60 (exp -> termino .)
    COMMA           reduce using rule 60 (exp -> termino .)
    RPAREN          reduce using rule 60 (exp -> termino .)
    OP_MUL          shift and go to state 95
    OP_DIV          shift and go to state 96


state 64

    (66) factor -> OP_SUB . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    varcte                         shift and go to state 97

state 65

    (63) termino -> factor .

    OP_MUL          reduce using rule 63 (termino -> factor .)
    OP_DIV          reduce using rule 63 (termino -> factor .)
    OP_SUM          reduce using rule 63 (termino -> factor .)
    OP_SUB          reduce using rule 63 (termino -> factor .)
    LESS            reduce using rule 63 (termino -> factor .)
    GREATER         reduce using rule 63 (termino -> factor .)
    NOT_EQUAL       reduce using rule 63 (termino -> factor .)
    EQUAL           reduce using rule 63 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 63 (termino -> factor .)
    LESS_EQUAL      reduce using rule 63 (termino -> factor .)
    SEMICOLON       reduce using rule 63 (termino -> factor .)
    COMMA           reduce using rule 63 (termino -> factor .)
    RPAREN          reduce using rule 63 (termino -> factor .)


state 66

    (64) factor -> LPAREN . expresion RPAREN
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expresion                      shift and go to state 98
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 67

    (67) factor -> varcte .

    OP_MUL          reduce using rule 67 (factor -> varcte .)
    OP_DIV          reduce using rule 67 (factor -> varcte .)
    OP_SUM          reduce using rule 67 (factor -> varcte .)
    OP_SUB          reduce using rule 67 (factor -> varcte .)
    LESS            reduce using rule 67 (factor -> varcte .)
    GREATER         reduce using rule 67 (factor -> varcte .)
    NOT_EQUAL       reduce using rule 67 (factor -> varcte .)
    EQUAL           reduce using rule 67 (factor -> varcte .)
    GREATER_EQUAL   reduce using rule 67 (factor -> varcte .)
    LESS_EQUAL      reduce using rule 67 (factor -> varcte .)
    SEMICOLON       reduce using rule 67 (factor -> varcte .)
    COMMA           reduce using rule 67 (factor -> varcte .)
    RPAREN          reduce using rule 67 (factor -> varcte .)


state 68

    (69) varcte -> CTE_INT .

    OP_MUL          reduce using rule 69 (varcte -> CTE_INT .)
    OP_DIV          reduce using rule 69 (varcte -> CTE_INT .)
    OP_SUM          reduce using rule 69 (varcte -> CTE_INT .)
    OP_SUB          reduce using rule 69 (varcte -> CTE_INT .)
    LESS            reduce using rule 69 (varcte -> CTE_INT .)
    GREATER         reduce using rule 69 (varcte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 69 (varcte -> CTE_INT .)
    EQUAL           reduce using rule 69 (varcte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 69 (varcte -> CTE_INT .)
    LESS_EQUAL      reduce using rule 69 (varcte -> CTE_INT .)
    SEMICOLON       reduce using rule 69 (varcte -> CTE_INT .)
    COMMA           reduce using rule 69 (varcte -> CTE_INT .)
    RPAREN          reduce using rule 69 (varcte -> CTE_INT .)


state 69

    (70) varcte -> CTE_FLOAT .

    OP_MUL          reduce using rule 70 (varcte -> CTE_FLOAT .)
    OP_DIV          reduce using rule 70 (varcte -> CTE_FLOAT .)
    OP_SUM          reduce using rule 70 (varcte -> CTE_FLOAT .)
    OP_SUB          reduce using rule 70 (varcte -> CTE_FLOAT .)
    LESS            reduce using rule 70 (varcte -> CTE_FLOAT .)
    GREATER         reduce using rule 70 (varcte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 70 (varcte -> CTE_FLOAT .)
    EQUAL           reduce using rule 70 (varcte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 70 (varcte -> CTE_FLOAT .)
    LESS_EQUAL      reduce using rule 70 (varcte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 70 (varcte -> CTE_FLOAT .)
    COMMA           reduce using rule 70 (varcte -> CTE_FLOAT .)
    RPAREN          reduce using rule 70 (varcte -> CTE_FLOAT .)


state 70

    (45) f_call -> ID LPAREN expresion_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 99


state 71

    (46) expresion_list_opt -> expresion_list .
    (48) expresion_list -> expresion_list . COMMA expresion

    RPAREN          reduce using rule 46 (expresion_list_opt -> expresion_list .)
    COMMA           shift and go to state 100


state 72

    (47) expresion_list_opt -> empty .

    RPAREN          reduce using rule 47 (expresion_list_opt -> empty .)


state 73

    (49) expresion_list -> expresion .

    COMMA           reduce using rule 49 (expresion_list -> expresion .)
    RPAREN          reduce using rule 49 (expresion_list -> expresion .)


state 74

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END . SEMICOLON

    SEMICOLON       shift and go to state 101


state 75

    (40) condition -> KEYWORD_IF LPAREN expresion . RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON

    RPAREN          shift and go to state 102


state 76

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE . body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (23) body -> . statement_list
    (24) statement_list -> . statement statement_list
    (25) statement_list -> . statement
    (26) statement_list -> . empty
    (27) statement -> . assign
    (28) statement -> . condition
    (29) statement -> . cycle
    (30) statement -> . f_call
    (31) statement -> . print
    (71) empty -> .
    (32) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (40) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (38) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (45) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (33) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 71 (empty -> .)
    ID              shift and go to state 29
    KEYWORD_IF      shift and go to state 39
    KEYWORD_DO      shift and go to state 40
    KEYWORD_PRINT   shift and go to state 41

    body                           shift and go to state 103
    statement_list                 shift and go to state 31
    statement                      shift and go to state 32
    empty                          shift and go to state 33
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 77

    (33) print -> KEYWORD_PRINT LPAREN print_items . RPAREN SEMICOLON
    (34) print_items -> print_items . COMMA print_item

    RPAREN          shift and go to state 104
    COMMA           shift and go to state 105


state 78

    (35) print_items -> print_item .

    RPAREN          reduce using rule 35 (print_items -> print_item .)
    COMMA           reduce using rule 35 (print_items -> print_item .)


state 79

    (36) print_item -> expresion .

    RPAREN          reduce using rule 36 (print_item -> expresion .)
    COMMA           reduce using rule 36 (print_item -> expresion .)


state 80

    (37) print_item -> CTE_STRING .

    RPAREN          reduce using rule 37 (print_item -> CTE_STRING .)
    COMMA           reduce using rule 37 (print_item -> CTE_STRING .)


state 81

    (22) parametros -> ID COLON . type
    (10) type -> . KEYWORD_INT
    (11) type -> . KEYWORD_FLOAT
    (12) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 44
    KEYWORD_FLOAT   shift and go to state 45
    KEYWORD_STRING  shift and go to state 46

    type                           shift and go to state 106

state 82

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN . LBRACKET vars_opt body RBRACKET func_end SEMICOLON

    LBRACKET        shift and go to state 107


state 83

    (21) parametros -> parametros COMMA . ID COLON type

    ID              shift and go to state 108


state 84

    (32) assign -> ID ASSIGN_SIGN expresion SEMICOLON .

    ID              reduce using rule 32 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_IF      reduce using rule 32 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_DO      reduce using rule 32 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 32 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    RBRACE          reduce using rule 32 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    RBRACKET        reduce using rule 32 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)


state 85

    (50) expresion -> exp comparador . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    exp                            shift and go to state 109
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 86

    (58) exp -> exp OP_SUM . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    termino                        shift and go to state 110
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 87

    (59) exp -> exp OP_SUB . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    termino                        shift and go to state 111
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 88

    (52) comparador -> LESS .

    LPAREN          reduce using rule 52 (comparador -> LESS .)
    OP_SUM          reduce using rule 52 (comparador -> LESS .)
    OP_SUB          reduce using rule 52 (comparador -> LESS .)
    ID              reduce using rule 52 (comparador -> LESS .)
    CTE_INT         reduce using rule 52 (comparador -> LESS .)
    CTE_FLOAT       reduce using rule 52 (comparador -> LESS .)


state 89

    (53) comparador -> GREATER .

    LPAREN          reduce using rule 53 (comparador -> GREATER .)
    OP_SUM          reduce using rule 53 (comparador -> GREATER .)
    OP_SUB          reduce using rule 53 (comparador -> GREATER .)
    ID              reduce using rule 53 (comparador -> GREATER .)
    CTE_INT         reduce using rule 53 (comparador -> GREATER .)
    CTE_FLOAT       reduce using rule 53 (comparador -> GREATER .)


state 90

    (54) comparador -> NOT_EQUAL .

    LPAREN          reduce using rule 54 (comparador -> NOT_EQUAL .)
    OP_SUM          reduce using rule 54 (comparador -> NOT_EQUAL .)
    OP_SUB          reduce using rule 54 (comparador -> NOT_EQUAL .)
    ID              reduce using rule 54 (comparador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 54 (comparador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 54 (comparador -> NOT_EQUAL .)


state 91

    (55) comparador -> EQUAL .

    LPAREN          reduce using rule 55 (comparador -> EQUAL .)
    OP_SUM          reduce using rule 55 (comparador -> EQUAL .)
    OP_SUB          reduce using rule 55 (comparador -> EQUAL .)
    ID              reduce using rule 55 (comparador -> EQUAL .)
    CTE_INT         reduce using rule 55 (comparador -> EQUAL .)
    CTE_FLOAT       reduce using rule 55 (comparador -> EQUAL .)


state 92

    (56) comparador -> GREATER_EQUAL .

    LPAREN          reduce using rule 56 (comparador -> GREATER_EQUAL .)
    OP_SUM          reduce using rule 56 (comparador -> GREATER_EQUAL .)
    OP_SUB          reduce using rule 56 (comparador -> GREATER_EQUAL .)
    ID              reduce using rule 56 (comparador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 56 (comparador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 56 (comparador -> GREATER_EQUAL .)


state 93

    (57) comparador -> LESS_EQUAL .

    LPAREN          reduce using rule 57 (comparador -> LESS_EQUAL .)
    OP_SUM          reduce using rule 57 (comparador -> LESS_EQUAL .)
    OP_SUB          reduce using rule 57 (comparador -> LESS_EQUAL .)
    ID              reduce using rule 57 (comparador -> LESS_EQUAL .)
    CTE_INT         reduce using rule 57 (comparador -> LESS_EQUAL .)
    CTE_FLOAT       reduce using rule 57 (comparador -> LESS_EQUAL .)


state 94

    (65) factor -> OP_SUM varcte .

    OP_MUL          reduce using rule 65 (factor -> OP_SUM varcte .)
    OP_DIV          reduce using rule 65 (factor -> OP_SUM varcte .)
    OP_SUM          reduce using rule 65 (factor -> OP_SUM varcte .)
    OP_SUB          reduce using rule 65 (factor -> OP_SUM varcte .)
    LESS            reduce using rule 65 (factor -> OP_SUM varcte .)
    GREATER         reduce using rule 65 (factor -> OP_SUM varcte .)
    NOT_EQUAL       reduce using rule 65 (factor -> OP_SUM varcte .)
    EQUAL           reduce using rule 65 (factor -> OP_SUM varcte .)
    GREATER_EQUAL   reduce using rule 65 (factor -> OP_SUM varcte .)
    LESS_EQUAL      reduce using rule 65 (factor -> OP_SUM varcte .)
    SEMICOLON       reduce using rule 65 (factor -> OP_SUM varcte .)
    COMMA           reduce using rule 65 (factor -> OP_SUM varcte .)
    RPAREN          reduce using rule 65 (factor -> OP_SUM varcte .)


state 95

    (61) termino -> termino OP_MUL . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    factor                         shift and go to state 112
    varcte                         shift and go to state 67

state 96

    (62) termino -> termino OP_DIV . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    factor                         shift and go to state 113
    varcte                         shift and go to state 67

state 97

    (66) factor -> OP_SUB varcte .

    OP_MUL          reduce using rule 66 (factor -> OP_SUB varcte .)
    OP_DIV          reduce using rule 66 (factor -> OP_SUB varcte .)
    OP_SUM          reduce using rule 66 (factor -> OP_SUB varcte .)
    OP_SUB          reduce using rule 66 (factor -> OP_SUB varcte .)
    LESS            reduce using rule 66 (factor -> OP_SUB varcte .)
    GREATER         reduce using rule 66 (factor -> OP_SUB varcte .)
    NOT_EQUAL       reduce using rule 66 (factor -> OP_SUB varcte .)
    EQUAL           reduce using rule 66 (factor -> OP_SUB varcte .)
    GREATER_EQUAL   reduce using rule 66 (factor -> OP_SUB varcte .)
    LESS_EQUAL      reduce using rule 66 (factor -> OP_SUB varcte .)
    SEMICOLON       reduce using rule 66 (factor -> OP_SUB varcte .)
    COMMA           reduce using rule 66 (factor -> OP_SUB varcte .)
    RPAREN          reduce using rule 66 (factor -> OP_SUB varcte .)


state 98

    (64) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 114


state 99

    (45) f_call -> ID LPAREN expresion_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 115


state 100

    (48) expresion_list -> expresion_list COMMA . expresion
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expresion                      shift and go to state 116
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 101

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON .

    $end            reduce using rule 1 (Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON .)


state 102

    (40) condition -> KEYWORD_IF LPAREN expresion RPAREN . cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (41) cuadr_if -> .

    LBRACE          reduce using rule 41 (cuadr_if -> .)

    cuadr_if                       shift and go to state 117

state 103

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE body . RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    RBRACE          shift and go to state 118


state 104

    (33) print -> KEYWORD_PRINT LPAREN print_items RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 119


state 105

    (34) print_items -> print_items COMMA . print_item
    (36) print_item -> . expresion
    (37) print_item -> . CTE_STRING
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 80
    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    print_item                     shift and go to state 120
    expresion                      shift and go to state 79
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 106

    (22) parametros -> ID COLON type .

    COMMA           reduce using rule 22 (parametros -> ID COLON type .)
    RPAREN          reduce using rule 22 (parametros -> ID COLON type .)


state 107

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET . vars_opt body RBRACKET func_end SEMICOLON
    (3) vars_opt -> . KEYWORD_VAR var_lines
    (4) vars_opt -> . empty
    (71) empty -> .

    KEYWORD_VAR     shift and go to state 6
    ID              reduce using rule 71 (empty -> .)
    KEYWORD_IF      reduce using rule 71 (empty -> .)
    KEYWORD_DO      reduce using rule 71 (empty -> .)
    KEYWORD_PRINT   reduce using rule 71 (empty -> .)
    RBRACKET        reduce using rule 71 (empty -> .)

    vars_opt                       shift and go to state 121
    empty                          shift and go to state 7

state 108

    (21) parametros -> parametros COMMA ID . COLON type

    COLON           shift and go to state 122


state 109

    (50) expresion -> exp comparador exp .
    (58) exp -> exp . OP_SUM termino
    (59) exp -> exp . OP_SUB termino

    SEMICOLON       reduce using rule 50 (expresion -> exp comparador exp .)
    COMMA           reduce using rule 50 (expresion -> exp comparador exp .)
    RPAREN          reduce using rule 50 (expresion -> exp comparador exp .)
    OP_SUM          shift and go to state 86
    OP_SUB          shift and go to state 87


state 110

    (58) exp -> exp OP_SUM termino .
    (61) termino -> termino . OP_MUL factor
    (62) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 58 (exp -> exp OP_SUM termino .)
    OP_SUB          reduce using rule 58 (exp -> exp OP_SUM termino .)
    LESS            reduce using rule 58 (exp -> exp OP_SUM termino .)
    GREATER         reduce using rule 58 (exp -> exp OP_SUM termino .)
    NOT_EQUAL       reduce using rule 58 (exp -> exp OP_SUM termino .)
    EQUAL           reduce using rule 58 (exp -> exp OP_SUM termino .)
    GREATER_EQUAL   reduce using rule 58 (exp -> exp OP_SUM termino .)
    LESS_EQUAL      reduce using rule 58 (exp -> exp OP_SUM termino .)
    SEMICOLON       reduce using rule 58 (exp -> exp OP_SUM termino .)
    COMMA           reduce using rule 58 (exp -> exp OP_SUM termino .)
    RPAREN          reduce using rule 58 (exp -> exp OP_SUM termino .)
    OP_MUL          shift and go to state 95
    OP_DIV          shift and go to state 96


state 111

    (59) exp -> exp OP_SUB termino .
    (61) termino -> termino . OP_MUL factor
    (62) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 59 (exp -> exp OP_SUB termino .)
    OP_SUB          reduce using rule 59 (exp -> exp OP_SUB termino .)
    LESS            reduce using rule 59 (exp -> exp OP_SUB termino .)
    GREATER         reduce using rule 59 (exp -> exp OP_SUB termino .)
    NOT_EQUAL       reduce using rule 59 (exp -> exp OP_SUB termino .)
    EQUAL           reduce using rule 59 (exp -> exp OP_SUB termino .)
    GREATER_EQUAL   reduce using rule 59 (exp -> exp OP_SUB termino .)
    LESS_EQUAL      reduce using rule 59 (exp -> exp OP_SUB termino .)
    SEMICOLON       reduce using rule 59 (exp -> exp OP_SUB termino .)
    COMMA           reduce using rule 59 (exp -> exp OP_SUB termino .)
    RPAREN          reduce using rule 59 (exp -> exp OP_SUB termino .)
    OP_MUL          shift and go to state 95
    OP_DIV          shift and go to state 96


state 112

    (61) termino -> termino OP_MUL factor .

    OP_MUL          reduce using rule 61 (termino -> termino OP_MUL factor .)
    OP_DIV          reduce using rule 61 (termino -> termino OP_MUL factor .)
    OP_SUM          reduce using rule 61 (termino -> termino OP_MUL factor .)
    OP_SUB          reduce using rule 61 (termino -> termino OP_MUL factor .)
    LESS            reduce using rule 61 (termino -> termino OP_MUL factor .)
    GREATER         reduce using rule 61 (termino -> termino OP_MUL factor .)
    NOT_EQUAL       reduce using rule 61 (termino -> termino OP_MUL factor .)
    EQUAL           reduce using rule 61 (termino -> termino OP_MUL factor .)
    GREATER_EQUAL   reduce using rule 61 (termino -> termino OP_MUL factor .)
    LESS_EQUAL      reduce using rule 61 (termino -> termino OP_MUL factor .)
    SEMICOLON       reduce using rule 61 (termino -> termino OP_MUL factor .)
    COMMA           reduce using rule 61 (termino -> termino OP_MUL factor .)
    RPAREN          reduce using rule 61 (termino -> termino OP_MUL factor .)


state 113

    (62) termino -> termino OP_DIV factor .

    OP_MUL          reduce using rule 62 (termino -> termino OP_DIV factor .)
    OP_DIV          reduce using rule 62 (termino -> termino OP_DIV factor .)
    OP_SUM          reduce using rule 62 (termino -> termino OP_DIV factor .)
    OP_SUB          reduce using rule 62 (termino -> termino OP_DIV factor .)
    LESS            reduce using rule 62 (termino -> termino OP_DIV factor .)
    GREATER         reduce using rule 62 (termino -> termino OP_DIV factor .)
    NOT_EQUAL       reduce using rule 62 (termino -> termino OP_DIV factor .)
    EQUAL           reduce using rule 62 (termino -> termino OP_DIV factor .)
    GREATER_EQUAL   reduce using rule 62 (termino -> termino OP_DIV factor .)
    LESS_EQUAL      reduce using rule 62 (termino -> termino OP_DIV factor .)
    SEMICOLON       reduce using rule 62 (termino -> termino OP_DIV factor .)
    COMMA           reduce using rule 62 (termino -> termino OP_DIV factor .)
    RPAREN          reduce using rule 62 (termino -> termino OP_DIV factor .)


state 114

    (64) factor -> LPAREN expresion RPAREN .

    OP_MUL          reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    OP_DIV          reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    OP_SUM          reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    OP_SUB          reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    LESS            reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    NOT_EQUAL       reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    EQUAL           reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    GREATER_EQUAL   reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    LESS_EQUAL      reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 64 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 64 (factor -> LPAREN expresion RPAREN .)


state 115

    (45) f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .

    ID              reduce using rule 45 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 45 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 45 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 45 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 45 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 45 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)


state 116

    (48) expresion_list -> expresion_list COMMA expresion .

    COMMA           reduce using rule 48 (expresion_list -> expresion_list COMMA expresion .)
    RPAREN          reduce using rule 48 (expresion_list -> expresion_list COMMA expresion .)


state 117

    (40) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if . LBRACE body RBRACE else_arg SEMICOLON

    LBRACE          shift and go to state 123


state 118

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE . KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    KEYWORD_WHILE   shift and go to state 124


state 119

    (33) print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .

    ID              reduce using rule 33 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 33 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 33 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 33 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    RBRACE          reduce using rule 33 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 33 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)


state 120

    (34) print_items -> print_items COMMA print_item .

    RPAREN          reduce using rule 34 (print_items -> print_items COMMA print_item .)
    COMMA           reduce using rule 34 (print_items -> print_items COMMA print_item .)


state 121

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt . body RBRACKET func_end SEMICOLON
    (23) body -> . statement_list
    (24) statement_list -> . statement statement_list
    (25) statement_list -> . statement
    (26) statement_list -> . empty
    (27) statement -> . assign
    (28) statement -> . condition
    (29) statement -> . cycle
    (30) statement -> . f_call
    (31) statement -> . print
    (71) empty -> .
    (32) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (40) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (38) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (45) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (33) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACKET        reduce using rule 71 (empty -> .)
    ID              shift and go to state 29
    KEYWORD_IF      shift and go to state 39
    KEYWORD_DO      shift and go to state 40
    KEYWORD_PRINT   shift and go to state 41

    body                           shift and go to state 125
    statement_list                 shift and go to state 31
    statement                      shift and go to state 32
    empty                          shift and go to state 33
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 122

    (21) parametros -> parametros COMMA ID COLON . type
    (10) type -> . KEYWORD_INT
    (11) type -> . KEYWORD_FLOAT
    (12) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 44
    KEYWORD_FLOAT   shift and go to state 45
    KEYWORD_STRING  shift and go to state 46

    type                           shift and go to state 126

state 123

    (40) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE . body RBRACE else_arg SEMICOLON
    (23) body -> . statement_list
    (24) statement_list -> . statement statement_list
    (25) statement_list -> . statement
    (26) statement_list -> . empty
    (27) statement -> . assign
    (28) statement -> . condition
    (29) statement -> . cycle
    (30) statement -> . f_call
    (31) statement -> . print
    (71) empty -> .
    (32) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (40) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (38) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (45) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (33) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 71 (empty -> .)
    ID              shift and go to state 29
    KEYWORD_IF      shift and go to state 39
    KEYWORD_DO      shift and go to state 40
    KEYWORD_PRINT   shift and go to state 41

    body                           shift and go to state 127
    statement_list                 shift and go to state 31
    statement                      shift and go to state 32
    empty                          shift and go to state 33
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 124

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 128


state 125

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body . RBRACKET func_end SEMICOLON

    RBRACKET        shift and go to state 129


state 126

    (21) parametros -> parametros COMMA ID COLON type .

    COMMA           reduce using rule 21 (parametros -> parametros COMMA ID COLON type .)
    RPAREN          reduce using rule 21 (parametros -> parametros COMMA ID COLON type .)


state 127

    (40) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body . RBRACE else_arg SEMICOLON

    RBRACE          shift and go to state 130


state 128

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN . expresion RPAREN SEMICOLON
    (50) expresion -> . exp comparador exp
    (51) expresion -> . exp
    (58) exp -> . exp OP_SUM termino
    (59) exp -> . exp OP_SUB termino
    (60) exp -> . termino
    (61) termino -> . termino OP_MUL factor
    (62) termino -> . termino OP_DIV factor
    (63) termino -> . factor
    (64) factor -> . LPAREN expresion RPAREN
    (65) factor -> . OP_SUM varcte
    (66) factor -> . OP_SUB varcte
    (67) factor -> . varcte
    (68) varcte -> . ID
    (69) varcte -> . CTE_INT
    (70) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 66
    OP_SUM          shift and go to state 62
    OP_SUB          shift and go to state 64
    ID              shift and go to state 59
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expresion                      shift and go to state 131
    exp                            shift and go to state 61
    termino                        shift and go to state 63
    factor                         shift and go to state 65
    varcte                         shift and go to state 67

state 129

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET . func_end SEMICOLON
    (18) func_end -> .

    SEMICOLON       reduce using rule 18 (func_end -> .)

    func_end                       shift and go to state 132

state 130

    (40) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE . else_arg SEMICOLON
    (42) else_arg -> . KEYWORD_ELSE cuadr_else LBRACE body RBRACE
    (44) else_arg -> . empty
    (71) empty -> .

    KEYWORD_ELSE    shift and go to state 134
    SEMICOLON       reduce using rule 71 (empty -> .)

    else_arg                       shift and go to state 133
    empty                          shift and go to state 135

state 131

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 136


state 132

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end . SEMICOLON

    SEMICOLON       shift and go to state 137


state 133

    (40) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg . SEMICOLON

    SEMICOLON       shift and go to state 138


state 134

    (42) else_arg -> KEYWORD_ELSE . cuadr_else LBRACE body RBRACE
    (43) cuadr_else -> .

    LBRACE          reduce using rule 43 (cuadr_else -> .)

    cuadr_else                     shift and go to state 139

state 135

    (44) else_arg -> empty .

    SEMICOLON       reduce using rule 44 (else_arg -> empty .)


state 136

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 140


state 137

    (16) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON .

    KEYWORD_MAIN    reduce using rule 16 (FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON .)
    KEYWORD_VOID    reduce using rule 16 (FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON .)


state 138

    (40) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .

    ID              reduce using rule 40 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_IF      reduce using rule 40 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_DO      reduce using rule 40 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 40 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    RBRACE          reduce using rule 40 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    RBRACKET        reduce using rule 40 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)


state 139

    (42) else_arg -> KEYWORD_ELSE cuadr_else . LBRACE body RBRACE

    LBRACE          shift and go to state 141


state 140

    (38) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .

    ID              reduce using rule 38 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 38 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 38 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 38 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    RBRACE          reduce using rule 38 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 38 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)


state 141

    (42) else_arg -> KEYWORD_ELSE cuadr_else LBRACE . body RBRACE
    (23) body -> . statement_list
    (24) statement_list -> . statement statement_list
    (25) statement_list -> . statement
    (26) statement_list -> . empty
    (27) statement -> . assign
    (28) statement -> . condition
    (29) statement -> . cycle
    (30) statement -> . f_call
    (31) statement -> . print
    (71) empty -> .
    (32) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (40) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (38) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (45) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (33) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 71 (empty -> .)
    ID              shift and go to state 29
    KEYWORD_IF      shift and go to state 39
    KEYWORD_DO      shift and go to state 40
    KEYWORD_PRINT   shift and go to state 41

    body                           shift and go to state 142
    statement_list                 shift and go to state 31
    statement                      shift and go to state 32
    empty                          shift and go to state 33
    assign                         shift and go to state 34
    condition                      shift and go to state 35
    cycle                          shift and go to state 36
    f_call                         shift and go to state 37
    print                          shift and go to state 38

state 142

    (42) else_arg -> KEYWORD_ELSE cuadr_else LBRACE body . RBRACE

    RBRACE          shift and go to state 143


state 143

    (42) else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE .

    SEMICOLON       reduce using rule 42 (else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KEYWORD_VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for ID in state 12 resolved as shift
WARNING: reduce/reduce conflict in state 32 resolved using rule (statement_list -> statement)
WARNING: rejected rule (empty -> <empty>) in state 32
