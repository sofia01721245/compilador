Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
Rule 2     main_marker -> KEYWORD_MAIN
Rule 3     vars_opt -> var_block
Rule 4     vars_opt -> empty
Rule 5     var_block -> KEYWORD_VAR var_lines
Rule 6     var_lines -> var_lines var_list SEMICOLON
Rule 7     var_lines -> var_list SEMICOLON
Rule 8     var_list -> ID id_list COLON type
Rule 9     id_list -> COMMA ID id_list
Rule 10    id_list -> empty
Rule 11    type -> KEYWORD_INT
Rule 12    type -> KEYWORD_FLOAT
Rule 13    type -> KEYWORD_STRING
Rule 14    funcs_opt -> funcs_opt FUNCS
Rule 15    funcs_opt -> FUNCS
Rule 16    funcs_opt -> empty
Rule 17    FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON
Rule 18    func_start -> <empty>
Rule 19    func_end -> <empty>
Rule 20    parametros_opt -> parametros
Rule 21    parametros_opt -> empty
Rule 22    parametros -> parametros COMMA ID COLON type
Rule 23    parametros -> ID COLON type
Rule 24    body -> statement_list
Rule 25    statement_list -> statement statement_list
Rule 26    statement_list -> statement
Rule 27    statement_list -> empty
Rule 28    statement -> assign
Rule 29    statement -> condition
Rule 30    statement -> cycle
Rule 31    statement -> f_call
Rule 32    statement -> print
Rule 33    assign -> ID ASSIGN_SIGN expresion SEMICOLON
Rule 34    print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON
Rule 35    print_items -> print_items COMMA print_item
Rule 36    print_items -> print_item
Rule 37    print_item -> expresion
Rule 38    print_item -> varcte
Rule 39    cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
Rule 40    cuadr_do -> <empty>
Rule 41    condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
Rule 42    cuadr_if -> <empty>
Rule 43    else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE
Rule 44    cuadr_else -> <empty>
Rule 45    else_arg -> empty
Rule 46    f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON
Rule 47    expresion_list_opt -> expresion_list
Rule 48    expresion_list_opt -> empty
Rule 49    expresion_list -> expresion_list COMMA expresion
Rule 50    expresion_list -> expresion
Rule 51    expresion -> exp comparador exp
Rule 52    expresion -> exp
Rule 53    comparador -> LESS
Rule 54    comparador -> GREATER
Rule 55    comparador -> NOT_EQUAL
Rule 56    comparador -> EQUAL
Rule 57    comparador -> GREATER_EQUAL
Rule 58    comparador -> LESS_EQUAL
Rule 59    exp -> exp OP_SUM termino
Rule 60    exp -> exp OP_SUB termino
Rule 61    exp -> termino
Rule 62    termino -> termino OP_MUL factor
Rule 63    termino -> termino OP_DIV factor
Rule 64    termino -> factor
Rule 65    factor -> LPAREN expresion RPAREN
Rule 66    factor -> OP_SUM varcte
Rule 67    factor -> OP_SUB varcte
Rule 68    factor -> varcte
Rule 69    varcte -> ID
Rule 70    varcte -> CTE_INT
Rule 71    varcte -> CTE_FLOAT
Rule 72    varcte -> CTE_STRING
Rule 73    empty -> <empty>

Terminals, with rules where they appear

ASSIGN_SIGN          : 33
COLON                : 8 22 23
COMMA                : 9 22 35 49
CTE_FLOAT            : 71
CTE_INT              : 70
CTE_STRING           : 72
EQUAL                : 56
GREATER              : 54
GREATER_EQUAL        : 57
ID                   : 1 8 9 17 22 23 33 46 69
KEYWORD_DO           : 39
KEYWORD_ELSE         : 43
KEYWORD_END          : 1
KEYWORD_FLOAT        : 12
KEYWORD_IF           : 41
KEYWORD_INT          : 11
KEYWORD_MAIN         : 2
KEYWORD_PRINT        : 34
KEYWORD_PROGRAM      : 1
KEYWORD_STRING       : 13
KEYWORD_VAR          : 5
KEYWORD_VOID         : 17
KEYWORD_WHILE        : 39
LBRACE               : 1 17 39 41 43
LBRACKET             : 17
LESS                 : 53
LESS_EQUAL           : 58
LPAREN               : 17 34 39 41 46 65
NOT_EQUAL            : 55
OP_DIV               : 63
OP_MUL               : 62
OP_SUB               : 60 67
OP_SUM               : 59 66
RBRACE               : 1 17 39 41 43
RBRACKET             : 17
RPAREN               : 17 34 39 41 46 65
SEMICOLON            : 1 1 6 7 17 33 34 39 41 46
error                : 

Nonterminals, with rules where they appear

FUNCS                : 14 15
Programa             : 0
assign               : 28
body                 : 1 17 39 41 43
comparador           : 51
condition            : 29
cuadr_do             : 39
cuadr_else           : 43
cuadr_if             : 41
cycle                : 30
else_arg             : 41
empty                : 4 10 16 21 27 45 48
exp                  : 51 51 52 59 60
expresion            : 33 37 39 41 49 50 65
expresion_list       : 47 49
expresion_list_opt   : 46
f_call               : 31
factor               : 62 63 64
func_end             : 17
func_start           : 17
funcs_opt            : 1 14
id_list              : 8 9
main_marker          : 1
parametros           : 20 22
parametros_opt       : 17
print                : 32
print_item           : 35 36
print_items          : 34 35
statement            : 25 26
statement_list       : 24 25
termino              : 59 60 61 62 63
type                 : 8 22 23
var_block            : 3
var_lines            : 5 6
var_list             : 6 7
varcte               : 38 66 67 68
vars_opt             : 1 17

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON

    KEYWORD_PROGRAM shift and go to state 2

    Programa                       shift and go to state 1

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> KEYWORD_PROGRAM . ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) Programa -> KEYWORD_PROGRAM ID . SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON . vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
    (3) vars_opt -> . var_block
    (4) vars_opt -> . empty
    (5) var_block -> . KEYWORD_VAR var_lines
    (73) empty -> .

    KEYWORD_VAR     shift and go to state 8
    KEYWORD_VOID    reduce using rule 73 (empty -> .)
    KEYWORD_MAIN    reduce using rule 73 (empty -> .)

    vars_opt                       shift and go to state 5
    var_block                      shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt . funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
    (14) funcs_opt -> . funcs_opt FUNCS
    (15) funcs_opt -> . FUNCS
    (16) funcs_opt -> . empty
    (17) FUNCS -> . KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON
    (73) empty -> .

  ! shift/reduce conflict for KEYWORD_VOID resolved as shift
    KEYWORD_VOID    shift and go to state 12
    KEYWORD_MAIN    reduce using rule 73 (empty -> .)

  ! KEYWORD_VOID    [ reduce using rule 73 (empty -> .) ]

    funcs_opt                      shift and go to state 9
    FUNCS                          shift and go to state 10
    empty                          shift and go to state 11

state 6

    (3) vars_opt -> var_block .

    KEYWORD_VOID    reduce using rule 3 (vars_opt -> var_block .)
    KEYWORD_MAIN    reduce using rule 3 (vars_opt -> var_block .)
    LBRACE          reduce using rule 3 (vars_opt -> var_block .)


state 7

    (4) vars_opt -> empty .

    KEYWORD_VOID    reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_MAIN    reduce using rule 4 (vars_opt -> empty .)
    LBRACE          reduce using rule 4 (vars_opt -> empty .)


state 8

    (5) var_block -> KEYWORD_VAR . var_lines
    (6) var_lines -> . var_lines var_list SEMICOLON
    (7) var_lines -> . var_list SEMICOLON
    (8) var_list -> . ID id_list COLON type

    ID              shift and go to state 15

    var_lines                      shift and go to state 13
    var_list                       shift and go to state 14

state 9

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt . main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON
    (14) funcs_opt -> funcs_opt . FUNCS
    (2) main_marker -> . KEYWORD_MAIN
    (17) FUNCS -> . KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON

    KEYWORD_MAIN    shift and go to state 18
    KEYWORD_VOID    shift and go to state 12

    main_marker                    shift and go to state 16
    FUNCS                          shift and go to state 17

state 10

    (15) funcs_opt -> FUNCS .

    KEYWORD_MAIN    reduce using rule 15 (funcs_opt -> FUNCS .)
    KEYWORD_VOID    reduce using rule 15 (funcs_opt -> FUNCS .)


state 11

    (16) funcs_opt -> empty .

    KEYWORD_MAIN    reduce using rule 16 (funcs_opt -> empty .)
    KEYWORD_VOID    reduce using rule 16 (funcs_opt -> empty .)


state 12

    (17) FUNCS -> KEYWORD_VOID . ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON

    ID              shift and go to state 19


state 13

    (5) var_block -> KEYWORD_VAR var_lines .
    (6) var_lines -> var_lines . var_list SEMICOLON
    (8) var_list -> . ID id_list COLON type

    KEYWORD_VOID    reduce using rule 5 (var_block -> KEYWORD_VAR var_lines .)
    KEYWORD_MAIN    reduce using rule 5 (var_block -> KEYWORD_VAR var_lines .)
    LBRACE          reduce using rule 5 (var_block -> KEYWORD_VAR var_lines .)
    ID              shift and go to state 15

    var_list                       shift and go to state 20

state 14

    (7) var_lines -> var_list . SEMICOLON

    SEMICOLON       shift and go to state 21


state 15

    (8) var_list -> ID . id_list COLON type
    (9) id_list -> . COMMA ID id_list
    (10) id_list -> . empty
    (73) empty -> .

    COMMA           shift and go to state 23
    COLON           reduce using rule 73 (empty -> .)

    id_list                        shift and go to state 22
    empty                          shift and go to state 24

state 16

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker . LBRACE body RBRACE KEYWORD_END SEMICOLON

    LBRACE          shift and go to state 25


state 17

    (14) funcs_opt -> funcs_opt FUNCS .

    KEYWORD_MAIN    reduce using rule 14 (funcs_opt -> funcs_opt FUNCS .)
    KEYWORD_VOID    reduce using rule 14 (funcs_opt -> funcs_opt FUNCS .)


state 18

    (2) main_marker -> KEYWORD_MAIN .

    LBRACE          reduce using rule 2 (main_marker -> KEYWORD_MAIN .)


state 19

    (17) FUNCS -> KEYWORD_VOID ID . func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON
    (18) func_start -> .

    LPAREN          reduce using rule 18 (func_start -> .)

    func_start                     shift and go to state 26

state 20

    (6) var_lines -> var_lines var_list . SEMICOLON

    SEMICOLON       shift and go to state 27


state 21

    (7) var_lines -> var_list SEMICOLON .

    ID              reduce using rule 7 (var_lines -> var_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 7 (var_lines -> var_list SEMICOLON .)
    KEYWORD_MAIN    reduce using rule 7 (var_lines -> var_list SEMICOLON .)
    LBRACE          reduce using rule 7 (var_lines -> var_list SEMICOLON .)


state 22

    (8) var_list -> ID id_list . COLON type

    COLON           shift and go to state 28


state 23

    (9) id_list -> COMMA . ID id_list

    ID              shift and go to state 29


state 24

    (10) id_list -> empty .

    COLON           reduce using rule 10 (id_list -> empty .)


state 25

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE . body RBRACE KEYWORD_END SEMICOLON
    (24) body -> . statement_list
    (25) statement_list -> . statement statement_list
    (26) statement_list -> . statement
    (27) statement_list -> . empty
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print
    (73) empty -> .
    (33) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (41) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (39) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (46) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (34) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 73 (empty -> .)
    ID              shift and go to state 30
    KEYWORD_IF      shift and go to state 40
    KEYWORD_DO      shift and go to state 41
    KEYWORD_PRINT   shift and go to state 42

    body                           shift and go to state 31
    statement_list                 shift and go to state 32
    statement                      shift and go to state 33
    empty                          shift and go to state 34
    assign                         shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    f_call                         shift and go to state 38
    print                          shift and go to state 39

state 26

    (17) FUNCS -> KEYWORD_VOID ID func_start . LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON

    LPAREN          shift and go to state 43


state 27

    (6) var_lines -> var_lines var_list SEMICOLON .

    ID              reduce using rule 6 (var_lines -> var_lines var_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 6 (var_lines -> var_lines var_list SEMICOLON .)
    KEYWORD_MAIN    reduce using rule 6 (var_lines -> var_lines var_list SEMICOLON .)
    LBRACE          reduce using rule 6 (var_lines -> var_lines var_list SEMICOLON .)


state 28

    (8) var_list -> ID id_list COLON . type
    (11) type -> . KEYWORD_INT
    (12) type -> . KEYWORD_FLOAT
    (13) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 45
    KEYWORD_FLOAT   shift and go to state 46
    KEYWORD_STRING  shift and go to state 47

    type                           shift and go to state 44

state 29

    (9) id_list -> COMMA ID . id_list
    (9) id_list -> . COMMA ID id_list
    (10) id_list -> . empty
    (73) empty -> .

    COMMA           shift and go to state 23
    COLON           reduce using rule 73 (empty -> .)

    id_list                        shift and go to state 48
    empty                          shift and go to state 24

state 30

    (33) assign -> ID . ASSIGN_SIGN expresion SEMICOLON
    (46) f_call -> ID . LPAREN expresion_list_opt RPAREN SEMICOLON

    ASSIGN_SIGN     shift and go to state 49
    LPAREN          shift and go to state 50


state 31

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body . RBRACE KEYWORD_END SEMICOLON

    RBRACE          shift and go to state 51


state 32

    (24) body -> statement_list .

    RBRACE          reduce using rule 24 (body -> statement_list .)


state 33

    (25) statement_list -> statement . statement_list
    (26) statement_list -> statement .
    (25) statement_list -> . statement statement_list
    (26) statement_list -> . statement
    (27) statement_list -> . empty
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print
    (73) empty -> .
    (33) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (41) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (39) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (46) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (34) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

  ! reduce/reduce conflict for RBRACE resolved using rule 26 (statement_list -> statement .)
    RBRACE          reduce using rule 26 (statement_list -> statement .)
    ID              shift and go to state 30
    KEYWORD_IF      shift and go to state 40
    KEYWORD_DO      shift and go to state 41
    KEYWORD_PRINT   shift and go to state 42

  ! RBRACE          [ reduce using rule 73 (empty -> .) ]

    statement                      shift and go to state 33
    statement_list                 shift and go to state 52
    empty                          shift and go to state 34
    assign                         shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    f_call                         shift and go to state 38
    print                          shift and go to state 39

state 34

    (27) statement_list -> empty .

    RBRACE          reduce using rule 27 (statement_list -> empty .)


state 35

    (28) statement -> assign .

    ID              reduce using rule 28 (statement -> assign .)
    KEYWORD_IF      reduce using rule 28 (statement -> assign .)
    KEYWORD_DO      reduce using rule 28 (statement -> assign .)
    KEYWORD_PRINT   reduce using rule 28 (statement -> assign .)
    RBRACE          reduce using rule 28 (statement -> assign .)


state 36

    (29) statement -> condition .

    ID              reduce using rule 29 (statement -> condition .)
    KEYWORD_IF      reduce using rule 29 (statement -> condition .)
    KEYWORD_DO      reduce using rule 29 (statement -> condition .)
    KEYWORD_PRINT   reduce using rule 29 (statement -> condition .)
    RBRACE          reduce using rule 29 (statement -> condition .)


state 37

    (30) statement -> cycle .

    ID              reduce using rule 30 (statement -> cycle .)
    KEYWORD_IF      reduce using rule 30 (statement -> cycle .)
    KEYWORD_DO      reduce using rule 30 (statement -> cycle .)
    KEYWORD_PRINT   reduce using rule 30 (statement -> cycle .)
    RBRACE          reduce using rule 30 (statement -> cycle .)


state 38

    (31) statement -> f_call .

    ID              reduce using rule 31 (statement -> f_call .)
    KEYWORD_IF      reduce using rule 31 (statement -> f_call .)
    KEYWORD_DO      reduce using rule 31 (statement -> f_call .)
    KEYWORD_PRINT   reduce using rule 31 (statement -> f_call .)
    RBRACE          reduce using rule 31 (statement -> f_call .)


state 39

    (32) statement -> print .

    ID              reduce using rule 32 (statement -> print .)
    KEYWORD_IF      reduce using rule 32 (statement -> print .)
    KEYWORD_DO      reduce using rule 32 (statement -> print .)
    KEYWORD_PRINT   reduce using rule 32 (statement -> print .)
    RBRACE          reduce using rule 32 (statement -> print .)


state 40

    (41) condition -> KEYWORD_IF . LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON

    LPAREN          shift and go to state 53


state 41

    (39) cycle -> KEYWORD_DO . cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (40) cuadr_do -> .

    LBRACE          reduce using rule 40 (cuadr_do -> .)

    cuadr_do                       shift and go to state 54

state 42

    (34) print -> KEYWORD_PRINT . LPAREN print_items RPAREN SEMICOLON

    LPAREN          shift and go to state 55


state 43

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN . parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON
    (20) parametros_opt -> . parametros
    (21) parametros_opt -> . empty
    (22) parametros -> . parametros COMMA ID COLON type
    (23) parametros -> . ID COLON type
    (73) empty -> .

    ID              shift and go to state 56
    RPAREN          reduce using rule 73 (empty -> .)

    parametros_opt                 shift and go to state 57
    parametros                     shift and go to state 58
    empty                          shift and go to state 59

state 44

    (8) var_list -> ID id_list COLON type .

    SEMICOLON       reduce using rule 8 (var_list -> ID id_list COLON type .)


state 45

    (11) type -> KEYWORD_INT .

    SEMICOLON       reduce using rule 11 (type -> KEYWORD_INT .)
    COMMA           reduce using rule 11 (type -> KEYWORD_INT .)
    RPAREN          reduce using rule 11 (type -> KEYWORD_INT .)


state 46

    (12) type -> KEYWORD_FLOAT .

    SEMICOLON       reduce using rule 12 (type -> KEYWORD_FLOAT .)
    COMMA           reduce using rule 12 (type -> KEYWORD_FLOAT .)
    RPAREN          reduce using rule 12 (type -> KEYWORD_FLOAT .)


state 47

    (13) type -> KEYWORD_STRING .

    SEMICOLON       reduce using rule 13 (type -> KEYWORD_STRING .)
    COMMA           reduce using rule 13 (type -> KEYWORD_STRING .)
    RPAREN          reduce using rule 13 (type -> KEYWORD_STRING .)


state 48

    (9) id_list -> COMMA ID id_list .

    COLON           reduce using rule 9 (id_list -> COMMA ID id_list .)


state 49

    (33) assign -> ID ASSIGN_SIGN . expresion SEMICOLON
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    expresion                      shift and go to state 61
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 50

    (46) f_call -> ID LPAREN . expresion_list_opt RPAREN SEMICOLON
    (47) expresion_list_opt -> . expresion_list
    (48) expresion_list_opt -> . empty
    (49) expresion_list -> . expresion_list COMMA expresion
    (50) expresion_list -> . expresion
    (73) empty -> .
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    RPAREN          reduce using rule 73 (empty -> .)
    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    expresion_list_opt             shift and go to state 72
    expresion_list                 shift and go to state 73
    empty                          shift and go to state 74
    expresion                      shift and go to state 75
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 51

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE . KEYWORD_END SEMICOLON

    KEYWORD_END     shift and go to state 76


state 52

    (25) statement_list -> statement statement_list .

    RBRACE          reduce using rule 25 (statement_list -> statement statement_list .)


state 53

    (41) condition -> KEYWORD_IF LPAREN . expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    expresion                      shift and go to state 77
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 54

    (39) cycle -> KEYWORD_DO cuadr_do . LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    LBRACE          shift and go to state 78


state 55

    (34) print -> KEYWORD_PRINT LPAREN . print_items RPAREN SEMICOLON
    (35) print_items -> . print_items COMMA print_item
    (36) print_items -> . print_item
    (37) print_item -> . expresion
    (38) print_item -> . varcte
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte

    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71
    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65

    print_items                    shift and go to state 79
    print_item                     shift and go to state 80
    expresion                      shift and go to state 81
    varcte                         shift and go to state 82
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66

state 56

    (23) parametros -> ID . COLON type

    COLON           shift and go to state 83


state 57

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt . RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON

    RPAREN          shift and go to state 84


state 58

    (20) parametros_opt -> parametros .
    (22) parametros -> parametros . COMMA ID COLON type

    RPAREN          reduce using rule 20 (parametros_opt -> parametros .)
    COMMA           shift and go to state 85


state 59

    (21) parametros_opt -> empty .

    RPAREN          reduce using rule 21 (parametros_opt -> empty .)


state 60

    (69) varcte -> ID .

    OP_MUL          reduce using rule 69 (varcte -> ID .)
    OP_DIV          reduce using rule 69 (varcte -> ID .)
    OP_SUM          reduce using rule 69 (varcte -> ID .)
    OP_SUB          reduce using rule 69 (varcte -> ID .)
    LESS            reduce using rule 69 (varcte -> ID .)
    GREATER         reduce using rule 69 (varcte -> ID .)
    NOT_EQUAL       reduce using rule 69 (varcte -> ID .)
    EQUAL           reduce using rule 69 (varcte -> ID .)
    GREATER_EQUAL   reduce using rule 69 (varcte -> ID .)
    LESS_EQUAL      reduce using rule 69 (varcte -> ID .)
    SEMICOLON       reduce using rule 69 (varcte -> ID .)
    COMMA           reduce using rule 69 (varcte -> ID .)
    RPAREN          reduce using rule 69 (varcte -> ID .)


state 61

    (33) assign -> ID ASSIGN_SIGN expresion . SEMICOLON

    SEMICOLON       shift and go to state 86


state 62

    (51) expresion -> exp . comparador exp
    (52) expresion -> exp .
    (59) exp -> exp . OP_SUM termino
    (60) exp -> exp . OP_SUB termino
    (53) comparador -> . LESS
    (54) comparador -> . GREATER
    (55) comparador -> . NOT_EQUAL
    (56) comparador -> . EQUAL
    (57) comparador -> . GREATER_EQUAL
    (58) comparador -> . LESS_EQUAL

    SEMICOLON       reduce using rule 52 (expresion -> exp .)
    COMMA           reduce using rule 52 (expresion -> exp .)
    RPAREN          reduce using rule 52 (expresion -> exp .)
    OP_SUM          shift and go to state 88
    OP_SUB          shift and go to state 89
    LESS            shift and go to state 90
    GREATER         shift and go to state 91
    NOT_EQUAL       shift and go to state 92
    EQUAL           shift and go to state 93
    GREATER_EQUAL   shift and go to state 94
    LESS_EQUAL      shift and go to state 95

    comparador                     shift and go to state 87

state 63

    (66) factor -> OP_SUM . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    varcte                         shift and go to state 96

state 64

    (61) exp -> termino .
    (62) termino -> termino . OP_MUL factor
    (63) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 61 (exp -> termino .)
    OP_SUB          reduce using rule 61 (exp -> termino .)
    LESS            reduce using rule 61 (exp -> termino .)
    GREATER         reduce using rule 61 (exp -> termino .)
    NOT_EQUAL       reduce using rule 61 (exp -> termino .)
    EQUAL           reduce using rule 61 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 61 (exp -> termino .)
    LESS_EQUAL      reduce using rule 61 (exp -> termino .)
    SEMICOLON       reduce using rule 61 (exp -> termino .)
    COMMA           reduce using rule 61 (exp -> termino .)
    RPAREN          reduce using rule 61 (exp -> termino .)
    OP_MUL          shift and go to state 97
    OP_DIV          shift and go to state 98


state 65

    (67) factor -> OP_SUB . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    varcte                         shift and go to state 99

state 66

    (64) termino -> factor .

    OP_MUL          reduce using rule 64 (termino -> factor .)
    OP_DIV          reduce using rule 64 (termino -> factor .)
    OP_SUM          reduce using rule 64 (termino -> factor .)
    OP_SUB          reduce using rule 64 (termino -> factor .)
    LESS            reduce using rule 64 (termino -> factor .)
    GREATER         reduce using rule 64 (termino -> factor .)
    NOT_EQUAL       reduce using rule 64 (termino -> factor .)
    EQUAL           reduce using rule 64 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 64 (termino -> factor .)
    LESS_EQUAL      reduce using rule 64 (termino -> factor .)
    SEMICOLON       reduce using rule 64 (termino -> factor .)
    COMMA           reduce using rule 64 (termino -> factor .)
    RPAREN          reduce using rule 64 (termino -> factor .)


state 67

    (65) factor -> LPAREN . expresion RPAREN
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    expresion                      shift and go to state 100
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 68

    (68) factor -> varcte .

    OP_MUL          reduce using rule 68 (factor -> varcte .)
    OP_DIV          reduce using rule 68 (factor -> varcte .)
    OP_SUM          reduce using rule 68 (factor -> varcte .)
    OP_SUB          reduce using rule 68 (factor -> varcte .)
    LESS            reduce using rule 68 (factor -> varcte .)
    GREATER         reduce using rule 68 (factor -> varcte .)
    NOT_EQUAL       reduce using rule 68 (factor -> varcte .)
    EQUAL           reduce using rule 68 (factor -> varcte .)
    GREATER_EQUAL   reduce using rule 68 (factor -> varcte .)
    LESS_EQUAL      reduce using rule 68 (factor -> varcte .)
    SEMICOLON       reduce using rule 68 (factor -> varcte .)
    COMMA           reduce using rule 68 (factor -> varcte .)
    RPAREN          reduce using rule 68 (factor -> varcte .)


state 69

    (70) varcte -> CTE_INT .

    OP_MUL          reduce using rule 70 (varcte -> CTE_INT .)
    OP_DIV          reduce using rule 70 (varcte -> CTE_INT .)
    OP_SUM          reduce using rule 70 (varcte -> CTE_INT .)
    OP_SUB          reduce using rule 70 (varcte -> CTE_INT .)
    LESS            reduce using rule 70 (varcte -> CTE_INT .)
    GREATER         reduce using rule 70 (varcte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 70 (varcte -> CTE_INT .)
    EQUAL           reduce using rule 70 (varcte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 70 (varcte -> CTE_INT .)
    LESS_EQUAL      reduce using rule 70 (varcte -> CTE_INT .)
    SEMICOLON       reduce using rule 70 (varcte -> CTE_INT .)
    COMMA           reduce using rule 70 (varcte -> CTE_INT .)
    RPAREN          reduce using rule 70 (varcte -> CTE_INT .)


state 70

    (71) varcte -> CTE_FLOAT .

    OP_MUL          reduce using rule 71 (varcte -> CTE_FLOAT .)
    OP_DIV          reduce using rule 71 (varcte -> CTE_FLOAT .)
    OP_SUM          reduce using rule 71 (varcte -> CTE_FLOAT .)
    OP_SUB          reduce using rule 71 (varcte -> CTE_FLOAT .)
    LESS            reduce using rule 71 (varcte -> CTE_FLOAT .)
    GREATER         reduce using rule 71 (varcte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 71 (varcte -> CTE_FLOAT .)
    EQUAL           reduce using rule 71 (varcte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 71 (varcte -> CTE_FLOAT .)
    LESS_EQUAL      reduce using rule 71 (varcte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 71 (varcte -> CTE_FLOAT .)
    COMMA           reduce using rule 71 (varcte -> CTE_FLOAT .)
    RPAREN          reduce using rule 71 (varcte -> CTE_FLOAT .)


state 71

    (72) varcte -> CTE_STRING .

    OP_MUL          reduce using rule 72 (varcte -> CTE_STRING .)
    OP_DIV          reduce using rule 72 (varcte -> CTE_STRING .)
    OP_SUM          reduce using rule 72 (varcte -> CTE_STRING .)
    OP_SUB          reduce using rule 72 (varcte -> CTE_STRING .)
    LESS            reduce using rule 72 (varcte -> CTE_STRING .)
    GREATER         reduce using rule 72 (varcte -> CTE_STRING .)
    NOT_EQUAL       reduce using rule 72 (varcte -> CTE_STRING .)
    EQUAL           reduce using rule 72 (varcte -> CTE_STRING .)
    GREATER_EQUAL   reduce using rule 72 (varcte -> CTE_STRING .)
    LESS_EQUAL      reduce using rule 72 (varcte -> CTE_STRING .)
    SEMICOLON       reduce using rule 72 (varcte -> CTE_STRING .)
    COMMA           reduce using rule 72 (varcte -> CTE_STRING .)
    RPAREN          reduce using rule 72 (varcte -> CTE_STRING .)


state 72

    (46) f_call -> ID LPAREN expresion_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 101


state 73

    (47) expresion_list_opt -> expresion_list .
    (49) expresion_list -> expresion_list . COMMA expresion

    RPAREN          reduce using rule 47 (expresion_list_opt -> expresion_list .)
    COMMA           shift and go to state 102


state 74

    (48) expresion_list_opt -> empty .

    RPAREN          reduce using rule 48 (expresion_list_opt -> empty .)


state 75

    (50) expresion_list -> expresion .

    COMMA           reduce using rule 50 (expresion_list -> expresion .)
    RPAREN          reduce using rule 50 (expresion_list -> expresion .)


state 76

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END . SEMICOLON

    SEMICOLON       shift and go to state 103


state 77

    (41) condition -> KEYWORD_IF LPAREN expresion . RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON

    RPAREN          shift and go to state 104


state 78

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE . body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (24) body -> . statement_list
    (25) statement_list -> . statement statement_list
    (26) statement_list -> . statement
    (27) statement_list -> . empty
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print
    (73) empty -> .
    (33) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (41) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (39) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (46) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (34) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 73 (empty -> .)
    ID              shift and go to state 30
    KEYWORD_IF      shift and go to state 40
    KEYWORD_DO      shift and go to state 41
    KEYWORD_PRINT   shift and go to state 42

    body                           shift and go to state 105
    statement_list                 shift and go to state 32
    statement                      shift and go to state 33
    empty                          shift and go to state 34
    assign                         shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    f_call                         shift and go to state 38
    print                          shift and go to state 39

state 79

    (34) print -> KEYWORD_PRINT LPAREN print_items . RPAREN SEMICOLON
    (35) print_items -> print_items . COMMA print_item

    RPAREN          shift and go to state 106
    COMMA           shift and go to state 107


state 80

    (36) print_items -> print_item .

    RPAREN          reduce using rule 36 (print_items -> print_item .)
    COMMA           reduce using rule 36 (print_items -> print_item .)


state 81

    (37) print_item -> expresion .

    RPAREN          reduce using rule 37 (print_item -> expresion .)
    COMMA           reduce using rule 37 (print_item -> expresion .)


state 82

    (38) print_item -> varcte .
    (68) factor -> varcte .

  ! reduce/reduce conflict for RPAREN resolved using rule 38 (print_item -> varcte .)
  ! reduce/reduce conflict for COMMA resolved using rule 38 (print_item -> varcte .)
    RPAREN          reduce using rule 38 (print_item -> varcte .)
    COMMA           reduce using rule 38 (print_item -> varcte .)
    OP_MUL          reduce using rule 68 (factor -> varcte .)
    OP_DIV          reduce using rule 68 (factor -> varcte .)
    OP_SUM          reduce using rule 68 (factor -> varcte .)
    OP_SUB          reduce using rule 68 (factor -> varcte .)
    LESS            reduce using rule 68 (factor -> varcte .)
    GREATER         reduce using rule 68 (factor -> varcte .)
    NOT_EQUAL       reduce using rule 68 (factor -> varcte .)
    EQUAL           reduce using rule 68 (factor -> varcte .)
    GREATER_EQUAL   reduce using rule 68 (factor -> varcte .)
    LESS_EQUAL      reduce using rule 68 (factor -> varcte .)

  ! RPAREN          [ reduce using rule 68 (factor -> varcte .) ]
  ! COMMA           [ reduce using rule 68 (factor -> varcte .) ]


state 83

    (23) parametros -> ID COLON . type
    (11) type -> . KEYWORD_INT
    (12) type -> . KEYWORD_FLOAT
    (13) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 45
    KEYWORD_FLOAT   shift and go to state 46
    KEYWORD_STRING  shift and go to state 47

    type                           shift and go to state 108

state 84

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN . LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON

    LBRACKET        shift and go to state 109


state 85

    (22) parametros -> parametros COMMA . ID COLON type

    ID              shift and go to state 110


state 86

    (33) assign -> ID ASSIGN_SIGN expresion SEMICOLON .

    ID              reduce using rule 33 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_IF      reduce using rule 33 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_DO      reduce using rule 33 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 33 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    RBRACE          reduce using rule 33 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)


state 87

    (51) expresion -> exp comparador . exp
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    exp                            shift and go to state 111
    termino                        shift and go to state 64
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 88

    (59) exp -> exp OP_SUM . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    termino                        shift and go to state 112
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 89

    (60) exp -> exp OP_SUB . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    termino                        shift and go to state 113
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 90

    (53) comparador -> LESS .

    LPAREN          reduce using rule 53 (comparador -> LESS .)
    OP_SUM          reduce using rule 53 (comparador -> LESS .)
    OP_SUB          reduce using rule 53 (comparador -> LESS .)
    ID              reduce using rule 53 (comparador -> LESS .)
    CTE_INT         reduce using rule 53 (comparador -> LESS .)
    CTE_FLOAT       reduce using rule 53 (comparador -> LESS .)
    CTE_STRING      reduce using rule 53 (comparador -> LESS .)


state 91

    (54) comparador -> GREATER .

    LPAREN          reduce using rule 54 (comparador -> GREATER .)
    OP_SUM          reduce using rule 54 (comparador -> GREATER .)
    OP_SUB          reduce using rule 54 (comparador -> GREATER .)
    ID              reduce using rule 54 (comparador -> GREATER .)
    CTE_INT         reduce using rule 54 (comparador -> GREATER .)
    CTE_FLOAT       reduce using rule 54 (comparador -> GREATER .)
    CTE_STRING      reduce using rule 54 (comparador -> GREATER .)


state 92

    (55) comparador -> NOT_EQUAL .

    LPAREN          reduce using rule 55 (comparador -> NOT_EQUAL .)
    OP_SUM          reduce using rule 55 (comparador -> NOT_EQUAL .)
    OP_SUB          reduce using rule 55 (comparador -> NOT_EQUAL .)
    ID              reduce using rule 55 (comparador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 55 (comparador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 55 (comparador -> NOT_EQUAL .)
    CTE_STRING      reduce using rule 55 (comparador -> NOT_EQUAL .)


state 93

    (56) comparador -> EQUAL .

    LPAREN          reduce using rule 56 (comparador -> EQUAL .)
    OP_SUM          reduce using rule 56 (comparador -> EQUAL .)
    OP_SUB          reduce using rule 56 (comparador -> EQUAL .)
    ID              reduce using rule 56 (comparador -> EQUAL .)
    CTE_INT         reduce using rule 56 (comparador -> EQUAL .)
    CTE_FLOAT       reduce using rule 56 (comparador -> EQUAL .)
    CTE_STRING      reduce using rule 56 (comparador -> EQUAL .)


state 94

    (57) comparador -> GREATER_EQUAL .

    LPAREN          reduce using rule 57 (comparador -> GREATER_EQUAL .)
    OP_SUM          reduce using rule 57 (comparador -> GREATER_EQUAL .)
    OP_SUB          reduce using rule 57 (comparador -> GREATER_EQUAL .)
    ID              reduce using rule 57 (comparador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 57 (comparador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 57 (comparador -> GREATER_EQUAL .)
    CTE_STRING      reduce using rule 57 (comparador -> GREATER_EQUAL .)


state 95

    (58) comparador -> LESS_EQUAL .

    LPAREN          reduce using rule 58 (comparador -> LESS_EQUAL .)
    OP_SUM          reduce using rule 58 (comparador -> LESS_EQUAL .)
    OP_SUB          reduce using rule 58 (comparador -> LESS_EQUAL .)
    ID              reduce using rule 58 (comparador -> LESS_EQUAL .)
    CTE_INT         reduce using rule 58 (comparador -> LESS_EQUAL .)
    CTE_FLOAT       reduce using rule 58 (comparador -> LESS_EQUAL .)
    CTE_STRING      reduce using rule 58 (comparador -> LESS_EQUAL .)


state 96

    (66) factor -> OP_SUM varcte .

    OP_MUL          reduce using rule 66 (factor -> OP_SUM varcte .)
    OP_DIV          reduce using rule 66 (factor -> OP_SUM varcte .)
    OP_SUM          reduce using rule 66 (factor -> OP_SUM varcte .)
    OP_SUB          reduce using rule 66 (factor -> OP_SUM varcte .)
    LESS            reduce using rule 66 (factor -> OP_SUM varcte .)
    GREATER         reduce using rule 66 (factor -> OP_SUM varcte .)
    NOT_EQUAL       reduce using rule 66 (factor -> OP_SUM varcte .)
    EQUAL           reduce using rule 66 (factor -> OP_SUM varcte .)
    GREATER_EQUAL   reduce using rule 66 (factor -> OP_SUM varcte .)
    LESS_EQUAL      reduce using rule 66 (factor -> OP_SUM varcte .)
    SEMICOLON       reduce using rule 66 (factor -> OP_SUM varcte .)
    COMMA           reduce using rule 66 (factor -> OP_SUM varcte .)
    RPAREN          reduce using rule 66 (factor -> OP_SUM varcte .)


state 97

    (62) termino -> termino OP_MUL . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    factor                         shift and go to state 114
    varcte                         shift and go to state 68

state 98

    (63) termino -> termino OP_DIV . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    factor                         shift and go to state 115
    varcte                         shift and go to state 68

state 99

    (67) factor -> OP_SUB varcte .

    OP_MUL          reduce using rule 67 (factor -> OP_SUB varcte .)
    OP_DIV          reduce using rule 67 (factor -> OP_SUB varcte .)
    OP_SUM          reduce using rule 67 (factor -> OP_SUB varcte .)
    OP_SUB          reduce using rule 67 (factor -> OP_SUB varcte .)
    LESS            reduce using rule 67 (factor -> OP_SUB varcte .)
    GREATER         reduce using rule 67 (factor -> OP_SUB varcte .)
    NOT_EQUAL       reduce using rule 67 (factor -> OP_SUB varcte .)
    EQUAL           reduce using rule 67 (factor -> OP_SUB varcte .)
    GREATER_EQUAL   reduce using rule 67 (factor -> OP_SUB varcte .)
    LESS_EQUAL      reduce using rule 67 (factor -> OP_SUB varcte .)
    SEMICOLON       reduce using rule 67 (factor -> OP_SUB varcte .)
    COMMA           reduce using rule 67 (factor -> OP_SUB varcte .)
    RPAREN          reduce using rule 67 (factor -> OP_SUB varcte .)


state 100

    (65) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 116


state 101

    (46) f_call -> ID LPAREN expresion_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 117


state 102

    (49) expresion_list -> expresion_list COMMA . expresion
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    expresion                      shift and go to state 118
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 103

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON .

    $end            reduce using rule 1 (Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON .)


state 104

    (41) condition -> KEYWORD_IF LPAREN expresion RPAREN . cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (42) cuadr_if -> .

    LBRACE          reduce using rule 42 (cuadr_if -> .)

    cuadr_if                       shift and go to state 119

state 105

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE body . RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    RBRACE          shift and go to state 120


state 106

    (34) print -> KEYWORD_PRINT LPAREN print_items RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 121


state 107

    (35) print_items -> print_items COMMA . print_item
    (37) print_item -> . expresion
    (38) print_item -> . varcte
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte

    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71
    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65

    print_item                     shift and go to state 122
    expresion                      shift and go to state 81
    varcte                         shift and go to state 82
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66

state 108

    (23) parametros -> ID COLON type .

    COMMA           reduce using rule 23 (parametros -> ID COLON type .)
    RPAREN          reduce using rule 23 (parametros -> ID COLON type .)


state 109

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET . vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON
    (3) vars_opt -> . var_block
    (4) vars_opt -> . empty
    (5) var_block -> . KEYWORD_VAR var_lines
    (73) empty -> .

    KEYWORD_VAR     shift and go to state 8
    LBRACE          reduce using rule 73 (empty -> .)

    vars_opt                       shift and go to state 123
    var_block                      shift and go to state 6
    empty                          shift and go to state 7

state 110

    (22) parametros -> parametros COMMA ID . COLON type

    COLON           shift and go to state 124


state 111

    (51) expresion -> exp comparador exp .
    (59) exp -> exp . OP_SUM termino
    (60) exp -> exp . OP_SUB termino

    SEMICOLON       reduce using rule 51 (expresion -> exp comparador exp .)
    COMMA           reduce using rule 51 (expresion -> exp comparador exp .)
    RPAREN          reduce using rule 51 (expresion -> exp comparador exp .)
    OP_SUM          shift and go to state 88
    OP_SUB          shift and go to state 89


state 112

    (59) exp -> exp OP_SUM termino .
    (62) termino -> termino . OP_MUL factor
    (63) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 59 (exp -> exp OP_SUM termino .)
    OP_SUB          reduce using rule 59 (exp -> exp OP_SUM termino .)
    LESS            reduce using rule 59 (exp -> exp OP_SUM termino .)
    GREATER         reduce using rule 59 (exp -> exp OP_SUM termino .)
    NOT_EQUAL       reduce using rule 59 (exp -> exp OP_SUM termino .)
    EQUAL           reduce using rule 59 (exp -> exp OP_SUM termino .)
    GREATER_EQUAL   reduce using rule 59 (exp -> exp OP_SUM termino .)
    LESS_EQUAL      reduce using rule 59 (exp -> exp OP_SUM termino .)
    SEMICOLON       reduce using rule 59 (exp -> exp OP_SUM termino .)
    COMMA           reduce using rule 59 (exp -> exp OP_SUM termino .)
    RPAREN          reduce using rule 59 (exp -> exp OP_SUM termino .)
    OP_MUL          shift and go to state 97
    OP_DIV          shift and go to state 98


state 113

    (60) exp -> exp OP_SUB termino .
    (62) termino -> termino . OP_MUL factor
    (63) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 60 (exp -> exp OP_SUB termino .)
    OP_SUB          reduce using rule 60 (exp -> exp OP_SUB termino .)
    LESS            reduce using rule 60 (exp -> exp OP_SUB termino .)
    GREATER         reduce using rule 60 (exp -> exp OP_SUB termino .)
    NOT_EQUAL       reduce using rule 60 (exp -> exp OP_SUB termino .)
    EQUAL           reduce using rule 60 (exp -> exp OP_SUB termino .)
    GREATER_EQUAL   reduce using rule 60 (exp -> exp OP_SUB termino .)
    LESS_EQUAL      reduce using rule 60 (exp -> exp OP_SUB termino .)
    SEMICOLON       reduce using rule 60 (exp -> exp OP_SUB termino .)
    COMMA           reduce using rule 60 (exp -> exp OP_SUB termino .)
    RPAREN          reduce using rule 60 (exp -> exp OP_SUB termino .)
    OP_MUL          shift and go to state 97
    OP_DIV          shift and go to state 98


state 114

    (62) termino -> termino OP_MUL factor .

    OP_MUL          reduce using rule 62 (termino -> termino OP_MUL factor .)
    OP_DIV          reduce using rule 62 (termino -> termino OP_MUL factor .)
    OP_SUM          reduce using rule 62 (termino -> termino OP_MUL factor .)
    OP_SUB          reduce using rule 62 (termino -> termino OP_MUL factor .)
    LESS            reduce using rule 62 (termino -> termino OP_MUL factor .)
    GREATER         reduce using rule 62 (termino -> termino OP_MUL factor .)
    NOT_EQUAL       reduce using rule 62 (termino -> termino OP_MUL factor .)
    EQUAL           reduce using rule 62 (termino -> termino OP_MUL factor .)
    GREATER_EQUAL   reduce using rule 62 (termino -> termino OP_MUL factor .)
    LESS_EQUAL      reduce using rule 62 (termino -> termino OP_MUL factor .)
    SEMICOLON       reduce using rule 62 (termino -> termino OP_MUL factor .)
    COMMA           reduce using rule 62 (termino -> termino OP_MUL factor .)
    RPAREN          reduce using rule 62 (termino -> termino OP_MUL factor .)


state 115

    (63) termino -> termino OP_DIV factor .

    OP_MUL          reduce using rule 63 (termino -> termino OP_DIV factor .)
    OP_DIV          reduce using rule 63 (termino -> termino OP_DIV factor .)
    OP_SUM          reduce using rule 63 (termino -> termino OP_DIV factor .)
    OP_SUB          reduce using rule 63 (termino -> termino OP_DIV factor .)
    LESS            reduce using rule 63 (termino -> termino OP_DIV factor .)
    GREATER         reduce using rule 63 (termino -> termino OP_DIV factor .)
    NOT_EQUAL       reduce using rule 63 (termino -> termino OP_DIV factor .)
    EQUAL           reduce using rule 63 (termino -> termino OP_DIV factor .)
    GREATER_EQUAL   reduce using rule 63 (termino -> termino OP_DIV factor .)
    LESS_EQUAL      reduce using rule 63 (termino -> termino OP_DIV factor .)
    SEMICOLON       reduce using rule 63 (termino -> termino OP_DIV factor .)
    COMMA           reduce using rule 63 (termino -> termino OP_DIV factor .)
    RPAREN          reduce using rule 63 (termino -> termino OP_DIV factor .)


state 116

    (65) factor -> LPAREN expresion RPAREN .

    OP_MUL          reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    OP_DIV          reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    OP_SUM          reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    OP_SUB          reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    LESS            reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    NOT_EQUAL       reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    EQUAL           reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    GREATER_EQUAL   reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    LESS_EQUAL      reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 65 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 65 (factor -> LPAREN expresion RPAREN .)


state 117

    (46) f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .

    ID              reduce using rule 46 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 46 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 46 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 46 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 46 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)


state 118

    (49) expresion_list -> expresion_list COMMA expresion .

    COMMA           reduce using rule 49 (expresion_list -> expresion_list COMMA expresion .)
    RPAREN          reduce using rule 49 (expresion_list -> expresion_list COMMA expresion .)


state 119

    (41) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if . LBRACE body RBRACE else_arg SEMICOLON

    LBRACE          shift and go to state 125


state 120

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE . KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    KEYWORD_WHILE   shift and go to state 126


state 121

    (34) print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .

    ID              reduce using rule 34 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 34 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 34 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 34 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    RBRACE          reduce using rule 34 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)


state 122

    (35) print_items -> print_items COMMA print_item .

    RPAREN          reduce using rule 35 (print_items -> print_items COMMA print_item .)
    COMMA           reduce using rule 35 (print_items -> print_items COMMA print_item .)


state 123

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt . LBRACE body RBRACE RBRACKET func_end SEMICOLON

    LBRACE          shift and go to state 127


state 124

    (22) parametros -> parametros COMMA ID COLON . type
    (11) type -> . KEYWORD_INT
    (12) type -> . KEYWORD_FLOAT
    (13) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 45
    KEYWORD_FLOAT   shift and go to state 46
    KEYWORD_STRING  shift and go to state 47

    type                           shift and go to state 128

state 125

    (41) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE . body RBRACE else_arg SEMICOLON
    (24) body -> . statement_list
    (25) statement_list -> . statement statement_list
    (26) statement_list -> . statement
    (27) statement_list -> . empty
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print
    (73) empty -> .
    (33) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (41) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (39) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (46) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (34) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 73 (empty -> .)
    ID              shift and go to state 30
    KEYWORD_IF      shift and go to state 40
    KEYWORD_DO      shift and go to state 41
    KEYWORD_PRINT   shift and go to state 42

    body                           shift and go to state 129
    statement_list                 shift and go to state 32
    statement                      shift and go to state 33
    empty                          shift and go to state 34
    assign                         shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    f_call                         shift and go to state 38
    print                          shift and go to state 39

state 126

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 130


state 127

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE . body RBRACE RBRACKET func_end SEMICOLON
    (24) body -> . statement_list
    (25) statement_list -> . statement statement_list
    (26) statement_list -> . statement
    (27) statement_list -> . empty
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print
    (73) empty -> .
    (33) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (41) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (39) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (46) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (34) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 73 (empty -> .)
    ID              shift and go to state 30
    KEYWORD_IF      shift and go to state 40
    KEYWORD_DO      shift and go to state 41
    KEYWORD_PRINT   shift and go to state 42

    body                           shift and go to state 131
    statement_list                 shift and go to state 32
    statement                      shift and go to state 33
    empty                          shift and go to state 34
    assign                         shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    f_call                         shift and go to state 38
    print                          shift and go to state 39

state 128

    (22) parametros -> parametros COMMA ID COLON type .

    COMMA           reduce using rule 22 (parametros -> parametros COMMA ID COLON type .)
    RPAREN          reduce using rule 22 (parametros -> parametros COMMA ID COLON type .)


state 129

    (41) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body . RBRACE else_arg SEMICOLON

    RBRACE          shift and go to state 132


state 130

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN . expresion RPAREN SEMICOLON
    (51) expresion -> . exp comparador exp
    (52) expresion -> . exp
    (59) exp -> . exp OP_SUM termino
    (60) exp -> . exp OP_SUB termino
    (61) exp -> . termino
    (62) termino -> . termino OP_MUL factor
    (63) termino -> . termino OP_DIV factor
    (64) termino -> . factor
    (65) factor -> . LPAREN expresion RPAREN
    (66) factor -> . OP_SUM varcte
    (67) factor -> . OP_SUB varcte
    (68) factor -> . varcte
    (69) varcte -> . ID
    (70) varcte -> . CTE_INT
    (71) varcte -> . CTE_FLOAT
    (72) varcte -> . CTE_STRING

    LPAREN          shift and go to state 67
    OP_SUM          shift and go to state 63
    OP_SUB          shift and go to state 65
    ID              shift and go to state 60
    CTE_INT         shift and go to state 69
    CTE_FLOAT       shift and go to state 70
    CTE_STRING      shift and go to state 71

    expresion                      shift and go to state 133
    exp                            shift and go to state 62
    termino                        shift and go to state 64
    factor                         shift and go to state 66
    varcte                         shift and go to state 68

state 131

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body . RBRACE RBRACKET func_end SEMICOLON

    RBRACE          shift and go to state 134


state 132

    (41) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE . else_arg SEMICOLON
    (43) else_arg -> . KEYWORD_ELSE cuadr_else LBRACE body RBRACE
    (45) else_arg -> . empty
    (73) empty -> .

    KEYWORD_ELSE    shift and go to state 136
    SEMICOLON       reduce using rule 73 (empty -> .)

    else_arg                       shift and go to state 135
    empty                          shift and go to state 137

state 133

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 138


state 134

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE . RBRACKET func_end SEMICOLON

    RBRACKET        shift and go to state 139


state 135

    (41) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg . SEMICOLON

    SEMICOLON       shift and go to state 140


state 136

    (43) else_arg -> KEYWORD_ELSE . cuadr_else LBRACE body RBRACE
    (44) cuadr_else -> .

    LBRACE          reduce using rule 44 (cuadr_else -> .)

    cuadr_else                     shift and go to state 141

state 137

    (45) else_arg -> empty .

    SEMICOLON       reduce using rule 45 (else_arg -> empty .)


state 138

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 142


state 139

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET . func_end SEMICOLON
    (19) func_end -> .

    SEMICOLON       reduce using rule 19 (func_end -> .)

    func_end                       shift and go to state 143

state 140

    (41) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .

    ID              reduce using rule 41 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_IF      reduce using rule 41 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_DO      reduce using rule 41 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 41 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    RBRACE          reduce using rule 41 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)


state 141

    (43) else_arg -> KEYWORD_ELSE cuadr_else . LBRACE body RBRACE

    LBRACE          shift and go to state 144


state 142

    (39) cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .

    ID              reduce using rule 39 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 39 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 39 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 39 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    RBRACE          reduce using rule 39 (cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)


state 143

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end . SEMICOLON

    SEMICOLON       shift and go to state 145


state 144

    (43) else_arg -> KEYWORD_ELSE cuadr_else LBRACE . body RBRACE
    (24) body -> . statement_list
    (25) statement_list -> . statement statement_list
    (26) statement_list -> . statement
    (27) statement_list -> . empty
    (28) statement -> . assign
    (29) statement -> . condition
    (30) statement -> . cycle
    (31) statement -> . f_call
    (32) statement -> . print
    (73) empty -> .
    (33) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (41) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (39) cycle -> . KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (46) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (34) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 73 (empty -> .)
    ID              shift and go to state 30
    KEYWORD_IF      shift and go to state 40
    KEYWORD_DO      shift and go to state 41
    KEYWORD_PRINT   shift and go to state 42

    body                           shift and go to state 146
    statement_list                 shift and go to state 32
    statement                      shift and go to state 33
    empty                          shift and go to state 34
    assign                         shift and go to state 35
    condition                      shift and go to state 36
    cycle                          shift and go to state 37
    f_call                         shift and go to state 38
    print                          shift and go to state 39

state 145

    (17) FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON .

    KEYWORD_MAIN    reduce using rule 17 (FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON .)
    KEYWORD_VOID    reduce using rule 17 (FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON .)


state 146

    (43) else_arg -> KEYWORD_ELSE cuadr_else LBRACE body . RBRACE

    RBRACE          shift and go to state 147


state 147

    (43) else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE .

    SEMICOLON       reduce using rule 43 (else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KEYWORD_VOID in state 5 resolved as shift
WARNING: reduce/reduce conflict in state 33 resolved using rule (statement_list -> statement)
WARNING: rejected rule (empty -> <empty>) in state 33
WARNING: reduce/reduce conflict in state 82 resolved using rule (print_item -> varcte)
WARNING: rejected rule (factor -> varcte) in state 82
