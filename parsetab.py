
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN_SIGN COLON COMMA CTE_FLOAT CTE_INT CTE_STRING EQUAL GREATER GREATER_EQUAL ID KEYWORD_DO KEYWORD_ELSE KEYWORD_END KEYWORD_FLOAT KEYWORD_IF KEYWORD_INT KEYWORD_MAIN KEYWORD_PRINT KEYWORD_PROGRAM KEYWORD_STRING KEYWORD_VAR KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LESS LESS_EQUAL LPAREN NOT_EQUAL OP_DIV OP_MUL OP_SUB OP_SUM RBRACE RBRACKET RPAREN SEMICOLONPrograma : KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLONmain_marker : KEYWORD_MAINvars_opt : KEYWORD_VAR var_lines\n| emptyvar_lines : var_lines var_list SEMICOLON\n| var_list SEMICOLONvar_list : ID id_list COLON typeid_list : COMMA ID id_list\n| emptytype : KEYWORD_INT\n| KEYWORD_FLOAT\n| KEYWORD_STRINGfuncs_opt : funcs_opt FUNCS\n| FUNCS\n| emptyFUNCS : KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLONfunc_start :func_end :parametros_opt : parametros\n| emptyparametros : parametros COMMA ID COLON type\n| ID COLON typebody : statement_liststatement_list : statement statement_list\n| statement\n| emptystatement : assign\n| condition\n| cycle\n| f_call\n| printassign : ID ASSIGN_SIGN expresion SEMICOLONprint : KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLONprint_items : print_items COMMA print_item\n| print_itemprint_item : expresion\n| CTE_STRINGcycle : KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLONcuadr_do :condition : KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLONcuadr_if :else_arg : KEYWORD_ELSE cuadr_else LBRACE body RBRACEcuadr_else :else_arg : emptyf_call : ID LPAREN expresion_list_opt RPAREN SEMICOLONexpresion_list_opt : expresion_list\n| emptyexpresion_list : expresion_list COMMA expresion\n| expresionexpresion : exp comparador exp\n| expcomparador : LESS\n| GREATER\n| NOT_EQUAL\n| EQUAL\n| GREATER_EQUAL\n| LESS_EQUALexp : exp OP_SUM termino\n| exp OP_SUB termino\n| terminotermino : termino OP_MUL factor\n| termino OP_DIV factor\n| factorfactor : LPAREN expresion RPAREN\n| OP_SUM varcte\n| OP_SUB varcte\n| varctevarcte : ID\n| CTE_INT\n| CTE_FLOATempty :'
    
_lr_action_items = {'KEYWORD_PROGRAM':([0,],[2,]),'$end':([1,101,],[0,-1,]),'ID':([2,6,7,11,12,20,22,24,26,32,34,35,36,37,38,42,48,49,52,54,62,64,66,76,83,84,85,86,87,88,89,90,91,92,93,95,96,100,105,107,115,119,121,123,128,138,140,141,],[3,14,-4,18,14,-6,28,29,-5,29,-27,-28,-29,-30,-31,55,59,59,59,59,59,59,59,29,108,-32,59,59,59,-52,-53,-54,-55,-56,-57,59,59,59,59,-71,-45,-33,29,29,59,-40,-38,29,]),'SEMICOLON':([3,13,19,43,44,45,46,59,60,61,63,65,67,68,69,74,94,97,99,104,109,110,111,112,113,114,129,130,132,133,135,136,143,],[4,20,26,-7,-10,-11,-12,-68,84,-51,-60,-63,-67,-69,-70,101,-65,-66,115,119,-50,-58,-59,-61,-62,-64,-18,-71,137,138,-44,140,-42,]),'KEYWORD_VAR':([4,107,],[6,6,]),'KEYWORD_VOID':([4,5,7,8,9,10,12,16,20,26,137,],[-71,11,-4,11,-14,-15,-3,-13,-6,-5,-16,]),'KEYWORD_MAIN':([4,5,7,8,9,10,12,16,20,26,137,],[-71,-71,-4,17,-14,-15,-3,-13,-6,-5,-16,]),'KEYWORD_IF':([7,12,20,24,26,32,34,35,36,37,38,76,84,107,115,119,121,123,138,140,141,],[-4,-3,-6,39,-5,39,-27,-28,-29,-30,-31,39,-32,-71,-45,-33,39,39,-40,-38,39,]),'KEYWORD_DO':([7,12,20,24,26,32,34,35,36,37,38,76,84,107,115,119,121,123,138,140,141,],[-4,-3,-6,40,-5,40,-27,-28,-29,-30,-31,40,-32,-71,-45,-33,40,40,-40,-38,40,]),'KEYWORD_PRINT':([7,12,20,24,26,32,34,35,36,37,38,76,84,107,115,119,121,123,138,140,141,],[-4,-3,-6,41,-5,41,-27,-28,-29,-30,-31,41,-32,-71,-45,-33,41,41,-40,-38,41,]),'RBRACKET':([7,12,20,26,31,32,33,34,35,36,37,38,51,84,107,115,119,121,125,138,140,],[-4,-3,-6,-5,-23,-25,-26,-27,-28,-29,-30,-31,-24,-32,-71,-45,-33,-71,129,-40,-38,]),'COMMA':([14,28,44,45,46,57,59,61,63,65,67,68,69,71,73,77,78,79,80,94,97,106,109,110,111,112,113,114,116,120,126,],[22,22,-10,-11,-12,83,-68,-51,-60,-63,-67,-69,-70,100,-49,105,-35,-36,-37,-65,-66,-22,-50,-58,-59,-61,-62,-64,-48,-34,-21,]),'COLON':([14,21,23,28,47,55,108,],[-71,27,-9,-71,-8,81,122,]),'LBRACE':([15,17,40,53,102,117,134,139,],[24,-2,-39,76,-41,123,-43,141,]),'LPAREN':([18,25,29,39,41,48,49,52,54,66,85,86,87,88,89,90,91,92,93,95,96,100,105,124,128,],[-17,42,49,52,54,66,66,66,66,66,66,66,66,-52,-53,-54,-55,-56,-57,66,66,66,66,128,66,]),'RBRACE':([24,30,31,32,33,34,35,36,37,38,51,76,84,103,115,119,123,127,138,140,141,142,],[-71,50,-23,-25,-26,-27,-28,-29,-30,-31,-24,-71,-32,118,-45,-33,-71,130,-40,-38,-71,143,]),'KEYWORD_INT':([27,81,122,],[44,44,44,]),'KEYWORD_FLOAT':([27,81,122,],[45,45,45,]),'KEYWORD_STRING':([27,81,122,],[46,46,46,]),'ASSIGN_SIGN':([29,],[48,]),'RPAREN':([42,44,45,46,49,56,57,58,59,61,63,65,67,68,69,70,71,72,73,75,77,78,79,80,94,97,98,106,109,110,111,112,113,114,116,120,126,131,],[-71,-10,-11,-12,-71,82,-19,-20,-68,-51,-60,-63,-67,-69,-70,99,-46,-47,-49,102,104,-35,-36,-37,-65,-66,114,-22,-50,-58,-59,-61,-62,-64,-48,-34,-21,136,]),'OP_SUM':([48,49,52,54,59,61,63,65,66,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,97,100,105,109,110,111,112,113,114,128,],[62,62,62,62,-68,86,-60,-63,62,-67,-69,-70,62,62,62,-52,-53,-54,-55,-56,-57,-65,62,62,-66,62,62,86,-58,-59,-61,-62,-64,62,]),'OP_SUB':([48,49,52,54,59,61,63,65,66,67,68,69,85,86,87,88,89,90,91,92,93,94,95,96,97,100,105,109,110,111,112,113,114,128,],[64,64,64,64,-68,87,-60,-63,64,-67,-69,-70,64,64,64,-52,-53,-54,-55,-56,-57,-65,64,64,-66,64,64,87,-58,-59,-61,-62,-64,64,]),'CTE_INT':([48,49,52,54,62,64,66,85,86,87,88,89,90,91,92,93,95,96,100,105,128,],[68,68,68,68,68,68,68,68,68,68,-52,-53,-54,-55,-56,-57,68,68,68,68,68,]),'CTE_FLOAT':([48,49,52,54,62,64,66,85,86,87,88,89,90,91,92,93,95,96,100,105,128,],[69,69,69,69,69,69,69,69,69,69,-52,-53,-54,-55,-56,-57,69,69,69,69,69,]),'KEYWORD_END':([50,],[74,]),'CTE_STRING':([54,105,],[80,80,]),'OP_MUL':([59,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,95,-63,-67,-69,-70,-65,-66,95,95,-61,-62,-64,]),'OP_DIV':([59,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,96,-63,-67,-69,-70,-65,-66,96,96,-61,-62,-64,]),'LESS':([59,61,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,88,-60,-63,-67,-69,-70,-65,-66,-58,-59,-61,-62,-64,]),'GREATER':([59,61,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,89,-60,-63,-67,-69,-70,-65,-66,-58,-59,-61,-62,-64,]),'NOT_EQUAL':([59,61,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,90,-60,-63,-67,-69,-70,-65,-66,-58,-59,-61,-62,-64,]),'EQUAL':([59,61,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,91,-60,-63,-67,-69,-70,-65,-66,-58,-59,-61,-62,-64,]),'GREATER_EQUAL':([59,61,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,92,-60,-63,-67,-69,-70,-65,-66,-58,-59,-61,-62,-64,]),'LESS_EQUAL':([59,61,63,65,67,68,69,94,97,110,111,112,113,114,],[-68,93,-60,-63,-67,-69,-70,-65,-66,-58,-59,-61,-62,-64,]),'LBRACKET':([82,],[107,]),'KEYWORD_WHILE':([118,],[124,]),'KEYWORD_ELSE':([130,],[134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'vars_opt':([4,107,],[5,121,]),'empty':([4,5,14,24,28,32,42,49,76,107,121,123,130,141,],[7,10,23,33,23,33,58,72,33,7,33,33,135,33,]),'funcs_opt':([5,],[8,]),'FUNCS':([5,8,],[9,16,]),'var_lines':([6,],[12,]),'var_list':([6,12,],[13,19,]),'main_marker':([8,],[15,]),'id_list':([14,28,],[21,47,]),'func_start':([18,],[25,]),'body':([24,76,121,123,141,],[30,103,125,127,142,]),'statement_list':([24,32,76,121,123,141,],[31,51,31,31,31,31,]),'statement':([24,32,76,121,123,141,],[32,32,32,32,32,32,]),'assign':([24,32,76,121,123,141,],[34,34,34,34,34,34,]),'condition':([24,32,76,121,123,141,],[35,35,35,35,35,35,]),'cycle':([24,32,76,121,123,141,],[36,36,36,36,36,36,]),'f_call':([24,32,76,121,123,141,],[37,37,37,37,37,37,]),'print':([24,32,76,121,123,141,],[38,38,38,38,38,38,]),'type':([27,81,122,],[43,106,126,]),'cuadr_do':([40,],[53,]),'parametros_opt':([42,],[56,]),'parametros':([42,],[57,]),'expresion':([48,49,52,54,66,100,105,128,],[60,73,75,79,98,116,79,131,]),'exp':([48,49,52,54,66,85,100,105,128,],[61,61,61,61,61,109,61,61,61,]),'termino':([48,49,52,54,66,85,86,87,100,105,128,],[63,63,63,63,63,63,110,111,63,63,63,]),'factor':([48,49,52,54,66,85,86,87,95,96,100,105,128,],[65,65,65,65,65,65,65,65,112,113,65,65,65,]),'varcte':([48,49,52,54,62,64,66,85,86,87,95,96,100,105,128,],[67,67,67,67,94,97,67,67,67,67,67,67,67,67,67,]),'expresion_list_opt':([49,],[70,]),'expresion_list':([49,],[71,]),'print_items':([54,],[77,]),'print_item':([54,105,],[78,120,]),'comparador':([61,],[85,]),'cuadr_if':([102,],[117,]),'func_end':([129,],[132,]),'else_arg':([130,],[133,]),'cuadr_else':([134,],[139,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON','Programa',11,'p_programa','parser_rules.py',7),
  ('main_marker -> KEYWORD_MAIN','main_marker',1,'p_main_marker','parser_rules.py',19),
  ('vars_opt -> KEYWORD_VAR var_lines','vars_opt',2,'p_vars_opt','parser_rules.py',24),
  ('vars_opt -> empty','vars_opt',1,'p_vars_opt','parser_rules.py',25),
  ('var_lines -> var_lines var_list SEMICOLON','var_lines',3,'p_var_lines','parser_rules.py',44),
  ('var_lines -> var_list SEMICOLON','var_lines',2,'p_var_lines','parser_rules.py',45),
  ('var_list -> ID id_list COLON type','var_list',4,'p_var_list','parser_rules.py',52),
  ('id_list -> COMMA ID id_list','id_list',3,'p_id_list','parser_rules.py',57),
  ('id_list -> empty','id_list',1,'p_id_list','parser_rules.py',58),
  ('type -> KEYWORD_INT','type',1,'p_type','parser_rules.py',65),
  ('type -> KEYWORD_FLOAT','type',1,'p_type','parser_rules.py',66),
  ('type -> KEYWORD_STRING','type',1,'p_type','parser_rules.py',67),
  ('funcs_opt -> funcs_opt FUNCS','funcs_opt',2,'p_funcs_opt','parser_rules.py',71),
  ('funcs_opt -> FUNCS','funcs_opt',1,'p_funcs_opt','parser_rules.py',72),
  ('funcs_opt -> empty','funcs_opt',1,'p_funcs_opt','parser_rules.py',73),
  ('FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON','FUNCS',12,'p_FUNCS','parser_rules.py',82),
  ('func_start -> <empty>','func_start',0,'p_func_start','parser_rules.py',90),
  ('func_end -> <empty>','func_end',0,'p_func_end','parser_rules.py',103),
  ('parametros_opt -> parametros','parametros_opt',1,'p_parametros_opt','parser_rules.py',107),
  ('parametros_opt -> empty','parametros_opt',1,'p_parametros_opt','parser_rules.py',108),
  ('parametros -> parametros COMMA ID COLON type','parametros',5,'p_parametros','parser_rules.py',115),
  ('parametros -> ID COLON type','parametros',3,'p_parametros','parser_rules.py',116),
  ('body -> statement_list','body',1,'p_body','parser_rules.py',148),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser_rules.py',152),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_rules.py',153),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser_rules.py',154),
  ('statement -> assign','statement',1,'p_statement','parser_rules.py',171),
  ('statement -> condition','statement',1,'p_statement','parser_rules.py',172),
  ('statement -> cycle','statement',1,'p_statement','parser_rules.py',173),
  ('statement -> f_call','statement',1,'p_statement','parser_rules.py',174),
  ('statement -> print','statement',1,'p_statement','parser_rules.py',175),
  ('assign -> ID ASSIGN_SIGN expresion SEMICOLON','assign',4,'p_assign','parser_rules.py',179),
  ('print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON','print',5,'p_print','parser_rules.py',213),
  ('print_items -> print_items COMMA print_item','print_items',3,'p_print_items','parser_rules.py',245),
  ('print_items -> print_item','print_items',1,'p_print_items','parser_rules.py',246),
  ('print_item -> expresion','print_item',1,'p_print_item','parser_rules.py',253),
  ('print_item -> CTE_STRING','print_item',1,'p_print_item','parser_rules.py',254),
  ('cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON','cycle',10,'p_cycle','parser_rules.py',261),
  ('cuadr_do -> <empty>','cuadr_do',0,'p_cuadr_do','parser_rules.py',285),
  ('condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON','condition',10,'p_condition','parser_rules.py',289),
  ('cuadr_if -> <empty>','cuadr_if',0,'p_cuadr_if','parser_rules.py',298),
  ('else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE','else_arg',5,'p_else_arg','parser_rules.py',313),
  ('cuadr_else -> <empty>','cuadr_else',0,'p_cuadr_else','parser_rules.py',317),
  ('else_arg -> empty','else_arg',1,'p_else_arg_empty','parser_rules.py',332),
  ('f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON','f_call',5,'p_f_call_simple','parser_rules.py',340),
  ('expresion_list_opt -> expresion_list','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',384),
  ('expresion_list_opt -> empty','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',385),
  ('expresion_list -> expresion_list COMMA expresion','expresion_list',3,'p_expresion_list','parser_rules.py',389),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','parser_rules.py',390),
  ('expresion -> exp comparador exp','expresion',3,'p_expresion','parser_rules.py',400),
  ('expresion -> exp','expresion',1,'p_expresion','parser_rules.py',401),
  ('comparador -> LESS','comparador',1,'p_comparador','parser_rules.py',428),
  ('comparador -> GREATER','comparador',1,'p_comparador','parser_rules.py',429),
  ('comparador -> NOT_EQUAL','comparador',1,'p_comparador','parser_rules.py',430),
  ('comparador -> EQUAL','comparador',1,'p_comparador','parser_rules.py',431),
  ('comparador -> GREATER_EQUAL','comparador',1,'p_comparador','parser_rules.py',432),
  ('comparador -> LESS_EQUAL','comparador',1,'p_comparador','parser_rules.py',433),
  ('exp -> exp OP_SUM termino','exp',3,'p_exp','parser_rules.py',437),
  ('exp -> exp OP_SUB termino','exp',3,'p_exp','parser_rules.py',438),
  ('exp -> termino','exp',1,'p_exp','parser_rules.py',439),
  ('termino -> termino OP_MUL factor','termino',3,'p_termino','parser_rules.py',469),
  ('termino -> termino OP_DIV factor','termino',3,'p_termino','parser_rules.py',470),
  ('termino -> factor','termino',1,'p_termino','parser_rules.py',471),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','parser_rules.py',501),
  ('factor -> OP_SUM varcte','factor',2,'p_factor','parser_rules.py',502),
  ('factor -> OP_SUB varcte','factor',2,'p_factor','parser_rules.py',503),
  ('factor -> varcte','factor',1,'p_factor','parser_rules.py',504),
  ('varcte -> ID','varcte',1,'p_varcte','parser_rules.py',528),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','parser_rules.py',529),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','parser_rules.py',530),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',548),
]
