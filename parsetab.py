
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN_SIGN COLON COMMA CTE_FLOAT CTE_INT CTE_STRING EQUAL GREATER GREATER_EQUAL ID KEYWORD_DO KEYWORD_ELSE KEYWORD_END KEYWORD_FLOAT KEYWORD_IF KEYWORD_INT KEYWORD_MAIN KEYWORD_PRINT KEYWORD_PROGRAM KEYWORD_STRING KEYWORD_VAR KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LESS LESS_EQUAL LPAREN NOT_EQUAL OP_DIV OP_MUL OP_SUB OP_SUM RBRACE RBRACKET RPAREN SEMICOLONPrograma : KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLONmain_marker : KEYWORD_MAINvars_opt : KEYWORD_VAR var_lines\n| emptyvar_lines : var_lines var_list SEMICOLON\n| var_list SEMICOLONvar_list : ID id_list COLON typeid_list : COMMA ID id_list\n| emptytype : KEYWORD_INT\n| KEYWORD_FLOAT\n| KEYWORD_STRINGfuncs_opt : funcs_opt FUNCS\n| FUNCS\n| emptyFUNCS : KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLONfunc_start :func_end :parametros_opt : parametros\n| emptyparametros : parametros COMMA ID COLON type\n| ID COLON typebody : statement_liststatement_list : statement statement_list\n| statement\n| emptystatement : assign\n| condition\n| cycle\n| f_call\n| printassign : ID ASSIGN_SIGN expresion SEMICOLONprint : KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLONprint_items : print_items COMMA print_item\n| print_itemprint_item : expresion\n| varctecycle : KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLONcuadr_do :condition : KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLONcuadr_if :else_arg : KEYWORD_ELSE cuadr_else LBRACE body RBRACEcuadr_else :else_arg : emptyf_call : ID LPAREN expresion_list_opt RPAREN SEMICOLONexpresion_list_opt : expresion_list\n| emptyexpresion_list : expresion_list COMMA expresion\n| expresionexpresion : exp comparador exp\n| expcomparador : LESS\n| GREATER\n| NOT_EQUAL\n| EQUAL\n| GREATER_EQUAL\n| LESS_EQUALexp : exp OP_SUM termino\n| exp OP_SUB termino\n| terminotermino : termino OP_MUL factor\n| termino OP_DIV factor\n| factorfactor : LPAREN expresion RPAREN\n| OP_SUM varcte\n| OP_SUB varcte\n| varctevarcte : ID\n| CTE_INT\n| CTE_FLOAT\n| CTE_STRINGempty :'
    
_lr_action_items = {'KEYWORD_PROGRAM':([0,],[2,]),'$end':([1,102,],[0,-1,]),'ID':([2,6,7,11,12,20,22,24,26,32,34,35,36,37,38,42,48,49,52,54,62,64,66,77,84,85,86,87,88,89,90,91,92,93,94,96,97,101,106,108,116,120,122,124,129,139,141,142,],[3,14,-4,18,14,-6,28,29,-5,29,-27,-28,-29,-30,-31,55,59,59,59,59,59,59,59,29,109,-32,59,59,59,-52,-53,-54,-55,-56,-57,59,59,59,59,-72,-45,-33,29,29,59,-40,-38,29,]),'SEMICOLON':([3,13,19,43,44,45,46,59,60,61,63,65,67,68,69,70,75,95,98,100,105,110,111,112,113,114,115,130,131,133,134,136,137,144,],[4,20,26,-7,-10,-11,-12,-68,85,-51,-60,-63,-67,-69,-70,-71,102,-65,-66,116,120,-50,-58,-59,-61,-62,-64,-18,-72,138,139,-44,141,-42,]),'KEYWORD_VAR':([4,108,],[6,6,]),'KEYWORD_VOID':([4,5,7,8,9,10,12,16,20,26,138,],[-72,11,-4,11,-14,-15,-3,-13,-6,-5,-16,]),'KEYWORD_MAIN':([4,5,7,8,9,10,12,16,20,26,138,],[-72,-72,-4,17,-14,-15,-3,-13,-6,-5,-16,]),'KEYWORD_IF':([7,12,20,24,26,32,34,35,36,37,38,77,85,108,116,120,122,124,139,141,142,],[-4,-3,-6,39,-5,39,-27,-28,-29,-30,-31,39,-32,-72,-45,-33,39,39,-40,-38,39,]),'KEYWORD_DO':([7,12,20,24,26,32,34,35,36,37,38,77,85,108,116,120,122,124,139,141,142,],[-4,-3,-6,40,-5,40,-27,-28,-29,-30,-31,40,-32,-72,-45,-33,40,40,-40,-38,40,]),'KEYWORD_PRINT':([7,12,20,24,26,32,34,35,36,37,38,77,85,108,116,120,122,124,139,141,142,],[-4,-3,-6,41,-5,41,-27,-28,-29,-30,-31,41,-32,-72,-45,-33,41,41,-40,-38,41,]),'RBRACKET':([7,12,20,26,31,32,33,34,35,36,37,38,51,85,108,116,120,122,126,139,141,],[-4,-3,-6,-5,-23,-25,-26,-27,-28,-29,-30,-31,-24,-32,-72,-45,-33,-72,130,-40,-38,]),'COMMA':([14,28,44,45,46,57,59,61,63,65,67,68,69,70,72,74,78,79,80,81,95,98,107,110,111,112,113,114,115,117,121,127,],[22,22,-10,-11,-12,84,-68,-51,-60,-63,-67,-69,-70,-71,101,-49,106,-35,-36,-37,-65,-66,-22,-50,-58,-59,-61,-62,-64,-48,-34,-21,]),'COLON':([14,21,23,28,47,55,109,],[-72,27,-9,-72,-8,82,123,]),'LBRACE':([15,17,40,53,103,118,135,140,],[24,-2,-39,77,-41,124,-43,142,]),'LPAREN':([18,25,29,39,41,48,49,52,54,66,86,87,88,89,90,91,92,93,94,96,97,101,106,125,129,],[-17,42,49,52,54,66,66,66,66,66,66,66,66,-52,-53,-54,-55,-56,-57,66,66,66,66,129,66,]),'RBRACE':([24,30,31,32,33,34,35,36,37,38,51,77,85,104,116,120,124,128,139,141,142,143,],[-72,50,-23,-25,-26,-27,-28,-29,-30,-31,-24,-72,-32,119,-45,-33,-72,131,-40,-38,-72,144,]),'KEYWORD_INT':([27,82,123,],[44,44,44,]),'KEYWORD_FLOAT':([27,82,123,],[45,45,45,]),'KEYWORD_STRING':([27,82,123,],[46,46,46,]),'ASSIGN_SIGN':([29,],[48,]),'RPAREN':([42,44,45,46,49,56,57,58,59,61,63,65,67,68,69,70,71,72,73,74,76,78,79,80,81,95,98,99,107,110,111,112,113,114,115,117,121,127,132,],[-72,-10,-11,-12,-72,83,-19,-20,-68,-51,-60,-63,-67,-69,-70,-71,100,-46,-47,-49,103,105,-35,-36,-37,-65,-66,115,-22,-50,-58,-59,-61,-62,-64,-48,-34,-21,137,]),'OP_SUM':([48,49,52,54,59,61,63,65,66,67,68,69,70,81,86,87,88,89,90,91,92,93,94,95,96,97,98,101,106,110,111,112,113,114,115,129,],[62,62,62,62,-68,87,-60,-63,62,-67,-69,-70,-71,-67,62,62,62,-52,-53,-54,-55,-56,-57,-65,62,62,-66,62,62,87,-58,-59,-61,-62,-64,62,]),'OP_SUB':([48,49,52,54,59,61,63,65,66,67,68,69,70,81,86,87,88,89,90,91,92,93,94,95,96,97,98,101,106,110,111,112,113,114,115,129,],[64,64,64,64,-68,88,-60,-63,64,-67,-69,-70,-71,-67,64,64,64,-52,-53,-54,-55,-56,-57,-65,64,64,-66,64,64,88,-58,-59,-61,-62,-64,64,]),'CTE_INT':([48,49,52,54,62,64,66,86,87,88,89,90,91,92,93,94,96,97,101,106,129,],[68,68,68,68,68,68,68,68,68,68,-52,-53,-54,-55,-56,-57,68,68,68,68,68,]),'CTE_FLOAT':([48,49,52,54,62,64,66,86,87,88,89,90,91,92,93,94,96,97,101,106,129,],[69,69,69,69,69,69,69,69,69,69,-52,-53,-54,-55,-56,-57,69,69,69,69,69,]),'CTE_STRING':([48,49,52,54,62,64,66,86,87,88,89,90,91,92,93,94,96,97,101,106,129,],[70,70,70,70,70,70,70,70,70,70,-52,-53,-54,-55,-56,-57,70,70,70,70,70,]),'KEYWORD_END':([50,],[75,]),'OP_MUL':([59,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,96,-63,-67,-69,-70,-71,-67,-65,-66,96,96,-61,-62,-64,]),'OP_DIV':([59,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,97,-63,-67,-69,-70,-71,-67,-65,-66,97,97,-61,-62,-64,]),'LESS':([59,61,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,89,-60,-63,-67,-69,-70,-71,-67,-65,-66,-58,-59,-61,-62,-64,]),'GREATER':([59,61,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,90,-60,-63,-67,-69,-70,-71,-67,-65,-66,-58,-59,-61,-62,-64,]),'NOT_EQUAL':([59,61,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,91,-60,-63,-67,-69,-70,-71,-67,-65,-66,-58,-59,-61,-62,-64,]),'EQUAL':([59,61,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,92,-60,-63,-67,-69,-70,-71,-67,-65,-66,-58,-59,-61,-62,-64,]),'GREATER_EQUAL':([59,61,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,93,-60,-63,-67,-69,-70,-71,-67,-65,-66,-58,-59,-61,-62,-64,]),'LESS_EQUAL':([59,61,63,65,67,68,69,70,81,95,98,111,112,113,114,115,],[-68,94,-60,-63,-67,-69,-70,-71,-67,-65,-66,-58,-59,-61,-62,-64,]),'LBRACKET':([83,],[108,]),'KEYWORD_WHILE':([119,],[125,]),'KEYWORD_ELSE':([131,],[135,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'vars_opt':([4,108,],[5,122,]),'empty':([4,5,14,24,28,32,42,49,77,108,122,124,131,142,],[7,10,23,33,23,33,58,73,33,7,33,33,136,33,]),'funcs_opt':([5,],[8,]),'FUNCS':([5,8,],[9,16,]),'var_lines':([6,],[12,]),'var_list':([6,12,],[13,19,]),'main_marker':([8,],[15,]),'id_list':([14,28,],[21,47,]),'func_start':([18,],[25,]),'body':([24,77,122,124,142,],[30,104,126,128,143,]),'statement_list':([24,32,77,122,124,142,],[31,51,31,31,31,31,]),'statement':([24,32,77,122,124,142,],[32,32,32,32,32,32,]),'assign':([24,32,77,122,124,142,],[34,34,34,34,34,34,]),'condition':([24,32,77,122,124,142,],[35,35,35,35,35,35,]),'cycle':([24,32,77,122,124,142,],[36,36,36,36,36,36,]),'f_call':([24,32,77,122,124,142,],[37,37,37,37,37,37,]),'print':([24,32,77,122,124,142,],[38,38,38,38,38,38,]),'type':([27,82,123,],[43,107,127,]),'cuadr_do':([40,],[53,]),'parametros_opt':([42,],[56,]),'parametros':([42,],[57,]),'expresion':([48,49,52,54,66,101,106,129,],[60,74,76,80,99,117,80,132,]),'exp':([48,49,52,54,66,86,101,106,129,],[61,61,61,61,61,110,61,61,61,]),'termino':([48,49,52,54,66,86,87,88,101,106,129,],[63,63,63,63,63,63,111,112,63,63,63,]),'factor':([48,49,52,54,66,86,87,88,96,97,101,106,129,],[65,65,65,65,65,65,65,65,113,114,65,65,65,]),'varcte':([48,49,52,54,62,64,66,86,87,88,96,97,101,106,129,],[67,67,67,81,95,98,67,67,67,67,67,67,67,81,67,]),'expresion_list_opt':([49,],[71,]),'expresion_list':([49,],[72,]),'print_items':([54,],[78,]),'print_item':([54,106,],[79,121,]),'comparador':([61,],[86,]),'cuadr_if':([103,],[118,]),'func_end':([130,],[133,]),'else_arg':([131,],[134,]),'cuadr_else':([135,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON','Programa',11,'p_programa','parser_rules.py',7),
  ('main_marker -> KEYWORD_MAIN','main_marker',1,'p_main_marker','parser_rules.py',21),
  ('vars_opt -> KEYWORD_VAR var_lines','vars_opt',2,'p_vars_opt','parser_rules.py',26),
  ('vars_opt -> empty','vars_opt',1,'p_vars_opt','parser_rules.py',27),
  ('var_lines -> var_lines var_list SEMICOLON','var_lines',3,'p_var_lines','parser_rules.py',46),
  ('var_lines -> var_list SEMICOLON','var_lines',2,'p_var_lines','parser_rules.py',47),
  ('var_list -> ID id_list COLON type','var_list',4,'p_var_list','parser_rules.py',54),
  ('id_list -> COMMA ID id_list','id_list',3,'p_id_list','parser_rules.py',59),
  ('id_list -> empty','id_list',1,'p_id_list','parser_rules.py',60),
  ('type -> KEYWORD_INT','type',1,'p_type','parser_rules.py',67),
  ('type -> KEYWORD_FLOAT','type',1,'p_type','parser_rules.py',68),
  ('type -> KEYWORD_STRING','type',1,'p_type','parser_rules.py',69),
  ('funcs_opt -> funcs_opt FUNCS','funcs_opt',2,'p_funcs_opt','parser_rules.py',73),
  ('funcs_opt -> FUNCS','funcs_opt',1,'p_funcs_opt','parser_rules.py',74),
  ('funcs_opt -> empty','funcs_opt',1,'p_funcs_opt','parser_rules.py',75),
  ('FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON','FUNCS',12,'p_FUNCS','parser_rules.py',84),
  ('func_start -> <empty>','func_start',0,'p_func_start','parser_rules.py',92),
  ('func_end -> <empty>','func_end',0,'p_func_end','parser_rules.py',106),
  ('parametros_opt -> parametros','parametros_opt',1,'p_parametros_opt','parser_rules.py',110),
  ('parametros_opt -> empty','parametros_opt',1,'p_parametros_opt','parser_rules.py',111),
  ('parametros -> parametros COMMA ID COLON type','parametros',5,'p_parametros','parser_rules.py',118),
  ('parametros -> ID COLON type','parametros',3,'p_parametros','parser_rules.py',119),
  ('body -> statement_list','body',1,'p_body','parser_rules.py',151),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser_rules.py',155),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_rules.py',156),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser_rules.py',157),
  ('statement -> assign','statement',1,'p_statement','parser_rules.py',174),
  ('statement -> condition','statement',1,'p_statement','parser_rules.py',175),
  ('statement -> cycle','statement',1,'p_statement','parser_rules.py',176),
  ('statement -> f_call','statement',1,'p_statement','parser_rules.py',177),
  ('statement -> print','statement',1,'p_statement','parser_rules.py',178),
  ('assign -> ID ASSIGN_SIGN expresion SEMICOLON','assign',4,'p_assign','parser_rules.py',182),
  ('print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON','print',5,'p_print','parser_rules.py',210),
  ('print_items -> print_items COMMA print_item','print_items',3,'p_print_items','parser_rules.py',244),
  ('print_items -> print_item','print_items',1,'p_print_items','parser_rules.py',245),
  ('print_item -> expresion','print_item',1,'p_print_item','parser_rules.py',252),
  ('print_item -> varcte','print_item',1,'p_print_item','parser_rules.py',253),
  ('cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON','cycle',10,'p_cycle','parser_rules.py',260),
  ('cuadr_do -> <empty>','cuadr_do',0,'p_cuadr_do','parser_rules.py',284),
  ('condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON','condition',10,'p_condition','parser_rules.py',288),
  ('cuadr_if -> <empty>','cuadr_if',0,'p_cuadr_if','parser_rules.py',297),
  ('else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE','else_arg',5,'p_else_arg','parser_rules.py',312),
  ('cuadr_else -> <empty>','cuadr_else',0,'p_cuadr_else','parser_rules.py',316),
  ('else_arg -> empty','else_arg',1,'p_else_arg_empty','parser_rules.py',331),
  ('f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON','f_call',5,'p_f_call_simple','parser_rules.py',339),
  ('expresion_list_opt -> expresion_list','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',383),
  ('expresion_list_opt -> empty','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',384),
  ('expresion_list -> expresion_list COMMA expresion','expresion_list',3,'p_expresion_list','parser_rules.py',388),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','parser_rules.py',389),
  ('expresion -> exp comparador exp','expresion',3,'p_expresion','parser_rules.py',399),
  ('expresion -> exp','expresion',1,'p_expresion','parser_rules.py',400),
  ('comparador -> LESS','comparador',1,'p_comparador','parser_rules.py',427),
  ('comparador -> GREATER','comparador',1,'p_comparador','parser_rules.py',428),
  ('comparador -> NOT_EQUAL','comparador',1,'p_comparador','parser_rules.py',429),
  ('comparador -> EQUAL','comparador',1,'p_comparador','parser_rules.py',430),
  ('comparador -> GREATER_EQUAL','comparador',1,'p_comparador','parser_rules.py',431),
  ('comparador -> LESS_EQUAL','comparador',1,'p_comparador','parser_rules.py',432),
  ('exp -> exp OP_SUM termino','exp',3,'p_exp','parser_rules.py',436),
  ('exp -> exp OP_SUB termino','exp',3,'p_exp','parser_rules.py',437),
  ('exp -> termino','exp',1,'p_exp','parser_rules.py',438),
  ('termino -> termino OP_MUL factor','termino',3,'p_termino','parser_rules.py',468),
  ('termino -> termino OP_DIV factor','termino',3,'p_termino','parser_rules.py',469),
  ('termino -> factor','termino',1,'p_termino','parser_rules.py',470),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','parser_rules.py',500),
  ('factor -> OP_SUM varcte','factor',2,'p_factor','parser_rules.py',501),
  ('factor -> OP_SUB varcte','factor',2,'p_factor','parser_rules.py',502),
  ('factor -> varcte','factor',1,'p_factor','parser_rules.py',503),
  ('varcte -> ID','varcte',1,'p_varcte','parser_rules.py',527),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','parser_rules.py',528),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','parser_rules.py',529),
  ('varcte -> CTE_STRING','varcte',1,'p_varcte','parser_rules.py',530),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',551),
]
