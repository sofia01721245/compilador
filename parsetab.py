
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOMMAleftSEMICOLONleftCOLONleftASSIGN_SIGNASSIGN_SIGN COLON COMMA CTE_FLOAT CTE_INT CTE_STRING EQUAL GREATER GREATER_EQUAL ID KEYWORD_DO KEYWORD_ELSE KEYWORD_END KEYWORD_FLOAT KEYWORD_IF KEYWORD_INT KEYWORD_MAIN KEYWORD_PRINT KEYWORD_PROGRAM KEYWORD_STRING KEYWORD_VAR KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LESS LESS_EQUAL LPAREN NOT_EQUAL OP_DIV OP_MUL OP_SUB OP_SUM RBRACE RBRACKET RPAREN SEMICOLONPrograma : KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLONmain_marker : KEYWORD_MAINvars_opt : var_block\n| emptyvar_block : KEYWORD_VAR var_linesvar_lines : var_lines var_list SEMICOLON\n| var_list SEMICOLONvar_list : ID id_list COLON typeid_list : COMMA ID id_list\n| emptytype : KEYWORD_INT\n| KEYWORD_FLOAT\n| KEYWORD_STRINGfuncs_opt : funcs_opt FUNCS\n| FUNCS\n| emptyFUNCS : KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLONfunc_start :func_end :parametros_opt : parametros\n| emptyparametros : parametros COMMA ID COLON type\n| ID COLON typebody : statement_liststatement_list : statement statement_list\n| statement\n| emptystatement : assign\n| condition\n| cycle\n| f_call\n| printassign : ID ASSIGN_SIGN expresion SEMICOLONprint : KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLONprint_items : print_items COMMA print_item\n| print_itemprint_item : expresion\n| varctecycle : KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLONcuadr_do :condition : KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLONcuadr_if :else_arg : KEYWORD_ELSE cuadr_else LBRACE body RBRACEcuadr_else :else_arg : emptyf_call : ID LPAREN expresion_list_opt RPAREN SEMICOLONexpresion_list_opt : expresion_list\n| emptyexpresion_list : expresion_list COMMA expresion\n| expresionexpresion : exp comparador exp\n| expcomparador : LESS\n| GREATER\n| NOT_EQUAL\n| EQUAL\n| GREATER_EQUAL\n| LESS_EQUALexp : exp OP_SUM termino\n| exp OP_SUB termino\n| terminotermino : termino OP_MUL factor\n| termino OP_DIV factor\n| factorfactor : LPAREN expresion RPAREN\n| OP_SUM varcte\n| OP_SUB varcte\n| varctevarcte : ID\n| CTE_INT\n| CTE_FLOAT\n| CTE_STRINGempty :'
    
_lr_action_items = {'KEYWORD_PROGRAM':([0,],[2,]),'$end':([1,103,],[0,-1,]),'ID':([2,8,12,13,21,23,25,27,33,35,36,37,38,39,43,49,50,53,55,63,65,67,78,85,86,87,88,89,90,91,92,93,94,95,97,98,102,107,117,121,125,127,130,140,142,144,],[3,15,19,15,-7,29,30,-6,30,-28,-29,-30,-31,-32,56,60,60,60,60,60,60,60,30,110,-33,60,60,60,-53,-54,-55,-56,-57,-58,60,60,60,60,-46,-34,30,30,60,-41,-39,30,]),'SEMICOLON':([3,14,20,44,45,46,47,60,61,62,64,66,68,69,70,71,76,96,99,101,106,111,112,113,114,115,116,132,135,137,138,139,143,147,],[4,21,27,-8,-11,-12,-13,-69,86,-52,-61,-64,-68,-70,-71,-72,103,-66,-67,117,121,-51,-59,-60,-62,-63,-65,-73,140,-45,142,-19,145,-43,]),'KEYWORD_VAR':([4,109,],[8,8,]),'KEYWORD_VOID':([4,5,6,7,9,10,11,13,17,21,27,145,],[-73,12,-3,-4,12,-15,-16,-5,-14,-7,-6,-17,]),'KEYWORD_MAIN':([4,5,6,7,9,10,11,13,17,21,27,145,],[-73,-73,-3,-4,18,-15,-16,-5,-14,-7,-6,-17,]),'LBRACE':([6,7,13,16,18,21,27,41,54,104,109,119,123,136,141,],[-3,-4,-5,25,-2,-7,-6,-40,78,-42,-73,125,127,-44,144,]),'COMMA':([15,29,45,46,47,58,60,62,64,66,68,69,70,71,73,75,79,80,81,82,96,99,108,111,112,113,114,115,116,118,122,128,],[23,23,-11,-12,-13,85,-69,-52,-61,-64,-68,-70,-71,-72,102,-50,107,-36,-37,-38,-66,-67,-23,-51,-59,-60,-62,-63,-65,-49,-35,-22,]),'COLON':([15,22,24,29,48,56,110,],[-73,28,-10,-73,-9,83,124,]),'LPAREN':([19,26,30,40,42,49,50,53,55,67,87,88,89,90,91,92,93,94,95,97,98,102,107,126,130,],[-18,43,50,53,55,67,67,67,67,67,67,67,67,-53,-54,-55,-56,-57,-58,67,67,67,67,130,67,]),'RBRACE':([25,31,32,33,34,35,36,37,38,39,52,78,86,105,117,121,125,127,129,131,140,142,144,146,],[-73,51,-24,-26,-27,-28,-29,-30,-31,-32,-25,-73,-33,120,-46,-34,-73,-73,132,134,-41,-39,-73,147,]),'KEYWORD_IF':([25,33,35,36,37,38,39,78,86,117,121,125,127,140,142,144,],[40,40,-28,-29,-30,-31,-32,40,-33,-46,-34,40,40,-41,-39,40,]),'KEYWORD_DO':([25,33,35,36,37,38,39,78,86,117,121,125,127,140,142,144,],[41,41,-28,-29,-30,-31,-32,41,-33,-46,-34,41,41,-41,-39,41,]),'KEYWORD_PRINT':([25,33,35,36,37,38,39,78,86,117,121,125,127,140,142,144,],[42,42,-28,-29,-30,-31,-32,42,-33,-46,-34,42,42,-41,-39,42,]),'KEYWORD_INT':([28,83,124,],[45,45,45,]),'KEYWORD_FLOAT':([28,83,124,],[46,46,46,]),'KEYWORD_STRING':([28,83,124,],[47,47,47,]),'ASSIGN_SIGN':([30,],[49,]),'RPAREN':([43,45,46,47,50,57,58,59,60,62,64,66,68,69,70,71,72,73,74,75,77,79,80,81,82,96,99,100,108,111,112,113,114,115,116,118,122,128,133,],[-73,-11,-12,-13,-73,84,-20,-21,-69,-52,-61,-64,-68,-70,-71,-72,101,-47,-48,-50,104,106,-36,-37,-38,-66,-67,116,-23,-51,-59,-60,-62,-63,-65,-49,-35,-22,138,]),'OP_SUM':([49,50,53,55,60,62,64,66,67,68,69,70,71,82,87,88,89,90,91,92,93,94,95,96,97,98,99,102,107,111,112,113,114,115,116,130,],[63,63,63,63,-69,88,-61,-64,63,-68,-70,-71,-72,-68,63,63,63,-53,-54,-55,-56,-57,-58,-66,63,63,-67,63,63,88,-59,-60,-62,-63,-65,63,]),'OP_SUB':([49,50,53,55,60,62,64,66,67,68,69,70,71,82,87,88,89,90,91,92,93,94,95,96,97,98,99,102,107,111,112,113,114,115,116,130,],[65,65,65,65,-69,89,-61,-64,65,-68,-70,-71,-72,-68,65,65,65,-53,-54,-55,-56,-57,-58,-66,65,65,-67,65,65,89,-59,-60,-62,-63,-65,65,]),'CTE_INT':([49,50,53,55,63,65,67,87,88,89,90,91,92,93,94,95,97,98,102,107,130,],[69,69,69,69,69,69,69,69,69,69,-53,-54,-55,-56,-57,-58,69,69,69,69,69,]),'CTE_FLOAT':([49,50,53,55,63,65,67,87,88,89,90,91,92,93,94,95,97,98,102,107,130,],[70,70,70,70,70,70,70,70,70,70,-53,-54,-55,-56,-57,-58,70,70,70,70,70,]),'CTE_STRING':([49,50,53,55,63,65,67,87,88,89,90,91,92,93,94,95,97,98,102,107,130,],[71,71,71,71,71,71,71,71,71,71,-53,-54,-55,-56,-57,-58,71,71,71,71,71,]),'KEYWORD_END':([51,],[76,]),'OP_MUL':([60,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,97,-64,-68,-70,-71,-72,-68,-66,-67,97,97,-62,-63,-65,]),'OP_DIV':([60,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,98,-64,-68,-70,-71,-72,-68,-66,-67,98,98,-62,-63,-65,]),'LESS':([60,62,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,90,-61,-64,-68,-70,-71,-72,-68,-66,-67,-59,-60,-62,-63,-65,]),'GREATER':([60,62,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,91,-61,-64,-68,-70,-71,-72,-68,-66,-67,-59,-60,-62,-63,-65,]),'NOT_EQUAL':([60,62,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,92,-61,-64,-68,-70,-71,-72,-68,-66,-67,-59,-60,-62,-63,-65,]),'EQUAL':([60,62,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,93,-61,-64,-68,-70,-71,-72,-68,-66,-67,-59,-60,-62,-63,-65,]),'GREATER_EQUAL':([60,62,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,94,-61,-64,-68,-70,-71,-72,-68,-66,-67,-59,-60,-62,-63,-65,]),'LESS_EQUAL':([60,62,64,66,68,69,70,71,82,96,99,112,113,114,115,116,],[-69,95,-61,-64,-68,-70,-71,-72,-68,-66,-67,-59,-60,-62,-63,-65,]),'LBRACKET':([84,],[109,]),'KEYWORD_WHILE':([120,],[126,]),'KEYWORD_ELSE':([132,],[136,]),'RBRACKET':([134,],[139,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'vars_opt':([4,109,],[5,123,]),'var_block':([4,109,],[6,6,]),'empty':([4,5,15,25,29,33,43,50,78,109,125,127,132,144,],[7,11,24,34,24,34,59,74,34,7,34,34,137,34,]),'funcs_opt':([5,],[9,]),'FUNCS':([5,9,],[10,17,]),'var_lines':([8,],[13,]),'var_list':([8,13,],[14,20,]),'main_marker':([9,],[16,]),'id_list':([15,29,],[22,48,]),'func_start':([19,],[26,]),'body':([25,78,125,127,144,],[31,105,129,131,146,]),'statement_list':([25,33,78,125,127,144,],[32,52,32,32,32,32,]),'statement':([25,33,78,125,127,144,],[33,33,33,33,33,33,]),'assign':([25,33,78,125,127,144,],[35,35,35,35,35,35,]),'condition':([25,33,78,125,127,144,],[36,36,36,36,36,36,]),'cycle':([25,33,78,125,127,144,],[37,37,37,37,37,37,]),'f_call':([25,33,78,125,127,144,],[38,38,38,38,38,38,]),'print':([25,33,78,125,127,144,],[39,39,39,39,39,39,]),'type':([28,83,124,],[44,108,128,]),'cuadr_do':([41,],[54,]),'parametros_opt':([43,],[57,]),'parametros':([43,],[58,]),'expresion':([49,50,53,55,67,102,107,130,],[61,75,77,81,100,118,81,133,]),'exp':([49,50,53,55,67,87,102,107,130,],[62,62,62,62,62,111,62,62,62,]),'termino':([49,50,53,55,67,87,88,89,102,107,130,],[64,64,64,64,64,64,112,113,64,64,64,]),'factor':([49,50,53,55,67,87,88,89,97,98,102,107,130,],[66,66,66,66,66,66,66,66,114,115,66,66,66,]),'varcte':([49,50,53,55,63,65,67,87,88,89,97,98,102,107,130,],[68,68,68,82,96,99,68,68,68,68,68,68,68,82,68,]),'expresion_list_opt':([50,],[72,]),'expresion_list':([50,],[73,]),'print_items':([55,],[79,]),'print_item':([55,107,],[80,122,]),'comparador':([62,],[87,]),'cuadr_if':([104,],[119,]),'else_arg':([132,],[135,]),'cuadr_else':([136,],[141,]),'func_end':([139,],[143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt main_marker LBRACE body RBRACE KEYWORD_END SEMICOLON','Programa',11,'p_programa','parser_rules.py',14),
  ('main_marker -> KEYWORD_MAIN','main_marker',1,'p_main_marker','parser_rules.py',30),
  ('vars_opt -> var_block','vars_opt',1,'p_vars_opt','parser_rules.py',36),
  ('vars_opt -> empty','vars_opt',1,'p_vars_opt','parser_rules.py',37),
  ('var_block -> KEYWORD_VAR var_lines','var_block',2,'p_var_block','parser_rules.py',44),
  ('var_lines -> var_lines var_list SEMICOLON','var_lines',3,'p_var_lines','parser_rules.py',76),
  ('var_lines -> var_list SEMICOLON','var_lines',2,'p_var_lines','parser_rules.py',77),
  ('var_list -> ID id_list COLON type','var_list',4,'p_var_list','parser_rules.py',84),
  ('id_list -> COMMA ID id_list','id_list',3,'p_id_list','parser_rules.py',89),
  ('id_list -> empty','id_list',1,'p_id_list','parser_rules.py',90),
  ('type -> KEYWORD_INT','type',1,'p_type','parser_rules.py',97),
  ('type -> KEYWORD_FLOAT','type',1,'p_type','parser_rules.py',98),
  ('type -> KEYWORD_STRING','type',1,'p_type','parser_rules.py',99),
  ('funcs_opt -> funcs_opt FUNCS','funcs_opt',2,'p_funcs_opt','parser_rules.py',103),
  ('funcs_opt -> FUNCS','funcs_opt',1,'p_funcs_opt','parser_rules.py',104),
  ('funcs_opt -> empty','funcs_opt',1,'p_funcs_opt','parser_rules.py',105),
  ('FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt LBRACE body RBRACE RBRACKET func_end SEMICOLON','FUNCS',14,'p_FUNCS','parser_rules.py',114),
  ('func_start -> <empty>','func_start',0,'p_func_start','parser_rules.py',122),
  ('func_end -> <empty>','func_end',0,'p_func_end','parser_rules.py',134),
  ('parametros_opt -> parametros','parametros_opt',1,'p_parametros_opt','parser_rules.py',140),
  ('parametros_opt -> empty','parametros_opt',1,'p_parametros_opt','parser_rules.py',141),
  ('parametros -> parametros COMMA ID COLON type','parametros',5,'p_parametros','parser_rules.py',148),
  ('parametros -> ID COLON type','parametros',3,'p_parametros','parser_rules.py',149),
  ('body -> statement_list','body',1,'p_body','parser_rules.py',193),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser_rules.py',197),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_rules.py',198),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser_rules.py',199),
  ('statement -> assign','statement',1,'p_statement','parser_rules.py',216),
  ('statement -> condition','statement',1,'p_statement','parser_rules.py',217),
  ('statement -> cycle','statement',1,'p_statement','parser_rules.py',218),
  ('statement -> f_call','statement',1,'p_statement','parser_rules.py',219),
  ('statement -> print','statement',1,'p_statement','parser_rules.py',220),
  ('assign -> ID ASSIGN_SIGN expresion SEMICOLON','assign',4,'p_assign','parser_rules.py',224),
  ('print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON','print',5,'p_print','parser_rules.py',252),
  ('print_items -> print_items COMMA print_item','print_items',3,'p_print_items','parser_rules.py',289),
  ('print_items -> print_item','print_items',1,'p_print_items','parser_rules.py',290),
  ('print_item -> expresion','print_item',1,'p_print_item','parser_rules.py',297),
  ('print_item -> varcte','print_item',1,'p_print_item','parser_rules.py',298),
  ('cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON','cycle',10,'p_cycle','parser_rules.py',305),
  ('cuadr_do -> <empty>','cuadr_do',0,'p_cuadr_do','parser_rules.py',332),
  ('condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON','condition',10,'p_condition','parser_rules.py',336),
  ('cuadr_if -> <empty>','cuadr_if',0,'p_cuadr_if','parser_rules.py',344),
  ('else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE','else_arg',5,'p_else_arg','parser_rules.py',360),
  ('cuadr_else -> <empty>','cuadr_else',0,'p_cuadr_else','parser_rules.py',364),
  ('else_arg -> empty','else_arg',1,'p_else_arg_empty','parser_rules.py',378),
  ('f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON','f_call',5,'p_f_call_simple','parser_rules.py',385),
  ('expresion_list_opt -> expresion_list','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',436),
  ('expresion_list_opt -> empty','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',437),
  ('expresion_list -> expresion_list COMMA expresion','expresion_list',3,'p_expresion_list','parser_rules.py',441),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','parser_rules.py',442),
  ('expresion -> exp comparador exp','expresion',3,'p_expresion','parser_rules.py',452),
  ('expresion -> exp','expresion',1,'p_expresion','parser_rules.py',453),
  ('comparador -> LESS','comparador',1,'p_comparador','parser_rules.py',482),
  ('comparador -> GREATER','comparador',1,'p_comparador','parser_rules.py',483),
  ('comparador -> NOT_EQUAL','comparador',1,'p_comparador','parser_rules.py',484),
  ('comparador -> EQUAL','comparador',1,'p_comparador','parser_rules.py',485),
  ('comparador -> GREATER_EQUAL','comparador',1,'p_comparador','parser_rules.py',486),
  ('comparador -> LESS_EQUAL','comparador',1,'p_comparador','parser_rules.py',487),
  ('exp -> exp OP_SUM termino','exp',3,'p_exp','parser_rules.py',491),
  ('exp -> exp OP_SUB termino','exp',3,'p_exp','parser_rules.py',492),
  ('exp -> termino','exp',1,'p_exp','parser_rules.py',493),
  ('termino -> termino OP_MUL factor','termino',3,'p_termino','parser_rules.py',526),
  ('termino -> termino OP_DIV factor','termino',3,'p_termino','parser_rules.py',527),
  ('termino -> factor','termino',1,'p_termino','parser_rules.py',528),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','parser_rules.py',561),
  ('factor -> OP_SUM varcte','factor',2,'p_factor','parser_rules.py',562),
  ('factor -> OP_SUB varcte','factor',2,'p_factor','parser_rules.py',563),
  ('factor -> varcte','factor',1,'p_factor','parser_rules.py',564),
  ('varcte -> ID','varcte',1,'p_varcte','parser_rules.py',588),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','parser_rules.py',589),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','parser_rules.py',590),
  ('varcte -> CTE_STRING','varcte',1,'p_varcte','parser_rules.py',591),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',613),
]
