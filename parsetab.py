
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN_SIGN COLON COMMA CTE_FLOAT CTE_INT CTE_STRING EQUAL GREATER GREATER_EQUAL ID KEYWORD_DO KEYWORD_ELSE KEYWORD_END KEYWORD_FLOAT KEYWORD_IF KEYWORD_INT KEYWORD_MAIN KEYWORD_PRINT KEYWORD_PROGRAM KEYWORD_STRING KEYWORD_VAR KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LESS LESS_EQUAL LPAREN NOT_EQUAL OP_DIV OP_MUL OP_SUB OP_SUM RBRACE RBRACKET RPAREN SEMICOLONPrograma : KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLONvars_opt : KEYWORD_VAR var_lines\n| emptyvar_lines : var_lines var_list SEMICOLON\n| var_list SEMICOLONvar_list : ID id_list COLON typeid_list : COMMA ID id_list\n| emptytype : KEYWORD_INT\n| KEYWORD_FLOAT\n| KEYWORD_STRINGfuncs_opt : funcs_opt FUNCS\n| FUNCS\n| emptyFUNCS : KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLONfunc_start :func_end :parametros_opt : parametros\n| emptyparametros : ID COLON type COMMA parametros\n| ID COLON typeparam_list : ID COLON type COMMA param_list\n| emptybody : statement_liststatement_list : statement statement_list\n| statement\n| emptystatement : assign\n| condition\n| cycle\n| f_call\n| printassign : ID ASSIGN_SIGN expresion SEMICOLONprint : KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLONprint_items : print_items COMMA print_item\n| print_itemprint_item : expresion\n| CTE_STRINGcycle : KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLONcuadr_do :condition : KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLONcuadr_if :else_arg : KEYWORD_ELSE cuadr_else LBRACE body RBRACEcuadr_else :else_arg : emptyf_call : ID LPAREN expresion_list_opt RPAREN SEMICOLONexpresion_list_opt : expresion_list\n| emptyexpresion_list : expresion_list COMMA expresion\n| expresionexpresion : exp comparador exp\n| expcomparador : LESS\n| GREATER\n| NOT_EQUAL\n| EQUAL\n| GREATER_EQUAL\n| LESS_EQUALexp : exp OP_SUM termino\n| exp OP_SUB termino\n| terminotermino : termino OP_MUL factor\n| termino OP_DIV factor\n| factorfactor : LPAREN expresion RPAREN\n| OP_SUM varcte\n| OP_SUB varcte\n| varctevarcte : ID\n| CTE_INT\n| CTE_FLOATempty :'
    
_lr_action_items = {'KEYWORD_PROGRAM':([0,],[2,]),'$end':([1,99,],[0,-1,]),'ID':([2,6,7,11,12,19,21,23,25,31,33,34,35,36,37,41,47,48,51,53,61,63,65,75,82,83,84,85,86,87,88,89,90,91,93,94,98,103,105,112,116,118,119,120,125,135,137,138,],[3,14,-3,17,14,-5,27,28,-4,28,-28,-29,-30,-31,-32,54,58,58,58,58,58,58,58,28,-33,58,58,58,-53,-54,-55,-56,-57,-58,58,58,58,58,-72,-46,-34,54,28,28,58,-41,-39,28,]),'SEMICOLON':([3,13,18,42,43,44,45,58,59,60,62,64,66,67,68,73,92,95,97,102,106,107,108,109,110,111,126,127,129,130,132,133,140,],[4,19,25,-6,-9,-10,-11,-69,82,-52,-61,-64,-68,-70,-71,99,-66,-67,112,116,-51,-59,-60,-62,-63,-65,-17,-72,134,135,-45,137,-43,]),'KEYWORD_VAR':([4,105,],[6,6,]),'KEYWORD_VOID':([4,5,7,8,9,10,12,16,19,25,134,],[-72,11,-3,11,-13,-14,-2,-12,-5,-4,-15,]),'KEYWORD_MAIN':([4,5,7,8,9,10,12,16,19,25,134,],[-72,-72,-3,15,-13,-14,-2,-12,-5,-4,-15,]),'KEYWORD_IF':([7,12,19,23,25,31,33,34,35,36,37,75,82,105,112,116,119,120,135,137,138,],[-3,-2,-5,38,-4,38,-28,-29,-30,-31,-32,38,-33,-72,-46,-34,38,38,-41,-39,38,]),'KEYWORD_DO':([7,12,19,23,25,31,33,34,35,36,37,75,82,105,112,116,119,120,135,137,138,],[-3,-2,-5,39,-4,39,-28,-29,-30,-31,-32,39,-33,-72,-46,-34,39,39,-41,-39,39,]),'KEYWORD_PRINT':([7,12,19,23,25,31,33,34,35,36,37,75,82,105,112,116,119,120,135,137,138,],[-3,-2,-5,40,-4,40,-28,-29,-30,-31,-32,40,-33,-72,-46,-34,40,40,-41,-39,40,]),'RBRACKET':([7,12,19,25,30,31,32,33,34,35,36,37,50,82,105,112,116,119,123,135,137,],[-3,-2,-5,-4,-24,-26,-27,-28,-29,-30,-31,-32,-25,-33,-72,-46,-34,-72,126,-41,-39,]),'COMMA':([14,27,43,44,45,58,60,62,64,66,67,68,70,72,76,77,78,79,92,95,104,106,107,108,109,110,111,113,117,],[21,21,-9,-10,-11,-69,-52,-61,-64,-68,-70,-71,98,-50,103,-36,-37,-38,-66,-67,118,-51,-59,-60,-62,-63,-65,-49,-35,]),'COLON':([14,20,22,27,46,54,],[-72,26,-8,-72,-7,80,]),'LBRACE':([15,39,52,100,114,131,136,],[23,-40,75,-42,120,-44,138,]),'LPAREN':([17,24,28,38,40,47,48,51,53,65,83,84,85,86,87,88,89,90,91,93,94,98,103,121,125,],[-16,41,48,51,53,65,65,65,65,65,65,65,65,-53,-54,-55,-56,-57,-58,65,65,65,65,125,65,]),'RBRACE':([23,29,30,31,32,33,34,35,36,37,50,75,82,101,112,116,120,124,135,137,138,139,],[-72,49,-24,-26,-27,-28,-29,-30,-31,-32,-25,-72,-33,115,-46,-34,-72,127,-41,-39,-72,140,]),'KEYWORD_INT':([26,80,],[43,43,]),'KEYWORD_FLOAT':([26,80,],[44,44,]),'KEYWORD_STRING':([26,80,],[45,45,]),'ASSIGN_SIGN':([28,],[47,]),'RPAREN':([41,43,44,45,48,55,56,57,58,60,62,64,66,67,68,69,70,71,72,74,76,77,78,79,92,95,96,104,106,107,108,109,110,111,113,117,122,128,],[-72,-9,-10,-11,-72,81,-18,-19,-69,-52,-61,-64,-68,-70,-71,97,-47,-48,-50,100,102,-36,-37,-38,-66,-67,111,-21,-51,-59,-60,-62,-63,-65,-49,-35,-20,133,]),'OP_SUM':([47,48,51,53,58,60,62,64,65,66,67,68,83,84,85,86,87,88,89,90,91,92,93,94,95,98,103,106,107,108,109,110,111,125,],[61,61,61,61,-69,84,-61,-64,61,-68,-70,-71,61,61,61,-53,-54,-55,-56,-57,-58,-66,61,61,-67,61,61,84,-59,-60,-62,-63,-65,61,]),'OP_SUB':([47,48,51,53,58,60,62,64,65,66,67,68,83,84,85,86,87,88,89,90,91,92,93,94,95,98,103,106,107,108,109,110,111,125,],[63,63,63,63,-69,85,-61,-64,63,-68,-70,-71,63,63,63,-53,-54,-55,-56,-57,-58,-66,63,63,-67,63,63,85,-59,-60,-62,-63,-65,63,]),'CTE_INT':([47,48,51,53,61,63,65,83,84,85,86,87,88,89,90,91,93,94,98,103,125,],[67,67,67,67,67,67,67,67,67,67,-53,-54,-55,-56,-57,-58,67,67,67,67,67,]),'CTE_FLOAT':([47,48,51,53,61,63,65,83,84,85,86,87,88,89,90,91,93,94,98,103,125,],[68,68,68,68,68,68,68,68,68,68,-53,-54,-55,-56,-57,-58,68,68,68,68,68,]),'KEYWORD_END':([49,],[73,]),'CTE_STRING':([53,103,],[79,79,]),'OP_MUL':([58,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,93,-64,-68,-70,-71,-66,-67,93,93,-62,-63,-65,]),'OP_DIV':([58,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,94,-64,-68,-70,-71,-66,-67,94,94,-62,-63,-65,]),'LESS':([58,60,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,86,-61,-64,-68,-70,-71,-66,-67,-59,-60,-62,-63,-65,]),'GREATER':([58,60,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,87,-61,-64,-68,-70,-71,-66,-67,-59,-60,-62,-63,-65,]),'NOT_EQUAL':([58,60,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,88,-61,-64,-68,-70,-71,-66,-67,-59,-60,-62,-63,-65,]),'EQUAL':([58,60,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,89,-61,-64,-68,-70,-71,-66,-67,-59,-60,-62,-63,-65,]),'GREATER_EQUAL':([58,60,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,90,-61,-64,-68,-70,-71,-66,-67,-59,-60,-62,-63,-65,]),'LESS_EQUAL':([58,60,62,64,66,67,68,92,95,107,108,109,110,111,],[-69,91,-61,-64,-68,-70,-71,-66,-67,-59,-60,-62,-63,-65,]),'LBRACKET':([81,],[105,]),'KEYWORD_WHILE':([115,],[121,]),'KEYWORD_ELSE':([127,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'vars_opt':([4,105,],[5,119,]),'empty':([4,5,14,23,27,31,41,48,75,105,119,120,127,138,],[7,10,22,32,22,32,57,71,32,7,32,32,132,32,]),'funcs_opt':([5,],[8,]),'FUNCS':([5,8,],[9,16,]),'var_lines':([6,],[12,]),'var_list':([6,12,],[13,18,]),'id_list':([14,27,],[20,46,]),'func_start':([17,],[24,]),'body':([23,75,119,120,138,],[29,101,123,124,139,]),'statement_list':([23,31,75,119,120,138,],[30,50,30,30,30,30,]),'statement':([23,31,75,119,120,138,],[31,31,31,31,31,31,]),'assign':([23,31,75,119,120,138,],[33,33,33,33,33,33,]),'condition':([23,31,75,119,120,138,],[34,34,34,34,34,34,]),'cycle':([23,31,75,119,120,138,],[35,35,35,35,35,35,]),'f_call':([23,31,75,119,120,138,],[36,36,36,36,36,36,]),'print':([23,31,75,119,120,138,],[37,37,37,37,37,37,]),'type':([26,80,],[42,104,]),'cuadr_do':([39,],[52,]),'parametros_opt':([41,],[55,]),'parametros':([41,118,],[56,122,]),'expresion':([47,48,51,53,65,98,103,125,],[59,72,74,78,96,113,78,128,]),'exp':([47,48,51,53,65,83,98,103,125,],[60,60,60,60,60,106,60,60,60,]),'termino':([47,48,51,53,65,83,84,85,98,103,125,],[62,62,62,62,62,62,107,108,62,62,62,]),'factor':([47,48,51,53,65,83,84,85,93,94,98,103,125,],[64,64,64,64,64,64,64,64,109,110,64,64,64,]),'varcte':([47,48,51,53,61,63,65,83,84,85,93,94,98,103,125,],[66,66,66,66,92,95,66,66,66,66,66,66,66,66,66,]),'expresion_list_opt':([48,],[69,]),'expresion_list':([48,],[70,]),'print_items':([53,],[76,]),'print_item':([53,103,],[77,117,]),'comparador':([60,],[83,]),'cuadr_if':([100,],[114,]),'func_end':([126,],[129,]),'else_arg':([127,],[130,]),'cuadr_else':([131,],[136,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON','Programa',11,'p_programa','parser_rules.py',7),
  ('vars_opt -> KEYWORD_VAR var_lines','vars_opt',2,'p_vars_opt','parser_rules.py',30),
  ('vars_opt -> empty','vars_opt',1,'p_vars_opt','parser_rules.py',31),
  ('var_lines -> var_lines var_list SEMICOLON','var_lines',3,'p_var_lines','parser_rules.py',50),
  ('var_lines -> var_list SEMICOLON','var_lines',2,'p_var_lines','parser_rules.py',51),
  ('var_list -> ID id_list COLON type','var_list',4,'p_var_list','parser_rules.py',58),
  ('id_list -> COMMA ID id_list','id_list',3,'p_id_list','parser_rules.py',63),
  ('id_list -> empty','id_list',1,'p_id_list','parser_rules.py',64),
  ('type -> KEYWORD_INT','type',1,'p_type','parser_rules.py',71),
  ('type -> KEYWORD_FLOAT','type',1,'p_type','parser_rules.py',72),
  ('type -> KEYWORD_STRING','type',1,'p_type','parser_rules.py',73),
  ('funcs_opt -> funcs_opt FUNCS','funcs_opt',2,'p_funcs_opt','parser_rules.py',77),
  ('funcs_opt -> FUNCS','funcs_opt',1,'p_funcs_opt','parser_rules.py',78),
  ('funcs_opt -> empty','funcs_opt',1,'p_funcs_opt','parser_rules.py',79),
  ('FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON','FUNCS',12,'p_FUNCS','parser_rules.py',88),
  ('func_start -> <empty>','func_start',0,'p_func_start','parser_rules.py',96),
  ('func_end -> <empty>','func_end',0,'p_func_end','parser_rules.py',112),
  ('parametros_opt -> parametros','parametros_opt',1,'p_parametros_opt','parser_rules.py',118),
  ('parametros_opt -> empty','parametros_opt',1,'p_parametros_opt','parser_rules.py',119),
  ('parametros -> ID COLON type COMMA parametros','parametros',5,'p_parametros','parser_rules.py',128),
  ('parametros -> ID COLON type','parametros',3,'p_parametros','parser_rules.py',129),
  ('param_list -> ID COLON type COMMA param_list','param_list',5,'p_param_list','parser_rules.py',164),
  ('param_list -> empty','param_list',1,'p_param_list','parser_rules.py',165),
  ('body -> statement_list','body',1,'p_body','parser_rules.py',181),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser_rules.py',186),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_rules.py',187),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser_rules.py',188),
  ('statement -> assign','statement',1,'p_statement','parser_rules.py',206),
  ('statement -> condition','statement',1,'p_statement','parser_rules.py',207),
  ('statement -> cycle','statement',1,'p_statement','parser_rules.py',208),
  ('statement -> f_call','statement',1,'p_statement','parser_rules.py',209),
  ('statement -> print','statement',1,'p_statement','parser_rules.py',210),
  ('assign -> ID ASSIGN_SIGN expresion SEMICOLON','assign',4,'p_assign','parser_rules.py',214),
  ('print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON','print',5,'p_print','parser_rules.py',242),
  ('print_items -> print_items COMMA print_item','print_items',3,'p_print_items','parser_rules.py',258),
  ('print_items -> print_item','print_items',1,'p_print_items','parser_rules.py',259),
  ('print_item -> expresion','print_item',1,'p_print_item','parser_rules.py',266),
  ('print_item -> CTE_STRING','print_item',1,'p_print_item','parser_rules.py',267),
  ('cycle -> KEYWORD_DO cuadr_do LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON','cycle',10,'p_cycle','parser_rules.py',275),
  ('cuadr_do -> <empty>','cuadr_do',0,'p_cuadr_do','parser_rules.py',300),
  ('condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON','condition',10,'p_condition','parser_rules.py',305),
  ('cuadr_if -> <empty>','cuadr_if',0,'p_cuadr_if','parser_rules.py',320),
  ('else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE','else_arg',5,'p_else_arg','parser_rules.py',330),
  ('cuadr_else -> <empty>','cuadr_else',0,'p_cuadr_else','parser_rules.py',334),
  ('else_arg -> empty','else_arg',1,'p_else_arg_empty','parser_rules.py',353),
  ('f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON','f_call',5,'p_f_call_simple','parser_rules.py',365),
  ('expresion_list_opt -> expresion_list','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',403),
  ('expresion_list_opt -> empty','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',404),
  ('expresion_list -> expresion_list COMMA expresion','expresion_list',3,'p_expresion_list','parser_rules.py',408),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','parser_rules.py',409),
  ('expresion -> exp comparador exp','expresion',3,'p_expresion','parser_rules.py',419),
  ('expresion -> exp','expresion',1,'p_expresion','parser_rules.py',420),
  ('comparador -> LESS','comparador',1,'p_comparador','parser_rules.py',448),
  ('comparador -> GREATER','comparador',1,'p_comparador','parser_rules.py',449),
  ('comparador -> NOT_EQUAL','comparador',1,'p_comparador','parser_rules.py',450),
  ('comparador -> EQUAL','comparador',1,'p_comparador','parser_rules.py',451),
  ('comparador -> GREATER_EQUAL','comparador',1,'p_comparador','parser_rules.py',452),
  ('comparador -> LESS_EQUAL','comparador',1,'p_comparador','parser_rules.py',453),
  ('exp -> exp OP_SUM termino','exp',3,'p_exp','parser_rules.py',457),
  ('exp -> exp OP_SUB termino','exp',3,'p_exp','parser_rules.py',458),
  ('exp -> termino','exp',1,'p_exp','parser_rules.py',459),
  ('termino -> termino OP_MUL factor','termino',3,'p_termino','parser_rules.py',487),
  ('termino -> termino OP_DIV factor','termino',3,'p_termino','parser_rules.py',488),
  ('termino -> factor','termino',1,'p_termino','parser_rules.py',489),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','parser_rules.py',517),
  ('factor -> OP_SUM varcte','factor',2,'p_factor','parser_rules.py',518),
  ('factor -> OP_SUB varcte','factor',2,'p_factor','parser_rules.py',519),
  ('factor -> varcte','factor',1,'p_factor','parser_rules.py',520),
  ('varcte -> ID','varcte',1,'p_varcte','parser_rules.py',544),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','parser_rules.py',545),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','parser_rules.py',546),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',574),
]
