
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN_SIGN COLON COMMA CTE_FLOAT CTE_INT CTE_STRING EQUAL GREATER GREATER_EQUAL ID KEYWORD_DO KEYWORD_ELSE KEYWORD_END KEYWORD_FLOAT KEYWORD_IF KEYWORD_INT KEYWORD_MAIN KEYWORD_PRINT KEYWORD_PROGRAM KEYWORD_STRING KEYWORD_VAR KEYWORD_VOID KEYWORD_WHILE LBRACE LBRACKET LESS LESS_EQUAL LPAREN NOT_EQUAL OP_DIV OP_MUL OP_SUB OP_SUM RBRACE RBRACKET RPAREN SEMICOLONPrograma : KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLONvars_opt : vars_opt VARS\n| VARS\n| emptyVARS : KEYWORD_VAR var_list SEMICOLONvar_list : ID id_list COLON typeid_list : COMMA ID id_list\n| emptytype : KEYWORD_INT\n| KEYWORD_FLOAT\n| KEYWORD_STRINGfuncs_opt : funcs_opt FUNCS\n| FUNCS\n| emptyFUNCS : KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLONfunc_start :func_end :parametros_opt : parametros\n| emptyparametros : ID COLON type param_listparam_list : COMMA ID COLON type param_list\n| emptybody : statement_liststatement_list : statement statement_list\n| statement\n| emptystatement : assign\n| condition\n| cycle\n| f_call\n| printassign : ID ASSIGN_SIGN expresion SEMICOLONprint : KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLONprint_items : print_items COMMA print_item\n| print_itemprint_item : expresion\n| CTE_STRINGcycle : KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLONcondition : KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLONcuadr_if :else_arg : KEYWORD_ELSE cuadr_else LBRACE body RBRACEcuadr_else :else_arg : emptyf_call : ID LPAREN expresion_list_opt RPAREN SEMICOLONexpresion_list_opt : expresion_list\n| emptyexpresion_list : expresion_list COMMA expresion\n| expresionexpresion : exp comparador exp\n| expcomparador : LESS\n| GREATER\n| NOT_EQUAL\n| EQUAL\n| GREATER_EQUAL\n| LESS_EQUALexp : exp OP_SUM termino\n| exp OP_SUB termino\n| terminotermino : termino OP_MUL factor\n| termino OP_DIV factor\n| factorfactor : LPAREN expresion RPAREN\n| OP_SUM varcte\n| OP_SUB varcte\n| varctevarcte : ID\n| CTE_INT\n| CTE_FLOATempty :'
    
_lr_action_items = {'KEYWORD_PROGRAM':([0,],[2,]),'$end':([1,98,],[0,-1,]),'ID':([2,6,7,8,10,13,19,21,23,30,32,33,34,35,36,40,46,47,50,51,52,60,62,64,81,82,83,84,85,86,87,88,89,90,92,93,97,102,104,111,115,118,120,121,122,136,139,141,],[3,-3,-4,15,-2,18,-5,26,27,27,-27,-28,-29,-30,-31,53,57,57,57,27,57,57,57,57,-32,57,57,57,-51,-52,-53,-54,-55,-56,57,57,57,57,-70,-44,-33,123,27,27,57,-38,-39,27,]),'SEMICOLON':([3,14,41,42,43,44,57,58,59,61,63,65,66,67,72,91,94,96,101,105,106,107,108,109,110,128,129,130,132,133,135,143,],[4,19,-6,-9,-10,-11,-67,81,-50,-59,-62,-66,-68,-69,98,-64,-65,111,115,-49,-57,-58,-60,-61,-63,-17,-70,136,138,139,-43,-41,]),'KEYWORD_VAR':([4,5,6,7,10,19,104,120,],[8,8,-3,-4,-2,-5,8,8,]),'KEYWORD_VOID':([4,5,6,7,9,10,11,12,17,19,138,],[-70,13,-3,-4,13,-2,-13,-14,-12,-5,-15,]),'KEYWORD_MAIN':([4,5,6,7,9,10,11,12,17,19,138,],[-70,-70,-3,-4,16,-2,-13,-14,-12,-5,-15,]),'KEYWORD_IF':([6,7,10,19,23,30,32,33,34,35,36,51,81,104,111,115,120,121,136,139,141,],[-3,-4,-2,-5,37,37,-27,-28,-29,-30,-31,37,-32,-70,-44,-33,37,37,-38,-39,37,]),'KEYWORD_DO':([6,7,10,19,23,30,32,33,34,35,36,51,81,104,111,115,120,121,136,139,141,],[-3,-4,-2,-5,38,38,-27,-28,-29,-30,-31,38,-32,-70,-44,-33,38,38,-38,-39,38,]),'KEYWORD_PRINT':([6,7,10,19,23,30,32,33,34,35,36,51,81,104,111,115,120,121,136,139,141,],[-3,-4,-2,-5,39,39,-27,-28,-29,-30,-31,39,-32,-70,-44,-33,39,39,-38,-39,39,]),'RBRACKET':([6,7,10,19,29,30,31,32,33,34,35,36,49,81,104,111,115,120,124,136,139,],[-3,-4,-2,-5,-23,-25,-26,-27,-28,-29,-30,-31,-24,-32,-70,-44,-33,-70,128,-38,-39,]),'COMMA':([15,26,42,43,44,57,59,61,63,65,66,67,69,71,75,76,77,78,91,94,103,105,106,107,108,109,110,112,116,131,],[21,21,-9,-10,-11,-67,-50,-59,-62,-66,-68,-69,97,-48,102,-35,-36,-37,-64,-65,118,-49,-57,-58,-60,-61,-63,-47,-34,118,]),'COLON':([15,20,22,26,45,53,123,],[-70,25,-8,-70,-7,79,127,]),'LBRACE':([16,38,99,113,134,140,],[23,51,-40,121,-42,141,]),'LPAREN':([18,24,27,37,39,46,47,50,52,64,82,83,84,85,86,87,88,89,90,92,93,97,102,114,122,],[-16,40,47,50,52,64,64,64,64,64,64,64,64,-51,-52,-53,-54,-55,-56,64,64,64,64,122,64,]),'RBRACE':([23,28,29,30,31,32,33,34,35,36,49,51,74,81,111,115,121,125,136,139,141,142,],[-70,48,-23,-25,-26,-27,-28,-29,-30,-31,-24,-70,100,-32,-44,-33,-70,129,-38,-39,-70,143,]),'KEYWORD_INT':([25,79,127,],[42,42,42,]),'KEYWORD_FLOAT':([25,79,127,],[43,43,43,]),'KEYWORD_STRING':([25,79,127,],[44,44,44,]),'ASSIGN_SIGN':([27,],[46,]),'RPAREN':([40,42,43,44,47,54,55,56,57,59,61,63,65,66,67,68,69,70,71,73,75,76,77,78,91,94,95,103,105,106,107,108,109,110,112,116,117,119,126,131,137,],[-70,-9,-10,-11,-70,80,-18,-19,-67,-50,-59,-62,-66,-68,-69,96,-45,-46,-48,99,101,-35,-36,-37,-64,-65,110,-70,-49,-57,-58,-60,-61,-63,-47,-34,-20,-22,130,-70,-21,]),'OP_SUM':([46,47,50,52,57,59,61,63,64,65,66,67,82,83,84,85,86,87,88,89,90,91,92,93,94,97,102,105,106,107,108,109,110,122,],[60,60,60,60,-67,83,-59,-62,60,-66,-68,-69,60,60,60,-51,-52,-53,-54,-55,-56,-64,60,60,-65,60,60,83,-57,-58,-60,-61,-63,60,]),'OP_SUB':([46,47,50,52,57,59,61,63,64,65,66,67,82,83,84,85,86,87,88,89,90,91,92,93,94,97,102,105,106,107,108,109,110,122,],[62,62,62,62,-67,84,-59,-62,62,-66,-68,-69,62,62,62,-51,-52,-53,-54,-55,-56,-64,62,62,-65,62,62,84,-57,-58,-60,-61,-63,62,]),'CTE_INT':([46,47,50,52,60,62,64,82,83,84,85,86,87,88,89,90,92,93,97,102,122,],[66,66,66,66,66,66,66,66,66,66,-51,-52,-53,-54,-55,-56,66,66,66,66,66,]),'CTE_FLOAT':([46,47,50,52,60,62,64,82,83,84,85,86,87,88,89,90,92,93,97,102,122,],[67,67,67,67,67,67,67,67,67,67,-51,-52,-53,-54,-55,-56,67,67,67,67,67,]),'KEYWORD_END':([48,],[72,]),'CTE_STRING':([52,102,],[78,78,]),'OP_MUL':([57,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,92,-62,-66,-68,-69,-64,-65,92,92,-60,-61,-63,]),'OP_DIV':([57,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,93,-62,-66,-68,-69,-64,-65,93,93,-60,-61,-63,]),'LESS':([57,59,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,85,-59,-62,-66,-68,-69,-64,-65,-57,-58,-60,-61,-63,]),'GREATER':([57,59,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,86,-59,-62,-66,-68,-69,-64,-65,-57,-58,-60,-61,-63,]),'NOT_EQUAL':([57,59,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,87,-59,-62,-66,-68,-69,-64,-65,-57,-58,-60,-61,-63,]),'EQUAL':([57,59,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,88,-59,-62,-66,-68,-69,-64,-65,-57,-58,-60,-61,-63,]),'GREATER_EQUAL':([57,59,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,89,-59,-62,-66,-68,-69,-64,-65,-57,-58,-60,-61,-63,]),'LESS_EQUAL':([57,59,61,63,65,66,67,91,94,106,107,108,109,110,],[-67,90,-59,-62,-66,-68,-69,-64,-65,-57,-58,-60,-61,-63,]),'LBRACKET':([80,],[104,]),'KEYWORD_WHILE':([100,],[114,]),'KEYWORD_ELSE':([129,],[134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'vars_opt':([4,104,],[5,120,]),'VARS':([4,5,104,120,],[6,10,6,10,]),'empty':([4,5,15,23,26,30,40,47,51,103,104,120,121,129,131,141,],[7,12,22,31,22,31,56,70,31,119,7,31,31,135,119,31,]),'funcs_opt':([5,],[9,]),'FUNCS':([5,9,],[11,17,]),'var_list':([8,],[14,]),'id_list':([15,26,],[20,45,]),'func_start':([18,],[24,]),'body':([23,51,120,121,141,],[28,74,124,125,142,]),'statement_list':([23,30,51,120,121,141,],[29,49,29,29,29,29,]),'statement':([23,30,51,120,121,141,],[30,30,30,30,30,30,]),'assign':([23,30,51,120,121,141,],[32,32,32,32,32,32,]),'condition':([23,30,51,120,121,141,],[33,33,33,33,33,33,]),'cycle':([23,30,51,120,121,141,],[34,34,34,34,34,34,]),'f_call':([23,30,51,120,121,141,],[35,35,35,35,35,35,]),'print':([23,30,51,120,121,141,],[36,36,36,36,36,36,]),'type':([25,79,127,],[41,103,131,]),'parametros_opt':([40,],[54,]),'parametros':([40,],[55,]),'expresion':([46,47,50,52,64,97,102,122,],[58,71,73,77,95,112,77,126,]),'exp':([46,47,50,52,64,82,97,102,122,],[59,59,59,59,59,105,59,59,59,]),'termino':([46,47,50,52,64,82,83,84,97,102,122,],[61,61,61,61,61,61,106,107,61,61,61,]),'factor':([46,47,50,52,64,82,83,84,92,93,97,102,122,],[63,63,63,63,63,63,63,63,108,109,63,63,63,]),'varcte':([46,47,50,52,60,62,64,82,83,84,92,93,97,102,122,],[65,65,65,65,91,94,65,65,65,65,65,65,65,65,65,]),'expresion_list_opt':([47,],[68,]),'expresion_list':([47,],[69,]),'print_items':([52,],[75,]),'print_item':([52,102,],[76,116,]),'comparador':([59,],[82,]),'cuadr_if':([99,],[113,]),'param_list':([103,131,],[117,137,]),'func_end':([128,],[132,]),'else_arg':([129,],[133,]),'cuadr_else':([134,],[140,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON','Programa',11,'p_programa','parser_rules.py',7),
  ('vars_opt -> vars_opt VARS','vars_opt',2,'p_vars_opt','parser_rules.py',13),
  ('vars_opt -> VARS','vars_opt',1,'p_vars_opt','parser_rules.py',14),
  ('vars_opt -> empty','vars_opt',1,'p_vars_opt','parser_rules.py',15),
  ('VARS -> KEYWORD_VAR var_list SEMICOLON','VARS',3,'p_VARS','parser_rules.py',24),
  ('var_list -> ID id_list COLON type','var_list',4,'p_var_list','parser_rules.py',38),
  ('id_list -> COMMA ID id_list','id_list',3,'p_id_list','parser_rules.py',43),
  ('id_list -> empty','id_list',1,'p_id_list','parser_rules.py',44),
  ('type -> KEYWORD_INT','type',1,'p_type','parser_rules.py',51),
  ('type -> KEYWORD_FLOAT','type',1,'p_type','parser_rules.py',52),
  ('type -> KEYWORD_STRING','type',1,'p_type','parser_rules.py',53),
  ('funcs_opt -> funcs_opt FUNCS','funcs_opt',2,'p_funcs_opt','parser_rules.py',57),
  ('funcs_opt -> FUNCS','funcs_opt',1,'p_funcs_opt','parser_rules.py',58),
  ('funcs_opt -> empty','funcs_opt',1,'p_funcs_opt','parser_rules.py',59),
  ('FUNCS -> KEYWORD_VOID ID func_start LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET func_end SEMICOLON','FUNCS',12,'p_FUNCS','parser_rules.py',68),
  ('func_start -> <empty>','func_start',0,'p_func_start','parser_rules.py',77),
  ('func_end -> <empty>','func_end',0,'p_func_end','parser_rules.py',83),
  ('parametros_opt -> parametros','parametros_opt',1,'p_parametros_opt','parser_rules.py',87),
  ('parametros_opt -> empty','parametros_opt',1,'p_parametros_opt','parser_rules.py',88),
  ('parametros -> ID COLON type param_list','parametros',4,'p_parametros','parser_rules.py',95),
  ('param_list -> COMMA ID COLON type param_list','param_list',5,'p_param_list','parser_rules.py',103),
  ('param_list -> empty','param_list',1,'p_param_list','parser_rules.py',104),
  ('body -> statement_list','body',1,'p_body','parser_rules.py',112),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','parser_rules.py',116),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser_rules.py',117),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser_rules.py',118),
  ('statement -> assign','statement',1,'p_statement','parser_rules.py',129),
  ('statement -> condition','statement',1,'p_statement','parser_rules.py',130),
  ('statement -> cycle','statement',1,'p_statement','parser_rules.py',131),
  ('statement -> f_call','statement',1,'p_statement','parser_rules.py',132),
  ('statement -> print','statement',1,'p_statement','parser_rules.py',133),
  ('assign -> ID ASSIGN_SIGN expresion SEMICOLON','assign',4,'p_assign','parser_rules.py',137),
  ('print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON','print',5,'p_print','parser_rules.py',165),
  ('print_items -> print_items COMMA print_item','print_items',3,'p_print_items','parser_rules.py',169),
  ('print_items -> print_item','print_items',1,'p_print_items','parser_rules.py',170),
  ('print_item -> expresion','print_item',1,'p_print_item','parser_rules.py',177),
  ('print_item -> CTE_STRING','print_item',1,'p_print_item','parser_rules.py',178),
  ('cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON','cycle',9,'p_cycle','parser_rules.py',185),
  ('condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON','condition',10,'p_condition','parser_rules.py',206),
  ('cuadr_if -> <empty>','cuadr_if',0,'p_cuadr_if','parser_rules.py',219),
  ('else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE','else_arg',5,'p_else_arg','parser_rules.py',229),
  ('cuadr_else -> <empty>','cuadr_else',0,'p_cuadr_else','parser_rules.py',233),
  ('else_arg -> empty','else_arg',1,'p_else_arg_empty','parser_rules.py',252),
  ('f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON','f_call',5,'p_f_call','parser_rules.py',264),
  ('expresion_list_opt -> expresion_list','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',295),
  ('expresion_list_opt -> empty','expresion_list_opt',1,'p_expresion_list_opt','parser_rules.py',296),
  ('expresion_list -> expresion_list COMMA expresion','expresion_list',3,'p_expresion_list','parser_rules.py',300),
  ('expresion_list -> expresion','expresion_list',1,'p_expresion_list','parser_rules.py',301),
  ('expresion -> exp comparador exp','expresion',3,'p_expresion','parser_rules.py',308),
  ('expresion -> exp','expresion',1,'p_expresion','parser_rules.py',309),
  ('comparador -> LESS','comparador',1,'p_comparador','parser_rules.py',337),
  ('comparador -> GREATER','comparador',1,'p_comparador','parser_rules.py',338),
  ('comparador -> NOT_EQUAL','comparador',1,'p_comparador','parser_rules.py',339),
  ('comparador -> EQUAL','comparador',1,'p_comparador','parser_rules.py',340),
  ('comparador -> GREATER_EQUAL','comparador',1,'p_comparador','parser_rules.py',341),
  ('comparador -> LESS_EQUAL','comparador',1,'p_comparador','parser_rules.py',342),
  ('exp -> exp OP_SUM termino','exp',3,'p_exp','parser_rules.py',346),
  ('exp -> exp OP_SUB termino','exp',3,'p_exp','parser_rules.py',347),
  ('exp -> termino','exp',1,'p_exp','parser_rules.py',348),
  ('termino -> termino OP_MUL factor','termino',3,'p_termino','parser_rules.py',375),
  ('termino -> termino OP_DIV factor','termino',3,'p_termino','parser_rules.py',376),
  ('termino -> factor','termino',1,'p_termino','parser_rules.py',377),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor','parser_rules.py',405),
  ('factor -> OP_SUM varcte','factor',2,'p_factor','parser_rules.py',406),
  ('factor -> OP_SUB varcte','factor',2,'p_factor','parser_rules.py',407),
  ('factor -> varcte','factor',1,'p_factor','parser_rules.py',408),
  ('varcte -> ID','varcte',1,'p_varcte','parser_rules.py',432),
  ('varcte -> CTE_INT','varcte',1,'p_varcte','parser_rules.py',433),
  ('varcte -> CTE_FLOAT','varcte',1,'p_varcte','parser_rules.py',434),
  ('empty -> <empty>','empty',0,'p_empty','parser_rules.py',463),
]
