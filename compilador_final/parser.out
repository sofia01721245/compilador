Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON
Rule 2     vars_opt -> vars_opt VARS
Rule 3     vars_opt -> VARS
Rule 4     vars_opt -> empty
Rule 5     VARS -> KEYWORD_VAR var_list SEMICOLON
Rule 6     var_list -> ID id_list COLON type
Rule 7     id_list -> COMMA ID id_list
Rule 8     id_list -> empty
Rule 9     type -> KEYWORD_INT
Rule 10    type -> KEYWORD_FLOAT
Rule 11    type -> KEYWORD_STRING
Rule 12    funcs_opt -> FUNCS
Rule 13    funcs_opt -> empty
Rule 14    FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON
Rule 15    parametros_opt -> parametros
Rule 16    parametros_opt -> empty
Rule 17    parametros -> ID COLON type param_list
Rule 18    param_list -> COMMA ID COLON type param_list
Rule 19    param_list -> empty
Rule 20    body -> LBRACE statement_list RBRACE
Rule 21    statement_list -> statement_list statement
Rule 22    statement_list -> statement
Rule 23    statement -> assign
Rule 24    statement -> condition
Rule 25    statement -> cycle
Rule 26    statement -> f_call
Rule 27    statement -> print
Rule 28    assign -> ID ASSIGN_SIGN expresion SEMICOLON
Rule 29    print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON
Rule 30    print_items -> print_items COMMA print_item
Rule 31    print_items -> print_item
Rule 32    print_item -> expresion
Rule 33    print_item -> CTE_STRING
Rule 34    cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
Rule 35    condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON
Rule 36    cuadr_if -> <empty>
Rule 37    else_arg -> KEYWORD_ELSE cuadr_else body
Rule 38    cuadr_else -> <empty>
Rule 39    else_arg -> empty
Rule 40    f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON
Rule 41    expresion_list_opt -> expresion_list
Rule 42    expresion_list_opt -> empty
Rule 43    expresion_list -> expresion_list COMMA expresion
Rule 44    expresion_list -> expresion
Rule 45    expresion -> exp comparador exp
Rule 46    expresion -> exp
Rule 47    comparador -> LESS
Rule 48    comparador -> GREATER
Rule 49    comparador -> NOT_EQUAL
Rule 50    comparador -> EQUAL
Rule 51    comparador -> GREATER_EQUAL
Rule 52    comparador -> LESS_EQUAL
Rule 53    exp -> exp OP_SUM termino
Rule 54    exp -> exp OP_SUB termino
Rule 55    exp -> termino
Rule 56    termino -> termino OP_MUL factor
Rule 57    termino -> termino OP_DIV factor
Rule 58    termino -> factor
Rule 59    factor -> LPAREN expresion RPAREN
Rule 60    factor -> OP_SUM varcte
Rule 61    factor -> OP_SUB varcte
Rule 62    factor -> varcte
Rule 63    varcte -> ID
Rule 64    varcte -> CTE_INT
Rule 65    varcte -> CTE_FLOAT
Rule 66    empty -> <empty>

Terminals, with rules where they appear

ASSIGN_SIGN          : 28
COLON                : 6 17 18
COMMA                : 7 18 30 43
CTE_FLOAT            : 65
CTE_INT              : 64
CTE_STRING           : 33
EQUAL                : 50
GREATER              : 48
GREATER_EQUAL        : 51
ID                   : 1 6 7 14 17 18 28 40 63
KEYWORD_DO           : 34
KEYWORD_ELSE         : 37
KEYWORD_END          : 1
KEYWORD_FLOAT        : 10
KEYWORD_IF           : 35
KEYWORD_INT          : 9
KEYWORD_MAIN         : 1
KEYWORD_PRINT        : 29
KEYWORD_PROGRAM      : 1
KEYWORD_STRING       : 11
KEYWORD_VAR          : 5
KEYWORD_VOID         : 14
KEYWORD_WHILE        : 34
LBRACE               : 20
LBRACKET             : 14
LESS                 : 47
LESS_EQUAL           : 52
LPAREN               : 14 29 34 35 40 59
NOT_EQUAL            : 49
OP_DIV               : 57
OP_MUL               : 56
OP_SUB               : 54 61
OP_SUM               : 53 60
RBRACE               : 20
RBRACKET             : 14
RPAREN               : 14 29 34 35 40 59
SEMICOLON            : 1 1 5 14 28 29 34 35 40
error                : 

Nonterminals, with rules where they appear

FUNCS                : 12
Programa             : 0
VARS                 : 2 3
assign               : 23
body                 : 1 14 34 35 37
comparador           : 45
condition            : 24
cuadr_else           : 37
cuadr_if             : 35
cycle                : 25
else_arg             : 35
empty                : 4 8 13 16 19 39 42
exp                  : 45 45 46 53 54
expresion            : 28 32 34 35 43 44 59
expresion_list       : 41 43
expresion_list_opt   : 40
f_call               : 26
factor               : 56 57 58
funcs_opt            : 1
id_list              : 6 7
param_list           : 17 18
parametros           : 15
parametros_opt       : 14
print                : 27
print_item           : 30 31
print_items          : 29 30
statement            : 21 22
statement_list       : 20 21
termino              : 53 54 55 56 57
type                 : 6 17 18
var_list             : 5
varcte               : 60 61 62
vars_opt             : 1 2 14

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON

    KEYWORD_PROGRAM shift and go to state 2

    Programa                       shift and go to state 1

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> KEYWORD_PROGRAM . ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) Programa -> KEYWORD_PROGRAM ID . SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON . vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON
    (2) vars_opt -> . vars_opt VARS
    (3) vars_opt -> . VARS
    (4) vars_opt -> . empty
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON
    (66) empty -> .

  ! shift/reduce conflict for KEYWORD_VAR resolved as shift
    KEYWORD_VAR     shift and go to state 8
    KEYWORD_VOID    reduce using rule 66 (empty -> .)
    KEYWORD_MAIN    reduce using rule 66 (empty -> .)

  ! KEYWORD_VAR     [ reduce using rule 66 (empty -> .) ]

    vars_opt                       shift and go to state 5
    VARS                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt . funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON
    (2) vars_opt -> vars_opt . VARS
    (12) funcs_opt -> . FUNCS
    (13) funcs_opt -> . empty
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON
    (14) FUNCS -> . KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON
    (66) empty -> .

    KEYWORD_VAR     shift and go to state 8
    KEYWORD_VOID    shift and go to state 13
    KEYWORD_MAIN    reduce using rule 66 (empty -> .)

    funcs_opt                      shift and go to state 9
    VARS                           shift and go to state 10
    FUNCS                          shift and go to state 11
    empty                          shift and go to state 12

state 6

    (3) vars_opt -> VARS .

    KEYWORD_VAR     reduce using rule 3 (vars_opt -> VARS .)
    KEYWORD_VOID    reduce using rule 3 (vars_opt -> VARS .)
    KEYWORD_MAIN    reduce using rule 3 (vars_opt -> VARS .)
    LBRACE          reduce using rule 3 (vars_opt -> VARS .)


state 7

    (4) vars_opt -> empty .

    KEYWORD_VAR     reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_VOID    reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_MAIN    reduce using rule 4 (vars_opt -> empty .)
    LBRACE          reduce using rule 4 (vars_opt -> empty .)


state 8

    (5) VARS -> KEYWORD_VAR . var_list SEMICOLON
    (6) var_list -> . ID id_list COLON type

    ID              shift and go to state 15

    var_list                       shift and go to state 14

state 9

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt . KEYWORD_MAIN body KEYWORD_END SEMICOLON

    KEYWORD_MAIN    shift and go to state 16


state 10

    (2) vars_opt -> vars_opt VARS .

    KEYWORD_VAR     reduce using rule 2 (vars_opt -> vars_opt VARS .)
    KEYWORD_VOID    reduce using rule 2 (vars_opt -> vars_opt VARS .)
    KEYWORD_MAIN    reduce using rule 2 (vars_opt -> vars_opt VARS .)
    LBRACE          reduce using rule 2 (vars_opt -> vars_opt VARS .)


state 11

    (12) funcs_opt -> FUNCS .

    KEYWORD_MAIN    reduce using rule 12 (funcs_opt -> FUNCS .)


state 12

    (13) funcs_opt -> empty .

    KEYWORD_MAIN    reduce using rule 13 (funcs_opt -> empty .)


state 13

    (14) FUNCS -> KEYWORD_VOID . ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON

    ID              shift and go to state 17


state 14

    (5) VARS -> KEYWORD_VAR var_list . SEMICOLON

    SEMICOLON       shift and go to state 18


state 15

    (6) var_list -> ID . id_list COLON type
    (7) id_list -> . COMMA ID id_list
    (8) id_list -> . empty
    (66) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 66 (empty -> .)

    id_list                        shift and go to state 19
    empty                          shift and go to state 21

state 16

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN . body KEYWORD_END SEMICOLON
    (20) body -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 23

    body                           shift and go to state 22

state 17

    (14) FUNCS -> KEYWORD_VOID ID . LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON

    LPAREN          shift and go to state 24


state 18

    (5) VARS -> KEYWORD_VAR var_list SEMICOLON .

    KEYWORD_VAR     reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    KEYWORD_MAIN    reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    LBRACE          reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)


state 19

    (6) var_list -> ID id_list . COLON type

    COLON           shift and go to state 25


state 20

    (7) id_list -> COMMA . ID id_list

    ID              shift and go to state 26


state 21

    (8) id_list -> empty .

    COLON           reduce using rule 8 (id_list -> empty .)


state 22

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body . KEYWORD_END SEMICOLON

    KEYWORD_END     shift and go to state 27


state 23

    (20) body -> LBRACE . statement_list RBRACE
    (21) statement_list -> . statement_list statement
    (22) statement_list -> . statement
    (23) statement -> . assign
    (24) statement -> . condition
    (25) statement -> . cycle
    (26) statement -> . f_call
    (27) statement -> . print
    (28) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (35) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON
    (34) cycle -> . KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (40) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (29) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    ID              shift and go to state 35
    KEYWORD_IF      shift and go to state 36
    KEYWORD_DO      shift and go to state 37
    KEYWORD_PRINT   shift and go to state 38

    statement_list                 shift and go to state 28
    statement                      shift and go to state 29
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    cycle                          shift and go to state 32
    f_call                         shift and go to state 33
    print                          shift and go to state 34

state 24

    (14) FUNCS -> KEYWORD_VOID ID LPAREN . parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON
    (15) parametros_opt -> . parametros
    (16) parametros_opt -> . empty
    (17) parametros -> . ID COLON type param_list
    (66) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 66 (empty -> .)

    parametros_opt                 shift and go to state 40
    parametros                     shift and go to state 41
    empty                          shift and go to state 42

state 25

    (6) var_list -> ID id_list COLON . type
    (9) type -> . KEYWORD_INT
    (10) type -> . KEYWORD_FLOAT
    (11) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 44
    KEYWORD_FLOAT   shift and go to state 45
    KEYWORD_STRING  shift and go to state 46

    type                           shift and go to state 43

state 26

    (7) id_list -> COMMA ID . id_list
    (7) id_list -> . COMMA ID id_list
    (8) id_list -> . empty
    (66) empty -> .

    COMMA           shift and go to state 20
    COLON           reduce using rule 66 (empty -> .)

    id_list                        shift and go to state 47
    empty                          shift and go to state 21

state 27

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END . SEMICOLON

    SEMICOLON       shift and go to state 48


state 28

    (20) body -> LBRACE statement_list . RBRACE
    (21) statement_list -> statement_list . statement
    (23) statement -> . assign
    (24) statement -> . condition
    (25) statement -> . cycle
    (26) statement -> . f_call
    (27) statement -> . print
    (28) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (35) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON
    (34) cycle -> . KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (40) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (29) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          shift and go to state 49
    ID              shift and go to state 35
    KEYWORD_IF      shift and go to state 36
    KEYWORD_DO      shift and go to state 37
    KEYWORD_PRINT   shift and go to state 38

    statement                      shift and go to state 50
    assign                         shift and go to state 30
    condition                      shift and go to state 31
    cycle                          shift and go to state 32
    f_call                         shift and go to state 33
    print                          shift and go to state 34

state 29

    (22) statement_list -> statement .

    RBRACE          reduce using rule 22 (statement_list -> statement .)
    ID              reduce using rule 22 (statement_list -> statement .)
    KEYWORD_IF      reduce using rule 22 (statement_list -> statement .)
    KEYWORD_DO      reduce using rule 22 (statement_list -> statement .)
    KEYWORD_PRINT   reduce using rule 22 (statement_list -> statement .)


state 30

    (23) statement -> assign .

    RBRACE          reduce using rule 23 (statement -> assign .)
    ID              reduce using rule 23 (statement -> assign .)
    KEYWORD_IF      reduce using rule 23 (statement -> assign .)
    KEYWORD_DO      reduce using rule 23 (statement -> assign .)
    KEYWORD_PRINT   reduce using rule 23 (statement -> assign .)


state 31

    (24) statement -> condition .

    RBRACE          reduce using rule 24 (statement -> condition .)
    ID              reduce using rule 24 (statement -> condition .)
    KEYWORD_IF      reduce using rule 24 (statement -> condition .)
    KEYWORD_DO      reduce using rule 24 (statement -> condition .)
    KEYWORD_PRINT   reduce using rule 24 (statement -> condition .)


state 32

    (25) statement -> cycle .

    RBRACE          reduce using rule 25 (statement -> cycle .)
    ID              reduce using rule 25 (statement -> cycle .)
    KEYWORD_IF      reduce using rule 25 (statement -> cycle .)
    KEYWORD_DO      reduce using rule 25 (statement -> cycle .)
    KEYWORD_PRINT   reduce using rule 25 (statement -> cycle .)


state 33

    (26) statement -> f_call .

    RBRACE          reduce using rule 26 (statement -> f_call .)
    ID              reduce using rule 26 (statement -> f_call .)
    KEYWORD_IF      reduce using rule 26 (statement -> f_call .)
    KEYWORD_DO      reduce using rule 26 (statement -> f_call .)
    KEYWORD_PRINT   reduce using rule 26 (statement -> f_call .)


state 34

    (27) statement -> print .

    RBRACE          reduce using rule 27 (statement -> print .)
    ID              reduce using rule 27 (statement -> print .)
    KEYWORD_IF      reduce using rule 27 (statement -> print .)
    KEYWORD_DO      reduce using rule 27 (statement -> print .)
    KEYWORD_PRINT   reduce using rule 27 (statement -> print .)


state 35

    (28) assign -> ID . ASSIGN_SIGN expresion SEMICOLON
    (40) f_call -> ID . LPAREN expresion_list_opt RPAREN SEMICOLON

    ASSIGN_SIGN     shift and go to state 51
    LPAREN          shift and go to state 52


state 36

    (35) condition -> KEYWORD_IF . LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON

    LPAREN          shift and go to state 53


state 37

    (34) cycle -> KEYWORD_DO . body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (20) body -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 23

    body                           shift and go to state 54

state 38

    (29) print -> KEYWORD_PRINT . LPAREN print_items RPAREN SEMICOLON

    LPAREN          shift and go to state 55


state 39

    (17) parametros -> ID . COLON type param_list

    COLON           shift and go to state 56


state 40

    (14) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt . RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON

    RPAREN          shift and go to state 57


state 41

    (15) parametros_opt -> parametros .

    RPAREN          reduce using rule 15 (parametros_opt -> parametros .)


state 42

    (16) parametros_opt -> empty .

    RPAREN          reduce using rule 16 (parametros_opt -> empty .)


state 43

    (6) var_list -> ID id_list COLON type .

    SEMICOLON       reduce using rule 6 (var_list -> ID id_list COLON type .)


state 44

    (9) type -> KEYWORD_INT .

    SEMICOLON       reduce using rule 9 (type -> KEYWORD_INT .)
    COMMA           reduce using rule 9 (type -> KEYWORD_INT .)
    RPAREN          reduce using rule 9 (type -> KEYWORD_INT .)


state 45

    (10) type -> KEYWORD_FLOAT .

    SEMICOLON       reduce using rule 10 (type -> KEYWORD_FLOAT .)
    COMMA           reduce using rule 10 (type -> KEYWORD_FLOAT .)
    RPAREN          reduce using rule 10 (type -> KEYWORD_FLOAT .)


state 46

    (11) type -> KEYWORD_STRING .

    SEMICOLON       reduce using rule 11 (type -> KEYWORD_STRING .)
    COMMA           reduce using rule 11 (type -> KEYWORD_STRING .)
    RPAREN          reduce using rule 11 (type -> KEYWORD_STRING .)


state 47

    (7) id_list -> COMMA ID id_list .

    COLON           reduce using rule 7 (id_list -> COMMA ID id_list .)


state 48

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON .

    $end            reduce using rule 1 (Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN body KEYWORD_END SEMICOLON .)


state 49

    (20) body -> LBRACE statement_list RBRACE .

    KEYWORD_END     reduce using rule 20 (body -> LBRACE statement_list RBRACE .)
    KEYWORD_WHILE   reduce using rule 20 (body -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 20 (body -> LBRACE statement_list RBRACE .)
    KEYWORD_ELSE    reduce using rule 20 (body -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 20 (body -> LBRACE statement_list RBRACE .)


state 50

    (21) statement_list -> statement_list statement .

    RBRACE          reduce using rule 21 (statement_list -> statement_list statement .)
    ID              reduce using rule 21 (statement_list -> statement_list statement .)
    KEYWORD_IF      reduce using rule 21 (statement_list -> statement_list statement .)
    KEYWORD_DO      reduce using rule 21 (statement_list -> statement_list statement .)
    KEYWORD_PRINT   reduce using rule 21 (statement_list -> statement_list statement .)


state 51

    (28) assign -> ID ASSIGN_SIGN . expresion SEMICOLON
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 52

    (40) f_call -> ID LPAREN . expresion_list_opt RPAREN SEMICOLON
    (41) expresion_list_opt -> . expresion_list
    (42) expresion_list_opt -> . empty
    (43) expresion_list -> . expresion_list COMMA expresion
    (44) expresion_list -> . expresion
    (66) empty -> .
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    RPAREN          reduce using rule 66 (empty -> .)
    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion_list_opt             shift and go to state 69
    expresion_list                 shift and go to state 70
    empty                          shift and go to state 71
    expresion                      shift and go to state 72
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 53

    (35) condition -> KEYWORD_IF LPAREN . expresion RPAREN cuadr_if body else_arg SEMICOLON
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 73
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 54

    (34) cycle -> KEYWORD_DO body . KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    KEYWORD_WHILE   shift and go to state 74


state 55

    (29) print -> KEYWORD_PRINT LPAREN . print_items RPAREN SEMICOLON
    (30) print_items -> . print_items COMMA print_item
    (31) print_items -> . print_item
    (32) print_item -> . expresion
    (33) print_item -> . CTE_STRING
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 78
    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    print_items                    shift and go to state 75
    print_item                     shift and go to state 76
    expresion                      shift and go to state 77
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 56

    (17) parametros -> ID COLON . type param_list
    (9) type -> . KEYWORD_INT
    (10) type -> . KEYWORD_FLOAT
    (11) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 44
    KEYWORD_FLOAT   shift and go to state 45
    KEYWORD_STRING  shift and go to state 46

    type                           shift and go to state 79

state 57

    (14) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN . LBRACKET vars_opt body RBRACKET SEMICOLON

    LBRACKET        shift and go to state 80


state 58

    (63) varcte -> ID .

    OP_MUL          reduce using rule 63 (varcte -> ID .)
    OP_DIV          reduce using rule 63 (varcte -> ID .)
    OP_SUM          reduce using rule 63 (varcte -> ID .)
    OP_SUB          reduce using rule 63 (varcte -> ID .)
    LESS            reduce using rule 63 (varcte -> ID .)
    GREATER         reduce using rule 63 (varcte -> ID .)
    NOT_EQUAL       reduce using rule 63 (varcte -> ID .)
    EQUAL           reduce using rule 63 (varcte -> ID .)
    GREATER_EQUAL   reduce using rule 63 (varcte -> ID .)
    LESS_EQUAL      reduce using rule 63 (varcte -> ID .)
    SEMICOLON       reduce using rule 63 (varcte -> ID .)
    COMMA           reduce using rule 63 (varcte -> ID .)
    RPAREN          reduce using rule 63 (varcte -> ID .)


state 59

    (28) assign -> ID ASSIGN_SIGN expresion . SEMICOLON

    SEMICOLON       shift and go to state 81


state 60

    (45) expresion -> exp . comparador exp
    (46) expresion -> exp .
    (53) exp -> exp . OP_SUM termino
    (54) exp -> exp . OP_SUB termino
    (47) comparador -> . LESS
    (48) comparador -> . GREATER
    (49) comparador -> . NOT_EQUAL
    (50) comparador -> . EQUAL
    (51) comparador -> . GREATER_EQUAL
    (52) comparador -> . LESS_EQUAL

    SEMICOLON       reduce using rule 46 (expresion -> exp .)
    COMMA           reduce using rule 46 (expresion -> exp .)
    RPAREN          reduce using rule 46 (expresion -> exp .)
    OP_SUM          shift and go to state 83
    OP_SUB          shift and go to state 84
    LESS            shift and go to state 85
    GREATER         shift and go to state 86
    NOT_EQUAL       shift and go to state 87
    EQUAL           shift and go to state 88
    GREATER_EQUAL   shift and go to state 89
    LESS_EQUAL      shift and go to state 90

    comparador                     shift and go to state 82

state 61

    (60) factor -> OP_SUM . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    varcte                         shift and go to state 91

state 62

    (55) exp -> termino .
    (56) termino -> termino . OP_MUL factor
    (57) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 55 (exp -> termino .)
    OP_SUB          reduce using rule 55 (exp -> termino .)
    LESS            reduce using rule 55 (exp -> termino .)
    GREATER         reduce using rule 55 (exp -> termino .)
    NOT_EQUAL       reduce using rule 55 (exp -> termino .)
    EQUAL           reduce using rule 55 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 55 (exp -> termino .)
    LESS_EQUAL      reduce using rule 55 (exp -> termino .)
    SEMICOLON       reduce using rule 55 (exp -> termino .)
    COMMA           reduce using rule 55 (exp -> termino .)
    RPAREN          reduce using rule 55 (exp -> termino .)
    OP_MUL          shift and go to state 92
    OP_DIV          shift and go to state 93


state 63

    (61) factor -> OP_SUB . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    varcte                         shift and go to state 94

state 64

    (58) termino -> factor .

    OP_MUL          reduce using rule 58 (termino -> factor .)
    OP_DIV          reduce using rule 58 (termino -> factor .)
    OP_SUM          reduce using rule 58 (termino -> factor .)
    OP_SUB          reduce using rule 58 (termino -> factor .)
    LESS            reduce using rule 58 (termino -> factor .)
    GREATER         reduce using rule 58 (termino -> factor .)
    NOT_EQUAL       reduce using rule 58 (termino -> factor .)
    EQUAL           reduce using rule 58 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 58 (termino -> factor .)
    LESS_EQUAL      reduce using rule 58 (termino -> factor .)
    SEMICOLON       reduce using rule 58 (termino -> factor .)
    COMMA           reduce using rule 58 (termino -> factor .)
    RPAREN          reduce using rule 58 (termino -> factor .)


state 65

    (59) factor -> LPAREN . expresion RPAREN
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 95
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 66

    (62) factor -> varcte .

    OP_MUL          reduce using rule 62 (factor -> varcte .)
    OP_DIV          reduce using rule 62 (factor -> varcte .)
    OP_SUM          reduce using rule 62 (factor -> varcte .)
    OP_SUB          reduce using rule 62 (factor -> varcte .)
    LESS            reduce using rule 62 (factor -> varcte .)
    GREATER         reduce using rule 62 (factor -> varcte .)
    NOT_EQUAL       reduce using rule 62 (factor -> varcte .)
    EQUAL           reduce using rule 62 (factor -> varcte .)
    GREATER_EQUAL   reduce using rule 62 (factor -> varcte .)
    LESS_EQUAL      reduce using rule 62 (factor -> varcte .)
    SEMICOLON       reduce using rule 62 (factor -> varcte .)
    COMMA           reduce using rule 62 (factor -> varcte .)
    RPAREN          reduce using rule 62 (factor -> varcte .)


state 67

    (64) varcte -> CTE_INT .

    OP_MUL          reduce using rule 64 (varcte -> CTE_INT .)
    OP_DIV          reduce using rule 64 (varcte -> CTE_INT .)
    OP_SUM          reduce using rule 64 (varcte -> CTE_INT .)
    OP_SUB          reduce using rule 64 (varcte -> CTE_INT .)
    LESS            reduce using rule 64 (varcte -> CTE_INT .)
    GREATER         reduce using rule 64 (varcte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 64 (varcte -> CTE_INT .)
    EQUAL           reduce using rule 64 (varcte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 64 (varcte -> CTE_INT .)
    LESS_EQUAL      reduce using rule 64 (varcte -> CTE_INT .)
    SEMICOLON       reduce using rule 64 (varcte -> CTE_INT .)
    COMMA           reduce using rule 64 (varcte -> CTE_INT .)
    RPAREN          reduce using rule 64 (varcte -> CTE_INT .)


state 68

    (65) varcte -> CTE_FLOAT .

    OP_MUL          reduce using rule 65 (varcte -> CTE_FLOAT .)
    OP_DIV          reduce using rule 65 (varcte -> CTE_FLOAT .)
    OP_SUM          reduce using rule 65 (varcte -> CTE_FLOAT .)
    OP_SUB          reduce using rule 65 (varcte -> CTE_FLOAT .)
    LESS            reduce using rule 65 (varcte -> CTE_FLOAT .)
    GREATER         reduce using rule 65 (varcte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 65 (varcte -> CTE_FLOAT .)
    EQUAL           reduce using rule 65 (varcte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 65 (varcte -> CTE_FLOAT .)
    LESS_EQUAL      reduce using rule 65 (varcte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 65 (varcte -> CTE_FLOAT .)
    COMMA           reduce using rule 65 (varcte -> CTE_FLOAT .)
    RPAREN          reduce using rule 65 (varcte -> CTE_FLOAT .)


state 69

    (40) f_call -> ID LPAREN expresion_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 96


state 70

    (41) expresion_list_opt -> expresion_list .
    (43) expresion_list -> expresion_list . COMMA expresion

    RPAREN          reduce using rule 41 (expresion_list_opt -> expresion_list .)
    COMMA           shift and go to state 97


state 71

    (42) expresion_list_opt -> empty .

    RPAREN          reduce using rule 42 (expresion_list_opt -> empty .)


state 72

    (44) expresion_list -> expresion .

    COMMA           reduce using rule 44 (expresion_list -> expresion .)
    RPAREN          reduce using rule 44 (expresion_list -> expresion .)


state 73

    (35) condition -> KEYWORD_IF LPAREN expresion . RPAREN cuadr_if body else_arg SEMICOLON

    RPAREN          shift and go to state 98


state 74

    (34) cycle -> KEYWORD_DO body KEYWORD_WHILE . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 99


state 75

    (29) print -> KEYWORD_PRINT LPAREN print_items . RPAREN SEMICOLON
    (30) print_items -> print_items . COMMA print_item

    RPAREN          shift and go to state 100
    COMMA           shift and go to state 101


state 76

    (31) print_items -> print_item .

    RPAREN          reduce using rule 31 (print_items -> print_item .)
    COMMA           reduce using rule 31 (print_items -> print_item .)


state 77

    (32) print_item -> expresion .

    RPAREN          reduce using rule 32 (print_item -> expresion .)
    COMMA           reduce using rule 32 (print_item -> expresion .)


state 78

    (33) print_item -> CTE_STRING .

    RPAREN          reduce using rule 33 (print_item -> CTE_STRING .)
    COMMA           reduce using rule 33 (print_item -> CTE_STRING .)


state 79

    (17) parametros -> ID COLON type . param_list
    (18) param_list -> . COMMA ID COLON type param_list
    (19) param_list -> . empty
    (66) empty -> .

    COMMA           shift and go to state 103
    RPAREN          reduce using rule 66 (empty -> .)

    param_list                     shift and go to state 102
    empty                          shift and go to state 104

state 80

    (14) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET . vars_opt body RBRACKET SEMICOLON
    (2) vars_opt -> . vars_opt VARS
    (3) vars_opt -> . VARS
    (4) vars_opt -> . empty
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON
    (66) empty -> .

  ! shift/reduce conflict for KEYWORD_VAR resolved as shift
    KEYWORD_VAR     shift and go to state 8
    LBRACE          reduce using rule 66 (empty -> .)

  ! KEYWORD_VAR     [ reduce using rule 66 (empty -> .) ]

    vars_opt                       shift and go to state 105
    VARS                           shift and go to state 6
    empty                          shift and go to state 7

state 81

    (28) assign -> ID ASSIGN_SIGN expresion SEMICOLON .

    RBRACE          reduce using rule 28 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    ID              reduce using rule 28 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_IF      reduce using rule 28 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_DO      reduce using rule 28 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 28 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)


state 82

    (45) expresion -> exp comparador . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    exp                            shift and go to state 106
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 83

    (53) exp -> exp OP_SUM . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    termino                        shift and go to state 107
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 84

    (54) exp -> exp OP_SUB . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    termino                        shift and go to state 108
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 85

    (47) comparador -> LESS .

    LPAREN          reduce using rule 47 (comparador -> LESS .)
    OP_SUM          reduce using rule 47 (comparador -> LESS .)
    OP_SUB          reduce using rule 47 (comparador -> LESS .)
    ID              reduce using rule 47 (comparador -> LESS .)
    CTE_INT         reduce using rule 47 (comparador -> LESS .)
    CTE_FLOAT       reduce using rule 47 (comparador -> LESS .)


state 86

    (48) comparador -> GREATER .

    LPAREN          reduce using rule 48 (comparador -> GREATER .)
    OP_SUM          reduce using rule 48 (comparador -> GREATER .)
    OP_SUB          reduce using rule 48 (comparador -> GREATER .)
    ID              reduce using rule 48 (comparador -> GREATER .)
    CTE_INT         reduce using rule 48 (comparador -> GREATER .)
    CTE_FLOAT       reduce using rule 48 (comparador -> GREATER .)


state 87

    (49) comparador -> NOT_EQUAL .

    LPAREN          reduce using rule 49 (comparador -> NOT_EQUAL .)
    OP_SUM          reduce using rule 49 (comparador -> NOT_EQUAL .)
    OP_SUB          reduce using rule 49 (comparador -> NOT_EQUAL .)
    ID              reduce using rule 49 (comparador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 49 (comparador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 49 (comparador -> NOT_EQUAL .)


state 88

    (50) comparador -> EQUAL .

    LPAREN          reduce using rule 50 (comparador -> EQUAL .)
    OP_SUM          reduce using rule 50 (comparador -> EQUAL .)
    OP_SUB          reduce using rule 50 (comparador -> EQUAL .)
    ID              reduce using rule 50 (comparador -> EQUAL .)
    CTE_INT         reduce using rule 50 (comparador -> EQUAL .)
    CTE_FLOAT       reduce using rule 50 (comparador -> EQUAL .)


state 89

    (51) comparador -> GREATER_EQUAL .

    LPAREN          reduce using rule 51 (comparador -> GREATER_EQUAL .)
    OP_SUM          reduce using rule 51 (comparador -> GREATER_EQUAL .)
    OP_SUB          reduce using rule 51 (comparador -> GREATER_EQUAL .)
    ID              reduce using rule 51 (comparador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 51 (comparador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 51 (comparador -> GREATER_EQUAL .)


state 90

    (52) comparador -> LESS_EQUAL .

    LPAREN          reduce using rule 52 (comparador -> LESS_EQUAL .)
    OP_SUM          reduce using rule 52 (comparador -> LESS_EQUAL .)
    OP_SUB          reduce using rule 52 (comparador -> LESS_EQUAL .)
    ID              reduce using rule 52 (comparador -> LESS_EQUAL .)
    CTE_INT         reduce using rule 52 (comparador -> LESS_EQUAL .)
    CTE_FLOAT       reduce using rule 52 (comparador -> LESS_EQUAL .)


state 91

    (60) factor -> OP_SUM varcte .

    OP_MUL          reduce using rule 60 (factor -> OP_SUM varcte .)
    OP_DIV          reduce using rule 60 (factor -> OP_SUM varcte .)
    OP_SUM          reduce using rule 60 (factor -> OP_SUM varcte .)
    OP_SUB          reduce using rule 60 (factor -> OP_SUM varcte .)
    LESS            reduce using rule 60 (factor -> OP_SUM varcte .)
    GREATER         reduce using rule 60 (factor -> OP_SUM varcte .)
    NOT_EQUAL       reduce using rule 60 (factor -> OP_SUM varcte .)
    EQUAL           reduce using rule 60 (factor -> OP_SUM varcte .)
    GREATER_EQUAL   reduce using rule 60 (factor -> OP_SUM varcte .)
    LESS_EQUAL      reduce using rule 60 (factor -> OP_SUM varcte .)
    SEMICOLON       reduce using rule 60 (factor -> OP_SUM varcte .)
    COMMA           reduce using rule 60 (factor -> OP_SUM varcte .)
    RPAREN          reduce using rule 60 (factor -> OP_SUM varcte .)


state 92

    (56) termino -> termino OP_MUL . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    factor                         shift and go to state 109
    varcte                         shift and go to state 66

state 93

    (57) termino -> termino OP_DIV . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    factor                         shift and go to state 110
    varcte                         shift and go to state 66

state 94

    (61) factor -> OP_SUB varcte .

    OP_MUL          reduce using rule 61 (factor -> OP_SUB varcte .)
    OP_DIV          reduce using rule 61 (factor -> OP_SUB varcte .)
    OP_SUM          reduce using rule 61 (factor -> OP_SUB varcte .)
    OP_SUB          reduce using rule 61 (factor -> OP_SUB varcte .)
    LESS            reduce using rule 61 (factor -> OP_SUB varcte .)
    GREATER         reduce using rule 61 (factor -> OP_SUB varcte .)
    NOT_EQUAL       reduce using rule 61 (factor -> OP_SUB varcte .)
    EQUAL           reduce using rule 61 (factor -> OP_SUB varcte .)
    GREATER_EQUAL   reduce using rule 61 (factor -> OP_SUB varcte .)
    LESS_EQUAL      reduce using rule 61 (factor -> OP_SUB varcte .)
    SEMICOLON       reduce using rule 61 (factor -> OP_SUB varcte .)
    COMMA           reduce using rule 61 (factor -> OP_SUB varcte .)
    RPAREN          reduce using rule 61 (factor -> OP_SUB varcte .)


state 95

    (59) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 111


state 96

    (40) f_call -> ID LPAREN expresion_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 112


state 97

    (43) expresion_list -> expresion_list COMMA . expresion
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 113
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 98

    (35) condition -> KEYWORD_IF LPAREN expresion RPAREN . cuadr_if body else_arg SEMICOLON
    (36) cuadr_if -> .

    LBRACE          reduce using rule 36 (cuadr_if -> .)

    cuadr_if                       shift and go to state 114

state 99

    (34) cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN . expresion RPAREN SEMICOLON
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 115
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 100

    (29) print -> KEYWORD_PRINT LPAREN print_items RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 116


state 101

    (30) print_items -> print_items COMMA . print_item
    (32) print_item -> . expresion
    (33) print_item -> . CTE_STRING
    (45) expresion -> . exp comparador exp
    (46) expresion -> . exp
    (53) exp -> . exp OP_SUM termino
    (54) exp -> . exp OP_SUB termino
    (55) exp -> . termino
    (56) termino -> . termino OP_MUL factor
    (57) termino -> . termino OP_DIV factor
    (58) termino -> . factor
    (59) factor -> . LPAREN expresion RPAREN
    (60) factor -> . OP_SUM varcte
    (61) factor -> . OP_SUB varcte
    (62) factor -> . varcte
    (63) varcte -> . ID
    (64) varcte -> . CTE_INT
    (65) varcte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 78
    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    print_item                     shift and go to state 117
    expresion                      shift and go to state 77
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 102

    (17) parametros -> ID COLON type param_list .

    RPAREN          reduce using rule 17 (parametros -> ID COLON type param_list .)


state 103

    (18) param_list -> COMMA . ID COLON type param_list

    ID              shift and go to state 118


state 104

    (19) param_list -> empty .

    RPAREN          reduce using rule 19 (param_list -> empty .)


state 105

    (14) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt . body RBRACKET SEMICOLON
    (2) vars_opt -> vars_opt . VARS
    (20) body -> . LBRACE statement_list RBRACE
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON

    LBRACE          shift and go to state 23
    KEYWORD_VAR     shift and go to state 8

    body                           shift and go to state 119
    VARS                           shift and go to state 10

state 106

    (45) expresion -> exp comparador exp .
    (53) exp -> exp . OP_SUM termino
    (54) exp -> exp . OP_SUB termino

    SEMICOLON       reduce using rule 45 (expresion -> exp comparador exp .)
    COMMA           reduce using rule 45 (expresion -> exp comparador exp .)
    RPAREN          reduce using rule 45 (expresion -> exp comparador exp .)
    OP_SUM          shift and go to state 83
    OP_SUB          shift and go to state 84


state 107

    (53) exp -> exp OP_SUM termino .
    (56) termino -> termino . OP_MUL factor
    (57) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 53 (exp -> exp OP_SUM termino .)
    OP_SUB          reduce using rule 53 (exp -> exp OP_SUM termino .)
    LESS            reduce using rule 53 (exp -> exp OP_SUM termino .)
    GREATER         reduce using rule 53 (exp -> exp OP_SUM termino .)
    NOT_EQUAL       reduce using rule 53 (exp -> exp OP_SUM termino .)
    EQUAL           reduce using rule 53 (exp -> exp OP_SUM termino .)
    GREATER_EQUAL   reduce using rule 53 (exp -> exp OP_SUM termino .)
    LESS_EQUAL      reduce using rule 53 (exp -> exp OP_SUM termino .)
    SEMICOLON       reduce using rule 53 (exp -> exp OP_SUM termino .)
    COMMA           reduce using rule 53 (exp -> exp OP_SUM termino .)
    RPAREN          reduce using rule 53 (exp -> exp OP_SUM termino .)
    OP_MUL          shift and go to state 92
    OP_DIV          shift and go to state 93


state 108

    (54) exp -> exp OP_SUB termino .
    (56) termino -> termino . OP_MUL factor
    (57) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 54 (exp -> exp OP_SUB termino .)
    OP_SUB          reduce using rule 54 (exp -> exp OP_SUB termino .)
    LESS            reduce using rule 54 (exp -> exp OP_SUB termino .)
    GREATER         reduce using rule 54 (exp -> exp OP_SUB termino .)
    NOT_EQUAL       reduce using rule 54 (exp -> exp OP_SUB termino .)
    EQUAL           reduce using rule 54 (exp -> exp OP_SUB termino .)
    GREATER_EQUAL   reduce using rule 54 (exp -> exp OP_SUB termino .)
    LESS_EQUAL      reduce using rule 54 (exp -> exp OP_SUB termino .)
    SEMICOLON       reduce using rule 54 (exp -> exp OP_SUB termino .)
    COMMA           reduce using rule 54 (exp -> exp OP_SUB termino .)
    RPAREN          reduce using rule 54 (exp -> exp OP_SUB termino .)
    OP_MUL          shift and go to state 92
    OP_DIV          shift and go to state 93


state 109

    (56) termino -> termino OP_MUL factor .

    OP_MUL          reduce using rule 56 (termino -> termino OP_MUL factor .)
    OP_DIV          reduce using rule 56 (termino -> termino OP_MUL factor .)
    OP_SUM          reduce using rule 56 (termino -> termino OP_MUL factor .)
    OP_SUB          reduce using rule 56 (termino -> termino OP_MUL factor .)
    LESS            reduce using rule 56 (termino -> termino OP_MUL factor .)
    GREATER         reduce using rule 56 (termino -> termino OP_MUL factor .)
    NOT_EQUAL       reduce using rule 56 (termino -> termino OP_MUL factor .)
    EQUAL           reduce using rule 56 (termino -> termino OP_MUL factor .)
    GREATER_EQUAL   reduce using rule 56 (termino -> termino OP_MUL factor .)
    LESS_EQUAL      reduce using rule 56 (termino -> termino OP_MUL factor .)
    SEMICOLON       reduce using rule 56 (termino -> termino OP_MUL factor .)
    COMMA           reduce using rule 56 (termino -> termino OP_MUL factor .)
    RPAREN          reduce using rule 56 (termino -> termino OP_MUL factor .)


state 110

    (57) termino -> termino OP_DIV factor .

    OP_MUL          reduce using rule 57 (termino -> termino OP_DIV factor .)
    OP_DIV          reduce using rule 57 (termino -> termino OP_DIV factor .)
    OP_SUM          reduce using rule 57 (termino -> termino OP_DIV factor .)
    OP_SUB          reduce using rule 57 (termino -> termino OP_DIV factor .)
    LESS            reduce using rule 57 (termino -> termino OP_DIV factor .)
    GREATER         reduce using rule 57 (termino -> termino OP_DIV factor .)
    NOT_EQUAL       reduce using rule 57 (termino -> termino OP_DIV factor .)
    EQUAL           reduce using rule 57 (termino -> termino OP_DIV factor .)
    GREATER_EQUAL   reduce using rule 57 (termino -> termino OP_DIV factor .)
    LESS_EQUAL      reduce using rule 57 (termino -> termino OP_DIV factor .)
    SEMICOLON       reduce using rule 57 (termino -> termino OP_DIV factor .)
    COMMA           reduce using rule 57 (termino -> termino OP_DIV factor .)
    RPAREN          reduce using rule 57 (termino -> termino OP_DIV factor .)


state 111

    (59) factor -> LPAREN expresion RPAREN .

    OP_MUL          reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    OP_DIV          reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    OP_SUM          reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    OP_SUB          reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    LESS            reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    NOT_EQUAL       reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    EQUAL           reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    GREATER_EQUAL   reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    LESS_EQUAL      reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 59 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 59 (factor -> LPAREN expresion RPAREN .)


state 112

    (40) f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .

    RBRACE          reduce using rule 40 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    ID              reduce using rule 40 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 40 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 40 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 40 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)


state 113

    (43) expresion_list -> expresion_list COMMA expresion .

    COMMA           reduce using rule 43 (expresion_list -> expresion_list COMMA expresion .)
    RPAREN          reduce using rule 43 (expresion_list -> expresion_list COMMA expresion .)


state 114

    (35) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if . body else_arg SEMICOLON
    (20) body -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 23

    body                           shift and go to state 120

state 115

    (34) cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 121


state 116

    (29) print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .

    RBRACE          reduce using rule 29 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    ID              reduce using rule 29 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 29 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 29 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 29 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)


state 117

    (30) print_items -> print_items COMMA print_item .

    RPAREN          reduce using rule 30 (print_items -> print_items COMMA print_item .)
    COMMA           reduce using rule 30 (print_items -> print_items COMMA print_item .)


state 118

    (18) param_list -> COMMA ID . COLON type param_list

    COLON           shift and go to state 122


state 119

    (14) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 123


state 120

    (35) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body . else_arg SEMICOLON
    (37) else_arg -> . KEYWORD_ELSE cuadr_else body
    (39) else_arg -> . empty
    (66) empty -> .

    KEYWORD_ELSE    shift and go to state 125
    SEMICOLON       reduce using rule 66 (empty -> .)

    else_arg                       shift and go to state 124
    empty                          shift and go to state 126

state 121

    (34) cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 127


state 122

    (18) param_list -> COMMA ID COLON . type param_list
    (9) type -> . KEYWORD_INT
    (10) type -> . KEYWORD_FLOAT
    (11) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 44
    KEYWORD_FLOAT   shift and go to state 45
    KEYWORD_STRING  shift and go to state 46

    type                           shift and go to state 128

state 123

    (14) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 129


state 124

    (35) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg . SEMICOLON

    SEMICOLON       shift and go to state 130


state 125

    (37) else_arg -> KEYWORD_ELSE . cuadr_else body
    (38) cuadr_else -> .

    LBRACE          reduce using rule 38 (cuadr_else -> .)

    cuadr_else                     shift and go to state 131

state 126

    (39) else_arg -> empty .

    SEMICOLON       reduce using rule 39 (else_arg -> empty .)


state 127

    (34) cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .

    RBRACE          reduce using rule 34 (cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    ID              reduce using rule 34 (cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 34 (cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 34 (cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 34 (cycle -> KEYWORD_DO body KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)


state 128

    (18) param_list -> COMMA ID COLON type . param_list
    (18) param_list -> . COMMA ID COLON type param_list
    (19) param_list -> . empty
    (66) empty -> .

    COMMA           shift and go to state 103
    RPAREN          reduce using rule 66 (empty -> .)

    param_list                     shift and go to state 132
    empty                          shift and go to state 104

state 129

    (14) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON .

    KEYWORD_MAIN    reduce using rule 14 (FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON .)


state 130

    (35) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON .

    RBRACE          reduce using rule 35 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON .)
    ID              reduce using rule 35 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON .)
    KEYWORD_IF      reduce using rule 35 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON .)
    KEYWORD_DO      reduce using rule 35 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 35 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if body else_arg SEMICOLON .)


state 131

    (37) else_arg -> KEYWORD_ELSE cuadr_else . body
    (20) body -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 23

    body                           shift and go to state 133

state 132

    (18) param_list -> COMMA ID COLON type param_list .

    RPAREN          reduce using rule 18 (param_list -> COMMA ID COLON type param_list .)


state 133

    (37) else_arg -> KEYWORD_ELSE cuadr_else body .

    SEMICOLON       reduce using rule 37 (else_arg -> KEYWORD_ELSE cuadr_else body .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KEYWORD_VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for KEYWORD_VAR in state 80 resolved as shift
