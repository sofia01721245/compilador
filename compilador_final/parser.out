Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON
Rule 2     vars_opt -> vars_opt VARS
Rule 3     vars_opt -> VARS
Rule 4     vars_opt -> empty
Rule 5     VARS -> KEYWORD_VAR var_list SEMICOLON
Rule 6     var_list -> ID id_list COLON type
Rule 7     id_list -> COMMA ID id_list
Rule 8     id_list -> empty
Rule 9     type -> KEYWORD_INT
Rule 10    type -> KEYWORD_FLOAT
Rule 11    type -> KEYWORD_STRING
Rule 12    funcs_opt -> funcs_opt FUNCS
Rule 13    funcs_opt -> FUNCS
Rule 14    funcs_opt -> empty
Rule 15    FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON
Rule 16    parametros_opt -> parametros
Rule 17    parametros_opt -> empty
Rule 18    parametros -> ID COLON type param_list
Rule 19    param_list -> COMMA ID COLON type param_list
Rule 20    param_list -> empty
Rule 21    body -> statement_list
Rule 22    statement_list -> statement statement_list
Rule 23    statement_list -> statement
Rule 24    statement_list -> empty
Rule 25    statement -> assign
Rule 26    statement -> condition
Rule 27    statement -> cycle
Rule 28    statement -> f_call
Rule 29    statement -> print
Rule 30    assign -> ID ASSIGN_SIGN expresion SEMICOLON
Rule 31    print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON
Rule 32    print_items -> print_items COMMA print_item
Rule 33    print_items -> print_item
Rule 34    print_item -> expresion
Rule 35    print_item -> CTE_STRING
Rule 36    cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
Rule 37    condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
Rule 38    cuadr_if -> <empty>
Rule 39    else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE
Rule 40    cuadr_else -> <empty>
Rule 41    else_arg -> empty
Rule 42    f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON
Rule 43    expresion_list_opt -> expresion_list
Rule 44    expresion_list_opt -> empty
Rule 45    expresion_list -> expresion_list COMMA expresion
Rule 46    expresion_list -> expresion
Rule 47    expresion -> exp comparador exp
Rule 48    expresion -> exp
Rule 49    comparador -> LESS
Rule 50    comparador -> GREATER
Rule 51    comparador -> NOT_EQUAL
Rule 52    comparador -> EQUAL
Rule 53    comparador -> GREATER_EQUAL
Rule 54    comparador -> LESS_EQUAL
Rule 55    exp -> exp OP_SUM termino
Rule 56    exp -> exp OP_SUB termino
Rule 57    exp -> termino
Rule 58    termino -> termino OP_MUL factor
Rule 59    termino -> termino OP_DIV factor
Rule 60    termino -> factor
Rule 61    factor -> LPAREN expresion RPAREN
Rule 62    factor -> OP_SUM varcte
Rule 63    factor -> OP_SUB varcte
Rule 64    factor -> varcte
Rule 65    varcte -> ID
Rule 66    varcte -> CTE_INT
Rule 67    varcte -> CTE_FLOAT
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ASSIGN_SIGN          : 30
COLON                : 6 18 19
COMMA                : 7 19 32 45
CTE_FLOAT            : 67
CTE_INT              : 66
CTE_STRING           : 35
EQUAL                : 52
GREATER              : 50
GREATER_EQUAL        : 53
ID                   : 1 6 7 15 18 19 30 42 65
KEYWORD_DO           : 36
KEYWORD_ELSE         : 39
KEYWORD_END          : 1
KEYWORD_FLOAT        : 10
KEYWORD_IF           : 37
KEYWORD_INT          : 9
KEYWORD_MAIN         : 1
KEYWORD_PRINT        : 31
KEYWORD_PROGRAM      : 1
KEYWORD_STRING       : 11
KEYWORD_VAR          : 5
KEYWORD_VOID         : 15
KEYWORD_WHILE        : 36
LBRACE               : 1 36 37 39
LBRACKET             : 15
LESS                 : 49
LESS_EQUAL           : 54
LPAREN               : 15 31 36 37 42 61
NOT_EQUAL            : 51
OP_DIV               : 59
OP_MUL               : 58
OP_SUB               : 56 63
OP_SUM               : 55 62
RBRACE               : 1 36 37 39
RBRACKET             : 15
RPAREN               : 15 31 36 37 42 61
SEMICOLON            : 1 1 5 15 30 31 36 37 42
error                : 

Nonterminals, with rules where they appear

FUNCS                : 12 13
Programa             : 0
VARS                 : 2 3
assign               : 25
body                 : 1 15 36 37 39
comparador           : 47
condition            : 26
cuadr_else           : 39
cuadr_if             : 37
cycle                : 27
else_arg             : 37
empty                : 4 8 14 17 20 24 41 44
exp                  : 47 47 48 55 56
expresion            : 30 34 36 37 45 46 61
expresion_list       : 43 45
expresion_list_opt   : 42
f_call               : 28
factor               : 58 59 60
funcs_opt            : 1 12
id_list              : 6 7
param_list           : 18 19
parametros           : 16
parametros_opt       : 15
print                : 29
print_item           : 32 33
print_items          : 31 32
statement            : 22 23
statement_list       : 21 22
termino              : 55 56 57 58 59
type                 : 6 18 19
var_list             : 5
varcte               : 62 63 64
vars_opt             : 1 2 15

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON

    KEYWORD_PROGRAM shift and go to state 2

    Programa                       shift and go to state 1

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> KEYWORD_PROGRAM . ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON

    ID              shift and go to state 3


state 3

    (1) Programa -> KEYWORD_PROGRAM ID . SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON

    SEMICOLON       shift and go to state 4


state 4

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON . vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON
    (2) vars_opt -> . vars_opt VARS
    (3) vars_opt -> . VARS
    (4) vars_opt -> . empty
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON
    (68) empty -> .

  ! shift/reduce conflict for KEYWORD_VAR resolved as shift
    KEYWORD_VAR     shift and go to state 8
    KEYWORD_VOID    reduce using rule 68 (empty -> .)
    KEYWORD_MAIN    reduce using rule 68 (empty -> .)

  ! KEYWORD_VAR     [ reduce using rule 68 (empty -> .) ]

    vars_opt                       shift and go to state 5
    VARS                           shift and go to state 6
    empty                          shift and go to state 7

state 5

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt . funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON
    (2) vars_opt -> vars_opt . VARS
    (12) funcs_opt -> . funcs_opt FUNCS
    (13) funcs_opt -> . FUNCS
    (14) funcs_opt -> . empty
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON
    (15) FUNCS -> . KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON
    (68) empty -> .

  ! shift/reduce conflict for KEYWORD_VOID resolved as shift
    KEYWORD_VAR     shift and go to state 8
    KEYWORD_VOID    shift and go to state 13
    KEYWORD_MAIN    reduce using rule 68 (empty -> .)

  ! KEYWORD_VOID    [ reduce using rule 68 (empty -> .) ]

    funcs_opt                      shift and go to state 9
    VARS                           shift and go to state 10
    FUNCS                          shift and go to state 11
    empty                          shift and go to state 12

state 6

    (3) vars_opt -> VARS .

    KEYWORD_VAR     reduce using rule 3 (vars_opt -> VARS .)
    KEYWORD_VOID    reduce using rule 3 (vars_opt -> VARS .)
    KEYWORD_MAIN    reduce using rule 3 (vars_opt -> VARS .)
    ID              reduce using rule 3 (vars_opt -> VARS .)
    KEYWORD_IF      reduce using rule 3 (vars_opt -> VARS .)
    KEYWORD_DO      reduce using rule 3 (vars_opt -> VARS .)
    KEYWORD_PRINT   reduce using rule 3 (vars_opt -> VARS .)
    RBRACKET        reduce using rule 3 (vars_opt -> VARS .)


state 7

    (4) vars_opt -> empty .

    KEYWORD_VAR     reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_VOID    reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_MAIN    reduce using rule 4 (vars_opt -> empty .)
    ID              reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_IF      reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_DO      reduce using rule 4 (vars_opt -> empty .)
    KEYWORD_PRINT   reduce using rule 4 (vars_opt -> empty .)
    RBRACKET        reduce using rule 4 (vars_opt -> empty .)


state 8

    (5) VARS -> KEYWORD_VAR . var_list SEMICOLON
    (6) var_list -> . ID id_list COLON type

    ID              shift and go to state 15

    var_list                       shift and go to state 14

state 9

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt . KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON
    (12) funcs_opt -> funcs_opt . FUNCS
    (15) FUNCS -> . KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON

    KEYWORD_MAIN    shift and go to state 16
    KEYWORD_VOID    shift and go to state 13

    FUNCS                          shift and go to state 17

state 10

    (2) vars_opt -> vars_opt VARS .

    KEYWORD_VAR     reduce using rule 2 (vars_opt -> vars_opt VARS .)
    KEYWORD_VOID    reduce using rule 2 (vars_opt -> vars_opt VARS .)
    KEYWORD_MAIN    reduce using rule 2 (vars_opt -> vars_opt VARS .)
    ID              reduce using rule 2 (vars_opt -> vars_opt VARS .)
    KEYWORD_IF      reduce using rule 2 (vars_opt -> vars_opt VARS .)
    KEYWORD_DO      reduce using rule 2 (vars_opt -> vars_opt VARS .)
    KEYWORD_PRINT   reduce using rule 2 (vars_opt -> vars_opt VARS .)
    RBRACKET        reduce using rule 2 (vars_opt -> vars_opt VARS .)


state 11

    (13) funcs_opt -> FUNCS .

    KEYWORD_MAIN    reduce using rule 13 (funcs_opt -> FUNCS .)
    KEYWORD_VOID    reduce using rule 13 (funcs_opt -> FUNCS .)


state 12

    (14) funcs_opt -> empty .

    KEYWORD_MAIN    reduce using rule 14 (funcs_opt -> empty .)
    KEYWORD_VOID    reduce using rule 14 (funcs_opt -> empty .)


state 13

    (15) FUNCS -> KEYWORD_VOID . ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON

    ID              shift and go to state 18


state 14

    (5) VARS -> KEYWORD_VAR var_list . SEMICOLON

    SEMICOLON       shift and go to state 19


state 15

    (6) var_list -> ID . id_list COLON type
    (7) id_list -> . COMMA ID id_list
    (8) id_list -> . empty
    (68) empty -> .

    COMMA           shift and go to state 21
    COLON           reduce using rule 68 (empty -> .)

    id_list                        shift and go to state 20
    empty                          shift and go to state 22

state 16

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN . LBRACE body RBRACE KEYWORD_END SEMICOLON

    LBRACE          shift and go to state 23


state 17

    (12) funcs_opt -> funcs_opt FUNCS .

    KEYWORD_MAIN    reduce using rule 12 (funcs_opt -> funcs_opt FUNCS .)
    KEYWORD_VOID    reduce using rule 12 (funcs_opt -> funcs_opt FUNCS .)


state 18

    (15) FUNCS -> KEYWORD_VOID ID . LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON

    LPAREN          shift and go to state 24


state 19

    (5) VARS -> KEYWORD_VAR var_list SEMICOLON .

    KEYWORD_VAR     reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    KEYWORD_VOID    reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    KEYWORD_MAIN    reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    ID              reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    KEYWORD_IF      reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    KEYWORD_DO      reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)
    RBRACKET        reduce using rule 5 (VARS -> KEYWORD_VAR var_list SEMICOLON .)


state 20

    (6) var_list -> ID id_list . COLON type

    COLON           shift and go to state 25


state 21

    (7) id_list -> COMMA . ID id_list

    ID              shift and go to state 26


state 22

    (8) id_list -> empty .

    COLON           reduce using rule 8 (id_list -> empty .)


state 23

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE . body RBRACE KEYWORD_END SEMICOLON
    (21) body -> . statement_list
    (22) statement_list -> . statement statement_list
    (23) statement_list -> . statement
    (24) statement_list -> . empty
    (25) statement -> . assign
    (26) statement -> . condition
    (27) statement -> . cycle
    (28) statement -> . f_call
    (29) statement -> . print
    (68) empty -> .
    (30) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (37) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (36) cycle -> . KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (42) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (31) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    ID              shift and go to state 27
    KEYWORD_IF      shift and go to state 37
    KEYWORD_DO      shift and go to state 38
    KEYWORD_PRINT   shift and go to state 39

    body                           shift and go to state 28
    statement_list                 shift and go to state 29
    statement                      shift and go to state 30
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 24

    (15) FUNCS -> KEYWORD_VOID ID LPAREN . parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON
    (16) parametros_opt -> . parametros
    (17) parametros_opt -> . empty
    (18) parametros -> . ID COLON type param_list
    (68) empty -> .

    ID              shift and go to state 40
    RPAREN          reduce using rule 68 (empty -> .)

    parametros_opt                 shift and go to state 41
    parametros                     shift and go to state 42
    empty                          shift and go to state 43

state 25

    (6) var_list -> ID id_list COLON . type
    (9) type -> . KEYWORD_INT
    (10) type -> . KEYWORD_FLOAT
    (11) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 45
    KEYWORD_FLOAT   shift and go to state 46
    KEYWORD_STRING  shift and go to state 47

    type                           shift and go to state 44

state 26

    (7) id_list -> COMMA ID . id_list
    (7) id_list -> . COMMA ID id_list
    (8) id_list -> . empty
    (68) empty -> .

    COMMA           shift and go to state 21
    COLON           reduce using rule 68 (empty -> .)

    id_list                        shift and go to state 48
    empty                          shift and go to state 22

state 27

    (30) assign -> ID . ASSIGN_SIGN expresion SEMICOLON
    (42) f_call -> ID . LPAREN expresion_list_opt RPAREN SEMICOLON

    ASSIGN_SIGN     shift and go to state 49
    LPAREN          shift and go to state 50


state 28

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body . RBRACE KEYWORD_END SEMICOLON

    RBRACE          shift and go to state 51


state 29

    (21) body -> statement_list .

    RBRACE          reduce using rule 21 (body -> statement_list .)
    RBRACKET        reduce using rule 21 (body -> statement_list .)


state 30

    (22) statement_list -> statement . statement_list
    (23) statement_list -> statement .
    (22) statement_list -> . statement statement_list
    (23) statement_list -> . statement
    (24) statement_list -> . empty
    (25) statement -> . assign
    (26) statement -> . condition
    (27) statement -> . cycle
    (28) statement -> . f_call
    (29) statement -> . print
    (68) empty -> .
    (30) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (37) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (36) cycle -> . KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (42) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (31) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

  ! reduce/reduce conflict for RBRACE resolved using rule 23 (statement_list -> statement .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 23 (statement_list -> statement .)
    RBRACE          reduce using rule 23 (statement_list -> statement .)
    RBRACKET        reduce using rule 23 (statement_list -> statement .)
    ID              shift and go to state 27
    KEYWORD_IF      shift and go to state 37
    KEYWORD_DO      shift and go to state 38
    KEYWORD_PRINT   shift and go to state 39

  ! RBRACE          [ reduce using rule 68 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 68 (empty -> .) ]

    statement                      shift and go to state 30
    statement_list                 shift and go to state 52
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 31

    (24) statement_list -> empty .

    RBRACE          reduce using rule 24 (statement_list -> empty .)
    RBRACKET        reduce using rule 24 (statement_list -> empty .)


state 32

    (25) statement -> assign .

    ID              reduce using rule 25 (statement -> assign .)
    KEYWORD_IF      reduce using rule 25 (statement -> assign .)
    KEYWORD_DO      reduce using rule 25 (statement -> assign .)
    KEYWORD_PRINT   reduce using rule 25 (statement -> assign .)
    RBRACE          reduce using rule 25 (statement -> assign .)
    RBRACKET        reduce using rule 25 (statement -> assign .)


state 33

    (26) statement -> condition .

    ID              reduce using rule 26 (statement -> condition .)
    KEYWORD_IF      reduce using rule 26 (statement -> condition .)
    KEYWORD_DO      reduce using rule 26 (statement -> condition .)
    KEYWORD_PRINT   reduce using rule 26 (statement -> condition .)
    RBRACE          reduce using rule 26 (statement -> condition .)
    RBRACKET        reduce using rule 26 (statement -> condition .)


state 34

    (27) statement -> cycle .

    ID              reduce using rule 27 (statement -> cycle .)
    KEYWORD_IF      reduce using rule 27 (statement -> cycle .)
    KEYWORD_DO      reduce using rule 27 (statement -> cycle .)
    KEYWORD_PRINT   reduce using rule 27 (statement -> cycle .)
    RBRACE          reduce using rule 27 (statement -> cycle .)
    RBRACKET        reduce using rule 27 (statement -> cycle .)


state 35

    (28) statement -> f_call .

    ID              reduce using rule 28 (statement -> f_call .)
    KEYWORD_IF      reduce using rule 28 (statement -> f_call .)
    KEYWORD_DO      reduce using rule 28 (statement -> f_call .)
    KEYWORD_PRINT   reduce using rule 28 (statement -> f_call .)
    RBRACE          reduce using rule 28 (statement -> f_call .)
    RBRACKET        reduce using rule 28 (statement -> f_call .)


state 36

    (29) statement -> print .

    ID              reduce using rule 29 (statement -> print .)
    KEYWORD_IF      reduce using rule 29 (statement -> print .)
    KEYWORD_DO      reduce using rule 29 (statement -> print .)
    KEYWORD_PRINT   reduce using rule 29 (statement -> print .)
    RBRACE          reduce using rule 29 (statement -> print .)
    RBRACKET        reduce using rule 29 (statement -> print .)


state 37

    (37) condition -> KEYWORD_IF . LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON

    LPAREN          shift and go to state 53


state 38

    (36) cycle -> KEYWORD_DO . LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    LBRACE          shift and go to state 54


state 39

    (31) print -> KEYWORD_PRINT . LPAREN print_items RPAREN SEMICOLON

    LPAREN          shift and go to state 55


state 40

    (18) parametros -> ID . COLON type param_list

    COLON           shift and go to state 56


state 41

    (15) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt . RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON

    RPAREN          shift and go to state 57


state 42

    (16) parametros_opt -> parametros .

    RPAREN          reduce using rule 16 (parametros_opt -> parametros .)


state 43

    (17) parametros_opt -> empty .

    RPAREN          reduce using rule 17 (parametros_opt -> empty .)


state 44

    (6) var_list -> ID id_list COLON type .

    SEMICOLON       reduce using rule 6 (var_list -> ID id_list COLON type .)


state 45

    (9) type -> KEYWORD_INT .

    SEMICOLON       reduce using rule 9 (type -> KEYWORD_INT .)
    COMMA           reduce using rule 9 (type -> KEYWORD_INT .)
    RPAREN          reduce using rule 9 (type -> KEYWORD_INT .)


state 46

    (10) type -> KEYWORD_FLOAT .

    SEMICOLON       reduce using rule 10 (type -> KEYWORD_FLOAT .)
    COMMA           reduce using rule 10 (type -> KEYWORD_FLOAT .)
    RPAREN          reduce using rule 10 (type -> KEYWORD_FLOAT .)


state 47

    (11) type -> KEYWORD_STRING .

    SEMICOLON       reduce using rule 11 (type -> KEYWORD_STRING .)
    COMMA           reduce using rule 11 (type -> KEYWORD_STRING .)
    RPAREN          reduce using rule 11 (type -> KEYWORD_STRING .)


state 48

    (7) id_list -> COMMA ID id_list .

    COLON           reduce using rule 7 (id_list -> COMMA ID id_list .)


state 49

    (30) assign -> ID ASSIGN_SIGN . expresion SEMICOLON
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 59
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 50

    (42) f_call -> ID LPAREN . expresion_list_opt RPAREN SEMICOLON
    (43) expresion_list_opt -> . expresion_list
    (44) expresion_list_opt -> . empty
    (45) expresion_list -> . expresion_list COMMA expresion
    (46) expresion_list -> . expresion
    (68) empty -> .
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    RPAREN          reduce using rule 68 (empty -> .)
    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion_list_opt             shift and go to state 69
    expresion_list                 shift and go to state 70
    empty                          shift and go to state 71
    expresion                      shift and go to state 72
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 51

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE . KEYWORD_END SEMICOLON

    KEYWORD_END     shift and go to state 73


state 52

    (22) statement_list -> statement statement_list .

    RBRACE          reduce using rule 22 (statement_list -> statement statement_list .)
    RBRACKET        reduce using rule 22 (statement_list -> statement statement_list .)


state 53

    (37) condition -> KEYWORD_IF LPAREN . expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 74
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 54

    (36) cycle -> KEYWORD_DO LBRACE . body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (21) body -> . statement_list
    (22) statement_list -> . statement statement_list
    (23) statement_list -> . statement
    (24) statement_list -> . empty
    (25) statement -> . assign
    (26) statement -> . condition
    (27) statement -> . cycle
    (28) statement -> . f_call
    (29) statement -> . print
    (68) empty -> .
    (30) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (37) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (36) cycle -> . KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (42) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (31) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    ID              shift and go to state 27
    KEYWORD_IF      shift and go to state 37
    KEYWORD_DO      shift and go to state 38
    KEYWORD_PRINT   shift and go to state 39

    body                           shift and go to state 75
    statement_list                 shift and go to state 29
    statement                      shift and go to state 30
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 55

    (31) print -> KEYWORD_PRINT LPAREN . print_items RPAREN SEMICOLON
    (32) print_items -> . print_items COMMA print_item
    (33) print_items -> . print_item
    (34) print_item -> . expresion
    (35) print_item -> . CTE_STRING
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 79
    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    print_items                    shift and go to state 76
    print_item                     shift and go to state 77
    expresion                      shift and go to state 78
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 56

    (18) parametros -> ID COLON . type param_list
    (9) type -> . KEYWORD_INT
    (10) type -> . KEYWORD_FLOAT
    (11) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 45
    KEYWORD_FLOAT   shift and go to state 46
    KEYWORD_STRING  shift and go to state 47

    type                           shift and go to state 80

state 57

    (15) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN . LBRACKET vars_opt body RBRACKET SEMICOLON

    LBRACKET        shift and go to state 81


state 58

    (65) varcte -> ID .

    OP_MUL          reduce using rule 65 (varcte -> ID .)
    OP_DIV          reduce using rule 65 (varcte -> ID .)
    OP_SUM          reduce using rule 65 (varcte -> ID .)
    OP_SUB          reduce using rule 65 (varcte -> ID .)
    LESS            reduce using rule 65 (varcte -> ID .)
    GREATER         reduce using rule 65 (varcte -> ID .)
    NOT_EQUAL       reduce using rule 65 (varcte -> ID .)
    EQUAL           reduce using rule 65 (varcte -> ID .)
    GREATER_EQUAL   reduce using rule 65 (varcte -> ID .)
    LESS_EQUAL      reduce using rule 65 (varcte -> ID .)
    SEMICOLON       reduce using rule 65 (varcte -> ID .)
    COMMA           reduce using rule 65 (varcte -> ID .)
    RPAREN          reduce using rule 65 (varcte -> ID .)


state 59

    (30) assign -> ID ASSIGN_SIGN expresion . SEMICOLON

    SEMICOLON       shift and go to state 82


state 60

    (47) expresion -> exp . comparador exp
    (48) expresion -> exp .
    (55) exp -> exp . OP_SUM termino
    (56) exp -> exp . OP_SUB termino
    (49) comparador -> . LESS
    (50) comparador -> . GREATER
    (51) comparador -> . NOT_EQUAL
    (52) comparador -> . EQUAL
    (53) comparador -> . GREATER_EQUAL
    (54) comparador -> . LESS_EQUAL

    SEMICOLON       reduce using rule 48 (expresion -> exp .)
    COMMA           reduce using rule 48 (expresion -> exp .)
    RPAREN          reduce using rule 48 (expresion -> exp .)
    OP_SUM          shift and go to state 84
    OP_SUB          shift and go to state 85
    LESS            shift and go to state 86
    GREATER         shift and go to state 87
    NOT_EQUAL       shift and go to state 88
    EQUAL           shift and go to state 89
    GREATER_EQUAL   shift and go to state 90
    LESS_EQUAL      shift and go to state 91

    comparador                     shift and go to state 83

state 61

    (62) factor -> OP_SUM . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    varcte                         shift and go to state 92

state 62

    (57) exp -> termino .
    (58) termino -> termino . OP_MUL factor
    (59) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 57 (exp -> termino .)
    OP_SUB          reduce using rule 57 (exp -> termino .)
    LESS            reduce using rule 57 (exp -> termino .)
    GREATER         reduce using rule 57 (exp -> termino .)
    NOT_EQUAL       reduce using rule 57 (exp -> termino .)
    EQUAL           reduce using rule 57 (exp -> termino .)
    GREATER_EQUAL   reduce using rule 57 (exp -> termino .)
    LESS_EQUAL      reduce using rule 57 (exp -> termino .)
    SEMICOLON       reduce using rule 57 (exp -> termino .)
    COMMA           reduce using rule 57 (exp -> termino .)
    RPAREN          reduce using rule 57 (exp -> termino .)
    OP_MUL          shift and go to state 93
    OP_DIV          shift and go to state 94


state 63

    (63) factor -> OP_SUB . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    varcte                         shift and go to state 95

state 64

    (60) termino -> factor .

    OP_MUL          reduce using rule 60 (termino -> factor .)
    OP_DIV          reduce using rule 60 (termino -> factor .)
    OP_SUM          reduce using rule 60 (termino -> factor .)
    OP_SUB          reduce using rule 60 (termino -> factor .)
    LESS            reduce using rule 60 (termino -> factor .)
    GREATER         reduce using rule 60 (termino -> factor .)
    NOT_EQUAL       reduce using rule 60 (termino -> factor .)
    EQUAL           reduce using rule 60 (termino -> factor .)
    GREATER_EQUAL   reduce using rule 60 (termino -> factor .)
    LESS_EQUAL      reduce using rule 60 (termino -> factor .)
    SEMICOLON       reduce using rule 60 (termino -> factor .)
    COMMA           reduce using rule 60 (termino -> factor .)
    RPAREN          reduce using rule 60 (termino -> factor .)


state 65

    (61) factor -> LPAREN . expresion RPAREN
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 96
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 66

    (64) factor -> varcte .

    OP_MUL          reduce using rule 64 (factor -> varcte .)
    OP_DIV          reduce using rule 64 (factor -> varcte .)
    OP_SUM          reduce using rule 64 (factor -> varcte .)
    OP_SUB          reduce using rule 64 (factor -> varcte .)
    LESS            reduce using rule 64 (factor -> varcte .)
    GREATER         reduce using rule 64 (factor -> varcte .)
    NOT_EQUAL       reduce using rule 64 (factor -> varcte .)
    EQUAL           reduce using rule 64 (factor -> varcte .)
    GREATER_EQUAL   reduce using rule 64 (factor -> varcte .)
    LESS_EQUAL      reduce using rule 64 (factor -> varcte .)
    SEMICOLON       reduce using rule 64 (factor -> varcte .)
    COMMA           reduce using rule 64 (factor -> varcte .)
    RPAREN          reduce using rule 64 (factor -> varcte .)


state 67

    (66) varcte -> CTE_INT .

    OP_MUL          reduce using rule 66 (varcte -> CTE_INT .)
    OP_DIV          reduce using rule 66 (varcte -> CTE_INT .)
    OP_SUM          reduce using rule 66 (varcte -> CTE_INT .)
    OP_SUB          reduce using rule 66 (varcte -> CTE_INT .)
    LESS            reduce using rule 66 (varcte -> CTE_INT .)
    GREATER         reduce using rule 66 (varcte -> CTE_INT .)
    NOT_EQUAL       reduce using rule 66 (varcte -> CTE_INT .)
    EQUAL           reduce using rule 66 (varcte -> CTE_INT .)
    GREATER_EQUAL   reduce using rule 66 (varcte -> CTE_INT .)
    LESS_EQUAL      reduce using rule 66 (varcte -> CTE_INT .)
    SEMICOLON       reduce using rule 66 (varcte -> CTE_INT .)
    COMMA           reduce using rule 66 (varcte -> CTE_INT .)
    RPAREN          reduce using rule 66 (varcte -> CTE_INT .)


state 68

    (67) varcte -> CTE_FLOAT .

    OP_MUL          reduce using rule 67 (varcte -> CTE_FLOAT .)
    OP_DIV          reduce using rule 67 (varcte -> CTE_FLOAT .)
    OP_SUM          reduce using rule 67 (varcte -> CTE_FLOAT .)
    OP_SUB          reduce using rule 67 (varcte -> CTE_FLOAT .)
    LESS            reduce using rule 67 (varcte -> CTE_FLOAT .)
    GREATER         reduce using rule 67 (varcte -> CTE_FLOAT .)
    NOT_EQUAL       reduce using rule 67 (varcte -> CTE_FLOAT .)
    EQUAL           reduce using rule 67 (varcte -> CTE_FLOAT .)
    GREATER_EQUAL   reduce using rule 67 (varcte -> CTE_FLOAT .)
    LESS_EQUAL      reduce using rule 67 (varcte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 67 (varcte -> CTE_FLOAT .)
    COMMA           reduce using rule 67 (varcte -> CTE_FLOAT .)
    RPAREN          reduce using rule 67 (varcte -> CTE_FLOAT .)


state 69

    (42) f_call -> ID LPAREN expresion_list_opt . RPAREN SEMICOLON

    RPAREN          shift and go to state 97


state 70

    (43) expresion_list_opt -> expresion_list .
    (45) expresion_list -> expresion_list . COMMA expresion

    RPAREN          reduce using rule 43 (expresion_list_opt -> expresion_list .)
    COMMA           shift and go to state 98


state 71

    (44) expresion_list_opt -> empty .

    RPAREN          reduce using rule 44 (expresion_list_opt -> empty .)


state 72

    (46) expresion_list -> expresion .

    COMMA           reduce using rule 46 (expresion_list -> expresion .)
    RPAREN          reduce using rule 46 (expresion_list -> expresion .)


state 73

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END . SEMICOLON

    SEMICOLON       shift and go to state 99


state 74

    (37) condition -> KEYWORD_IF LPAREN expresion . RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON

    RPAREN          shift and go to state 100


state 75

    (36) cycle -> KEYWORD_DO LBRACE body . RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    RBRACE          shift and go to state 101


state 76

    (31) print -> KEYWORD_PRINT LPAREN print_items . RPAREN SEMICOLON
    (32) print_items -> print_items . COMMA print_item

    RPAREN          shift and go to state 102
    COMMA           shift and go to state 103


state 77

    (33) print_items -> print_item .

    RPAREN          reduce using rule 33 (print_items -> print_item .)
    COMMA           reduce using rule 33 (print_items -> print_item .)


state 78

    (34) print_item -> expresion .

    RPAREN          reduce using rule 34 (print_item -> expresion .)
    COMMA           reduce using rule 34 (print_item -> expresion .)


state 79

    (35) print_item -> CTE_STRING .

    RPAREN          reduce using rule 35 (print_item -> CTE_STRING .)
    COMMA           reduce using rule 35 (print_item -> CTE_STRING .)


state 80

    (18) parametros -> ID COLON type . param_list
    (19) param_list -> . COMMA ID COLON type param_list
    (20) param_list -> . empty
    (68) empty -> .

    COMMA           shift and go to state 105
    RPAREN          reduce using rule 68 (empty -> .)

    param_list                     shift and go to state 104
    empty                          shift and go to state 106

state 81

    (15) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET . vars_opt body RBRACKET SEMICOLON
    (2) vars_opt -> . vars_opt VARS
    (3) vars_opt -> . VARS
    (4) vars_opt -> . empty
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON
    (68) empty -> .

  ! shift/reduce conflict for KEYWORD_VAR resolved as shift
    KEYWORD_VAR     shift and go to state 8
    ID              reduce using rule 68 (empty -> .)
    KEYWORD_IF      reduce using rule 68 (empty -> .)
    KEYWORD_DO      reduce using rule 68 (empty -> .)
    KEYWORD_PRINT   reduce using rule 68 (empty -> .)
    RBRACKET        reduce using rule 68 (empty -> .)

  ! KEYWORD_VAR     [ reduce using rule 68 (empty -> .) ]

    vars_opt                       shift and go to state 107
    VARS                           shift and go to state 6
    empty                          shift and go to state 7

state 82

    (30) assign -> ID ASSIGN_SIGN expresion SEMICOLON .

    ID              reduce using rule 30 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_IF      reduce using rule 30 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_DO      reduce using rule 30 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 30 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    RBRACE          reduce using rule 30 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)
    RBRACKET        reduce using rule 30 (assign -> ID ASSIGN_SIGN expresion SEMICOLON .)


state 83

    (47) expresion -> exp comparador . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    exp                            shift and go to state 108
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 84

    (55) exp -> exp OP_SUM . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    termino                        shift and go to state 109
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 85

    (56) exp -> exp OP_SUB . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    termino                        shift and go to state 110
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 86

    (49) comparador -> LESS .

    LPAREN          reduce using rule 49 (comparador -> LESS .)
    OP_SUM          reduce using rule 49 (comparador -> LESS .)
    OP_SUB          reduce using rule 49 (comparador -> LESS .)
    ID              reduce using rule 49 (comparador -> LESS .)
    CTE_INT         reduce using rule 49 (comparador -> LESS .)
    CTE_FLOAT       reduce using rule 49 (comparador -> LESS .)


state 87

    (50) comparador -> GREATER .

    LPAREN          reduce using rule 50 (comparador -> GREATER .)
    OP_SUM          reduce using rule 50 (comparador -> GREATER .)
    OP_SUB          reduce using rule 50 (comparador -> GREATER .)
    ID              reduce using rule 50 (comparador -> GREATER .)
    CTE_INT         reduce using rule 50 (comparador -> GREATER .)
    CTE_FLOAT       reduce using rule 50 (comparador -> GREATER .)


state 88

    (51) comparador -> NOT_EQUAL .

    LPAREN          reduce using rule 51 (comparador -> NOT_EQUAL .)
    OP_SUM          reduce using rule 51 (comparador -> NOT_EQUAL .)
    OP_SUB          reduce using rule 51 (comparador -> NOT_EQUAL .)
    ID              reduce using rule 51 (comparador -> NOT_EQUAL .)
    CTE_INT         reduce using rule 51 (comparador -> NOT_EQUAL .)
    CTE_FLOAT       reduce using rule 51 (comparador -> NOT_EQUAL .)


state 89

    (52) comparador -> EQUAL .

    LPAREN          reduce using rule 52 (comparador -> EQUAL .)
    OP_SUM          reduce using rule 52 (comparador -> EQUAL .)
    OP_SUB          reduce using rule 52 (comparador -> EQUAL .)
    ID              reduce using rule 52 (comparador -> EQUAL .)
    CTE_INT         reduce using rule 52 (comparador -> EQUAL .)
    CTE_FLOAT       reduce using rule 52 (comparador -> EQUAL .)


state 90

    (53) comparador -> GREATER_EQUAL .

    LPAREN          reduce using rule 53 (comparador -> GREATER_EQUAL .)
    OP_SUM          reduce using rule 53 (comparador -> GREATER_EQUAL .)
    OP_SUB          reduce using rule 53 (comparador -> GREATER_EQUAL .)
    ID              reduce using rule 53 (comparador -> GREATER_EQUAL .)
    CTE_INT         reduce using rule 53 (comparador -> GREATER_EQUAL .)
    CTE_FLOAT       reduce using rule 53 (comparador -> GREATER_EQUAL .)


state 91

    (54) comparador -> LESS_EQUAL .

    LPAREN          reduce using rule 54 (comparador -> LESS_EQUAL .)
    OP_SUM          reduce using rule 54 (comparador -> LESS_EQUAL .)
    OP_SUB          reduce using rule 54 (comparador -> LESS_EQUAL .)
    ID              reduce using rule 54 (comparador -> LESS_EQUAL .)
    CTE_INT         reduce using rule 54 (comparador -> LESS_EQUAL .)
    CTE_FLOAT       reduce using rule 54 (comparador -> LESS_EQUAL .)


state 92

    (62) factor -> OP_SUM varcte .

    OP_MUL          reduce using rule 62 (factor -> OP_SUM varcte .)
    OP_DIV          reduce using rule 62 (factor -> OP_SUM varcte .)
    OP_SUM          reduce using rule 62 (factor -> OP_SUM varcte .)
    OP_SUB          reduce using rule 62 (factor -> OP_SUM varcte .)
    LESS            reduce using rule 62 (factor -> OP_SUM varcte .)
    GREATER         reduce using rule 62 (factor -> OP_SUM varcte .)
    NOT_EQUAL       reduce using rule 62 (factor -> OP_SUM varcte .)
    EQUAL           reduce using rule 62 (factor -> OP_SUM varcte .)
    GREATER_EQUAL   reduce using rule 62 (factor -> OP_SUM varcte .)
    LESS_EQUAL      reduce using rule 62 (factor -> OP_SUM varcte .)
    SEMICOLON       reduce using rule 62 (factor -> OP_SUM varcte .)
    COMMA           reduce using rule 62 (factor -> OP_SUM varcte .)
    RPAREN          reduce using rule 62 (factor -> OP_SUM varcte .)


state 93

    (58) termino -> termino OP_MUL . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    factor                         shift and go to state 111
    varcte                         shift and go to state 66

state 94

    (59) termino -> termino OP_DIV . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    factor                         shift and go to state 112
    varcte                         shift and go to state 66

state 95

    (63) factor -> OP_SUB varcte .

    OP_MUL          reduce using rule 63 (factor -> OP_SUB varcte .)
    OP_DIV          reduce using rule 63 (factor -> OP_SUB varcte .)
    OP_SUM          reduce using rule 63 (factor -> OP_SUB varcte .)
    OP_SUB          reduce using rule 63 (factor -> OP_SUB varcte .)
    LESS            reduce using rule 63 (factor -> OP_SUB varcte .)
    GREATER         reduce using rule 63 (factor -> OP_SUB varcte .)
    NOT_EQUAL       reduce using rule 63 (factor -> OP_SUB varcte .)
    EQUAL           reduce using rule 63 (factor -> OP_SUB varcte .)
    GREATER_EQUAL   reduce using rule 63 (factor -> OP_SUB varcte .)
    LESS_EQUAL      reduce using rule 63 (factor -> OP_SUB varcte .)
    SEMICOLON       reduce using rule 63 (factor -> OP_SUB varcte .)
    COMMA           reduce using rule 63 (factor -> OP_SUB varcte .)
    RPAREN          reduce using rule 63 (factor -> OP_SUB varcte .)


state 96

    (61) factor -> LPAREN expresion . RPAREN

    RPAREN          shift and go to state 113


state 97

    (42) f_call -> ID LPAREN expresion_list_opt RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 114


state 98

    (45) expresion_list -> expresion_list COMMA . expresion
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 115
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 99

    (1) Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON .

    $end            reduce using rule 1 (Programa -> KEYWORD_PROGRAM ID SEMICOLON vars_opt funcs_opt KEYWORD_MAIN LBRACE body RBRACE KEYWORD_END SEMICOLON .)


state 100

    (37) condition -> KEYWORD_IF LPAREN expresion RPAREN . cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (38) cuadr_if -> .

    LBRACE          reduce using rule 38 (cuadr_if -> .)

    cuadr_if                       shift and go to state 116

state 101

    (36) cycle -> KEYWORD_DO LBRACE body RBRACE . KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON

    KEYWORD_WHILE   shift and go to state 117


state 102

    (31) print -> KEYWORD_PRINT LPAREN print_items RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 118


state 103

    (32) print_items -> print_items COMMA . print_item
    (34) print_item -> . expresion
    (35) print_item -> . CTE_STRING
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 79
    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    print_item                     shift and go to state 119
    expresion                      shift and go to state 78
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 104

    (18) parametros -> ID COLON type param_list .

    RPAREN          reduce using rule 18 (parametros -> ID COLON type param_list .)


state 105

    (19) param_list -> COMMA . ID COLON type param_list

    ID              shift and go to state 120


state 106

    (20) param_list -> empty .

    RPAREN          reduce using rule 20 (param_list -> empty .)


state 107

    (15) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt . body RBRACKET SEMICOLON
    (2) vars_opt -> vars_opt . VARS
    (21) body -> . statement_list
    (5) VARS -> . KEYWORD_VAR var_list SEMICOLON
    (22) statement_list -> . statement statement_list
    (23) statement_list -> . statement
    (24) statement_list -> . empty
    (25) statement -> . assign
    (26) statement -> . condition
    (27) statement -> . cycle
    (28) statement -> . f_call
    (29) statement -> . print
    (68) empty -> .
    (30) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (37) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (36) cycle -> . KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (42) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (31) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    KEYWORD_VAR     shift and go to state 8
    RBRACKET        reduce using rule 68 (empty -> .)
    ID              shift and go to state 27
    KEYWORD_IF      shift and go to state 37
    KEYWORD_DO      shift and go to state 38
    KEYWORD_PRINT   shift and go to state 39

    body                           shift and go to state 121
    VARS                           shift and go to state 10
    statement_list                 shift and go to state 29
    statement                      shift and go to state 30
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 108

    (47) expresion -> exp comparador exp .
    (55) exp -> exp . OP_SUM termino
    (56) exp -> exp . OP_SUB termino

    SEMICOLON       reduce using rule 47 (expresion -> exp comparador exp .)
    COMMA           reduce using rule 47 (expresion -> exp comparador exp .)
    RPAREN          reduce using rule 47 (expresion -> exp comparador exp .)
    OP_SUM          shift and go to state 84
    OP_SUB          shift and go to state 85


state 109

    (55) exp -> exp OP_SUM termino .
    (58) termino -> termino . OP_MUL factor
    (59) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 55 (exp -> exp OP_SUM termino .)
    OP_SUB          reduce using rule 55 (exp -> exp OP_SUM termino .)
    LESS            reduce using rule 55 (exp -> exp OP_SUM termino .)
    GREATER         reduce using rule 55 (exp -> exp OP_SUM termino .)
    NOT_EQUAL       reduce using rule 55 (exp -> exp OP_SUM termino .)
    EQUAL           reduce using rule 55 (exp -> exp OP_SUM termino .)
    GREATER_EQUAL   reduce using rule 55 (exp -> exp OP_SUM termino .)
    LESS_EQUAL      reduce using rule 55 (exp -> exp OP_SUM termino .)
    SEMICOLON       reduce using rule 55 (exp -> exp OP_SUM termino .)
    COMMA           reduce using rule 55 (exp -> exp OP_SUM termino .)
    RPAREN          reduce using rule 55 (exp -> exp OP_SUM termino .)
    OP_MUL          shift and go to state 93
    OP_DIV          shift and go to state 94


state 110

    (56) exp -> exp OP_SUB termino .
    (58) termino -> termino . OP_MUL factor
    (59) termino -> termino . OP_DIV factor

    OP_SUM          reduce using rule 56 (exp -> exp OP_SUB termino .)
    OP_SUB          reduce using rule 56 (exp -> exp OP_SUB termino .)
    LESS            reduce using rule 56 (exp -> exp OP_SUB termino .)
    GREATER         reduce using rule 56 (exp -> exp OP_SUB termino .)
    NOT_EQUAL       reduce using rule 56 (exp -> exp OP_SUB termino .)
    EQUAL           reduce using rule 56 (exp -> exp OP_SUB termino .)
    GREATER_EQUAL   reduce using rule 56 (exp -> exp OP_SUB termino .)
    LESS_EQUAL      reduce using rule 56 (exp -> exp OP_SUB termino .)
    SEMICOLON       reduce using rule 56 (exp -> exp OP_SUB termino .)
    COMMA           reduce using rule 56 (exp -> exp OP_SUB termino .)
    RPAREN          reduce using rule 56 (exp -> exp OP_SUB termino .)
    OP_MUL          shift and go to state 93
    OP_DIV          shift and go to state 94


state 111

    (58) termino -> termino OP_MUL factor .

    OP_MUL          reduce using rule 58 (termino -> termino OP_MUL factor .)
    OP_DIV          reduce using rule 58 (termino -> termino OP_MUL factor .)
    OP_SUM          reduce using rule 58 (termino -> termino OP_MUL factor .)
    OP_SUB          reduce using rule 58 (termino -> termino OP_MUL factor .)
    LESS            reduce using rule 58 (termino -> termino OP_MUL factor .)
    GREATER         reduce using rule 58 (termino -> termino OP_MUL factor .)
    NOT_EQUAL       reduce using rule 58 (termino -> termino OP_MUL factor .)
    EQUAL           reduce using rule 58 (termino -> termino OP_MUL factor .)
    GREATER_EQUAL   reduce using rule 58 (termino -> termino OP_MUL factor .)
    LESS_EQUAL      reduce using rule 58 (termino -> termino OP_MUL factor .)
    SEMICOLON       reduce using rule 58 (termino -> termino OP_MUL factor .)
    COMMA           reduce using rule 58 (termino -> termino OP_MUL factor .)
    RPAREN          reduce using rule 58 (termino -> termino OP_MUL factor .)


state 112

    (59) termino -> termino OP_DIV factor .

    OP_MUL          reduce using rule 59 (termino -> termino OP_DIV factor .)
    OP_DIV          reduce using rule 59 (termino -> termino OP_DIV factor .)
    OP_SUM          reduce using rule 59 (termino -> termino OP_DIV factor .)
    OP_SUB          reduce using rule 59 (termino -> termino OP_DIV factor .)
    LESS            reduce using rule 59 (termino -> termino OP_DIV factor .)
    GREATER         reduce using rule 59 (termino -> termino OP_DIV factor .)
    NOT_EQUAL       reduce using rule 59 (termino -> termino OP_DIV factor .)
    EQUAL           reduce using rule 59 (termino -> termino OP_DIV factor .)
    GREATER_EQUAL   reduce using rule 59 (termino -> termino OP_DIV factor .)
    LESS_EQUAL      reduce using rule 59 (termino -> termino OP_DIV factor .)
    SEMICOLON       reduce using rule 59 (termino -> termino OP_DIV factor .)
    COMMA           reduce using rule 59 (termino -> termino OP_DIV factor .)
    RPAREN          reduce using rule 59 (termino -> termino OP_DIV factor .)


state 113

    (61) factor -> LPAREN expresion RPAREN .

    OP_MUL          reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    OP_DIV          reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    OP_SUM          reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    OP_SUB          reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    LESS            reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    GREATER         reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    NOT_EQUAL       reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    EQUAL           reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    GREATER_EQUAL   reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    LESS_EQUAL      reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    SEMICOLON       reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    COMMA           reduce using rule 61 (factor -> LPAREN expresion RPAREN .)
    RPAREN          reduce using rule 61 (factor -> LPAREN expresion RPAREN .)


state 114

    (42) f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .

    ID              reduce using rule 42 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 42 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 42 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 42 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    RBRACE          reduce using rule 42 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 42 (f_call -> ID LPAREN expresion_list_opt RPAREN SEMICOLON .)


state 115

    (45) expresion_list -> expresion_list COMMA expresion .

    COMMA           reduce using rule 45 (expresion_list -> expresion_list COMMA expresion .)
    RPAREN          reduce using rule 45 (expresion_list -> expresion_list COMMA expresion .)


state 116

    (37) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if . LBRACE body RBRACE else_arg SEMICOLON

    LBRACE          shift and go to state 122


state 117

    (36) cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE . LPAREN expresion RPAREN SEMICOLON

    LPAREN          shift and go to state 123


state 118

    (31) print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .

    ID              reduce using rule 31 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 31 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 31 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 31 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    RBRACE          reduce using rule 31 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 31 (print -> KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON .)


state 119

    (32) print_items -> print_items COMMA print_item .

    RPAREN          reduce using rule 32 (print_items -> print_items COMMA print_item .)
    COMMA           reduce using rule 32 (print_items -> print_items COMMA print_item .)


state 120

    (19) param_list -> COMMA ID . COLON type param_list

    COLON           shift and go to state 124


state 121

    (15) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 125


state 122

    (37) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE . body RBRACE else_arg SEMICOLON
    (21) body -> . statement_list
    (22) statement_list -> . statement statement_list
    (23) statement_list -> . statement
    (24) statement_list -> . empty
    (25) statement -> . assign
    (26) statement -> . condition
    (27) statement -> . cycle
    (28) statement -> . f_call
    (29) statement -> . print
    (68) empty -> .
    (30) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (37) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (36) cycle -> . KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (42) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (31) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    ID              shift and go to state 27
    KEYWORD_IF      shift and go to state 37
    KEYWORD_DO      shift and go to state 38
    KEYWORD_PRINT   shift and go to state 39

    body                           shift and go to state 126
    statement_list                 shift and go to state 29
    statement                      shift and go to state 30
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 123

    (36) cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN . expresion RPAREN SEMICOLON
    (47) expresion -> . exp comparador exp
    (48) expresion -> . exp
    (55) exp -> . exp OP_SUM termino
    (56) exp -> . exp OP_SUB termino
    (57) exp -> . termino
    (58) termino -> . termino OP_MUL factor
    (59) termino -> . termino OP_DIV factor
    (60) termino -> . factor
    (61) factor -> . LPAREN expresion RPAREN
    (62) factor -> . OP_SUM varcte
    (63) factor -> . OP_SUB varcte
    (64) factor -> . varcte
    (65) varcte -> . ID
    (66) varcte -> . CTE_INT
    (67) varcte -> . CTE_FLOAT

    LPAREN          shift and go to state 65
    OP_SUM          shift and go to state 61
    OP_SUB          shift and go to state 63
    ID              shift and go to state 58
    CTE_INT         shift and go to state 67
    CTE_FLOAT       shift and go to state 68

    expresion                      shift and go to state 127
    exp                            shift and go to state 60
    termino                        shift and go to state 62
    factor                         shift and go to state 64
    varcte                         shift and go to state 66

state 124

    (19) param_list -> COMMA ID COLON . type param_list
    (9) type -> . KEYWORD_INT
    (10) type -> . KEYWORD_FLOAT
    (11) type -> . KEYWORD_STRING

    KEYWORD_INT     shift and go to state 45
    KEYWORD_FLOAT   shift and go to state 46
    KEYWORD_STRING  shift and go to state 47

    type                           shift and go to state 128

state 125

    (15) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 129


state 126

    (37) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body . RBRACE else_arg SEMICOLON

    RBRACE          shift and go to state 130


state 127

    (36) cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion . RPAREN SEMICOLON

    RPAREN          shift and go to state 131


state 128

    (19) param_list -> COMMA ID COLON type . param_list
    (19) param_list -> . COMMA ID COLON type param_list
    (20) param_list -> . empty
    (68) empty -> .

    COMMA           shift and go to state 105
    RPAREN          reduce using rule 68 (empty -> .)

    param_list                     shift and go to state 132
    empty                          shift and go to state 106

state 129

    (15) FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON .

    KEYWORD_MAIN    reduce using rule 15 (FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON .)
    KEYWORD_VOID    reduce using rule 15 (FUNCS -> KEYWORD_VOID ID LPAREN parametros_opt RPAREN LBRACKET vars_opt body RBRACKET SEMICOLON .)


state 130

    (37) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE . else_arg SEMICOLON
    (39) else_arg -> . KEYWORD_ELSE cuadr_else LBRACE body RBRACE
    (41) else_arg -> . empty
    (68) empty -> .

    KEYWORD_ELSE    shift and go to state 134
    SEMICOLON       reduce using rule 68 (empty -> .)

    else_arg                       shift and go to state 133
    empty                          shift and go to state 135

state 131

    (36) cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 136


state 132

    (19) param_list -> COMMA ID COLON type param_list .

    RPAREN          reduce using rule 19 (param_list -> COMMA ID COLON type param_list .)


state 133

    (37) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg . SEMICOLON

    SEMICOLON       shift and go to state 137


state 134

    (39) else_arg -> KEYWORD_ELSE . cuadr_else LBRACE body RBRACE
    (40) cuadr_else -> .

    LBRACE          reduce using rule 40 (cuadr_else -> .)

    cuadr_else                     shift and go to state 138

state 135

    (41) else_arg -> empty .

    SEMICOLON       reduce using rule 41 (else_arg -> empty .)


state 136

    (36) cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .

    ID              reduce using rule 36 (cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_IF      reduce using rule 36 (cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_DO      reduce using rule 36 (cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 36 (cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    RBRACE          reduce using rule 36 (cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 36 (cycle -> KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON .)


state 137

    (37) condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .

    ID              reduce using rule 37 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_IF      reduce using rule 37 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_DO      reduce using rule 37 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    KEYWORD_PRINT   reduce using rule 37 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    RBRACE          reduce using rule 37 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)
    RBRACKET        reduce using rule 37 (condition -> KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON .)


state 138

    (39) else_arg -> KEYWORD_ELSE cuadr_else . LBRACE body RBRACE

    LBRACE          shift and go to state 139


state 139

    (39) else_arg -> KEYWORD_ELSE cuadr_else LBRACE . body RBRACE
    (21) body -> . statement_list
    (22) statement_list -> . statement statement_list
    (23) statement_list -> . statement
    (24) statement_list -> . empty
    (25) statement -> . assign
    (26) statement -> . condition
    (27) statement -> . cycle
    (28) statement -> . f_call
    (29) statement -> . print
    (68) empty -> .
    (30) assign -> . ID ASSIGN_SIGN expresion SEMICOLON
    (37) condition -> . KEYWORD_IF LPAREN expresion RPAREN cuadr_if LBRACE body RBRACE else_arg SEMICOLON
    (36) cycle -> . KEYWORD_DO LBRACE body RBRACE KEYWORD_WHILE LPAREN expresion RPAREN SEMICOLON
    (42) f_call -> . ID LPAREN expresion_list_opt RPAREN SEMICOLON
    (31) print -> . KEYWORD_PRINT LPAREN print_items RPAREN SEMICOLON

    RBRACE          reduce using rule 68 (empty -> .)
    ID              shift and go to state 27
    KEYWORD_IF      shift and go to state 37
    KEYWORD_DO      shift and go to state 38
    KEYWORD_PRINT   shift and go to state 39

    body                           shift and go to state 140
    statement_list                 shift and go to state 29
    statement                      shift and go to state 30
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 140

    (39) else_arg -> KEYWORD_ELSE cuadr_else LBRACE body . RBRACE

    RBRACE          shift and go to state 141


state 141

    (39) else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE .

    SEMICOLON       reduce using rule 39 (else_arg -> KEYWORD_ELSE cuadr_else LBRACE body RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for KEYWORD_VAR in state 4 resolved as shift
WARNING: shift/reduce conflict for KEYWORD_VOID in state 5 resolved as shift
WARNING: shift/reduce conflict for KEYWORD_VAR in state 81 resolved as shift
WARNING: reduce/reduce conflict in state 30 resolved using rule (statement_list -> statement)
WARNING: rejected rule (empty -> <empty>) in state 30
